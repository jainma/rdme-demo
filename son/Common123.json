{
  "openapi": "3.0.1",
  "info": {
    "title": "Rest APIs",
    "description": "Rest APIs",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "API",
      "description": "<p markdown=\"1\">From here you may browse our library of API resources, organized hierarchically by domain, or major functional area, logical subgroup, API resource, and all available operations against that resource. For more information about the concepts and technology behind our API, refer to the [Getting started](C:636f581c-50a8-41a7-af43-e5057f9c20bd) documentation.</p><p>Our platform provides a powerful application programming interface and documentation to help you develop secure, scalable, and high-performance applications that leverage the full breadth of capabilities offered by our backend services.</p><p markdown=\"1\">The Workforce Management suite's API is founded on a pragmatic implementation of the [representational state transfer](http://en.wikipedia.org/wiki/Representational_State_Transfer) architectural style and allows access to your organization's workforce management data using common HTTP methods and the [JSON](http://www.json.org) interchange format.</p>"
    },
    {
      "name": "Access Control Points",
      "description": "<p>This resource provides a set of operations on Access Control Points (ACPs). Access Control Points can correspond to general functions, such as Timecard and Schedule, or to individual options, such as birth dates or wage rates.</p><ul><li><strong>Function Access Hierarchy</strong> -- Suite functions and components are listed on the Function Access Profile pages and can be expanded to display the full hierarchy. Each function, or access control point, has only one parent point. For example, the Timekeeping Employee category is a parent to function areas such as Timestamp for Employee and functions in the timecard such as cancel meal deductions and comments. If you assign Allowed access rights to a parent function, access rights are allowed throughout the functional hierarchy.</li><li><strong>Actions</strong> -- Access Control Points have an associated permission action. Actions are operations that employees can perform on the function. Access profiles can have Add, Edit, Delete, and View actions associated with an access control point.</li><li><strong>Access Scope</strong> -- Access scopes define whether a user is allowed to perform an action. Access scopes include All, All but self, None, Allowed, and Disallowed. Various appears at the parent level when you do no set all child functions to Allow or Disallow.</li></ul>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Access Method Profiles",
      "description": "<p>This resource allow you to retrieve and manipulate access method profiles, which allow you to more closely refine a user's experience based on how each user accesses the system.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Average Pay Rate Sets",
      "description": "<p>This resource allows you to create, retrieve, update, and delete average pay rate set objects, which describe the average pay rate set for a location on a date.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Average Pay Rates",
      "description": "<p>This resource allows you to retrieve the average pay rate for a location on a date.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Bulk Downloads",
      "description": "This resource allows you to process a large data set that exceeds the UI display limit and return the output in CSV format.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Comments",
      "description": "This resource allows you to retrive information about Comments as an employee or manager.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Common Resources I",
      "description": "Common Resources is the largest single domain and consists of two groupings. Common Resources are shared by all domains, allowing you to access and manipulate general employee data, user display profiles, business structures, the Control Center, the Transaction Assistant, and data aggregated across domains.",
      "x-parent": "API"
    },
    {
      "name": "Control Center Profiles",
      "description": "This resource allows you to retrieve information about Control Center profiles.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Cost Centers",
      "description": "<p>This resource allows you to add, delete, or change cost center objects.</p><p>The cost center is an attribute on the business structure that allows work to be charged to the company's General Ledger.</p><p>When a cost center is assigned to a location, an employee's work inherits the cost center when the employee works in that location. Otherwise, cost centers are inherited from the parent. If a cost center is not associated with any parent, then the cost center from the lowest location level of the employeeâ€™s primary job is used.</p><p>You can also assign time to a specific cost center, for example when you need to charge work to the cost center of the employee's primary job or to another paying cost center.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Custom Tiles",
      "description": "<p>This resource allows you to create, read, update, and delete custom tiles.</p><p>Custom tiles provide admins and managers a way to integrate tiles from third party systems into the Dimensions dashboard.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Delegate Profiles",
      "description": "<p>This resource allows you to retrieve and manipulate delegate profiles, which contain the list of persons used as delegates.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Device Groups",
      "description": "The Device Groups resource allows you to retrieve all device group objects defined in the system.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Display Profiles",
      "description": "This resource allows you to create, retrieve, update, and delete user display profiles. Use display profiles to configure and assign display preferences. Display profiles can be based on a job, department, or geographical location.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Domain Event Categories",
      "description": "This resource allows you to create, retrieve, and update domain event categories, which consist of system messages, leaves of absence, Timekeeping, myrequest, and so on.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Domain Event Navigations",
      "description": "This resource provides a set of operations that allow you to retrieve and manipulate domain event navigations.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Domain Events",
      "description": "<p>This resource allows you to retrieve and manipulate Domain Events and information associated with Domain Events.</p><p markdown=\"1\">A Service Limit applies to some of the bulk operations against this resource. Refer to the [Service Limits](C:fd45ab6e-6a20-4ce2-97e9-e2c2a95dacd5) topic for more information.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Dynamic Event Notification Mappings",
      "description": "<p>This resource allows you to retrieve and manipulate information about dynamic event notification mappings.</p><p markdown=\"1\">A Service Limit applies to some of the bulk operations against this resource. Refer to the [Service Limits](C:fd45ab6e-6a20-4ce2-97e9-e2c2a95dacd5) topic for more information.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Dynamic Event Notifications",
      "description": "This resource allows you to send dynamic event notifications.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Employee Groups",
      "description": "<p>This resource allows you to create, retrieve, and update employee groups.</p><p>An employee group defines the employees that are eligible to work for a manager. Employee groups include all home employees of the manager (employees whose primary job is in the specified organizational set) and all employees who are eligible to transfer (employees that can work a job in the specified organizational set).</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Entitlements",
      "description": "This resource helps to fetch the entitlement's summary and history details.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Feature Switches",
      "description": "This resource allows you to retrieve and manipulate feature switches, which allow you to enable and disable optional suite components.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Fiscal Calendars",
      "description": "<p>This resource provides a set of operations that facilitate the set up of fiscal periods.</p><p>A fiscal year calendar can start and end on any date that you define. Within each fiscal year, you select the type of fiscal period that you use for planning and analysis.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Function Access Profiles",
      "description": "<p>This resource allows you to create, retrieve, and delete Function Access Profiles and information associated with Function Access Profiles.</p><p>Function Access Profiles contain permissions to points in the hierarchy of functions, known as access control points (ACPs). The access control points can correspond to general functions, such as Timecard and Schedule, or to individual options, such as birth dates or wage rates.</p><ul><li><strong>Function Access Hierarchy</strong> -- Suite functions and components are listed on the Function Access Profile pages and can be expanded to display the full hierarchy. Each function, or access control point, has only one parent point. For example, the Timekeeping Employee category is a parent to function areas such as Timestamp for Employee and functions in the timecard such as cancel meal deductions and comments. If you assign Allowed access rights to a parent function, access rights are allowed throughout the functional hierarchy.</li><li><strong>Actions</strong> -- Access control points have an associated permission action. Actions are operations that employees can perform on the function. Access profiles can have Add, Edit, Delete, and View actions associated with an access control point.</li><li><strong>Access Scope</strong> -- Access scopes define whether a user is allowed to perform an action. Access scopes include All, All but self, None, Allowed, and Disallowed. Various appears at the parent level when you do no set all child functions to Allow or Disallow.</li></ul>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Generic Data Access Profiles",
      "description": "This resource allows you to retrieve and manipulate generic data access profiles.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Generic Notifications",
      "description": "<p>This resource allows you to retrieve and manipulate Generic Notifications.</p><p markdown=\"1\">A Service Limit applies to some of the bulk operations against this resource. Refer to the [Service Limits](C:fd45ab6e-6a20-4ce2-97e9-e2c2a95dacd5) topic for more information.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Hours of Operation",
      "description": "<p>This resource allows you to create, retrieve, update, and delete Hours of Operation objects, which describe the schedule of work for a facility.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Hours of Operation Assignments",
      "description": "<p>This resource allows you to create, retrieve, update, and delete hours of operation assignments in regular hours, each of which describes standard open and close times for each day of the week.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Hours of Operation Override Assignments",
      "description": "<p>This resource allows you to create, retrieve, update, and delete hours of operation override assignments, which describe changes to standard hours of operation for a specific date, such as a holiday.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Hours of Operation Overrides",
      "description": "<p>This resource allows you to create, retrieve, update, and delete hours of operation override objects, which describe changes to standard hours of operation for a specific date, such as a holiday.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Known IP Addresses",
      "description": "<p>This resource allows you to retrieve and manipulate Known IP Addresses. A Known IP Address is a whitelisted IP address.</p><p>IP whitelisting allows administrators to create and manage lists of IP ranges authorized to access Workforce Dimensions. When this feature is enabled, only connections from IP addresses in the whitelists are able to connect to the system. IP addresses outside of the whitelist are blocked.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Messaging Notifications",
      "description": "This resource allows you to send and retrieve common messaging notifications.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Pay Period Timespans",
      "description": "This operation returns the start and end dates and times for a pay period.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Payroll Export",
      "description": "<p>This resource allows you to export payroll via a stream or asynchronously and retrieve details about asynchronous payroll export jobs.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Running Payroll](C:5454eb18-64db-4dc9-ba76-d23e34e43410).</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Payroll Staging",
      "description": "<p>This resource allows you to stage payroll asynchronously and retrieve details about staged payroll jobs.</p><p markdown=\"1\">Refer to the following topic for more information, example calls, and tutorials: [A Guide to Running Payroll](C:5454eb18-64db-4dc9-ba76-d23e34e43410).</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Payroll Tables",
      "description": "<p>This resource allows you to retrieve and manipulate payroll and accrual tables.</p><p markdown=\"1\">Refer to the following topic for more information, example calls, and tutorials: [A Guide to Running Payroll](C:5454eb18-64db-4dc9-ba76-d23e34e43410).</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Proactively Guide Employees - Behaviors Configuration",
      "description": "This resource allows you to retrieve and modify Proactively Guide Employees (PGE) setup behaviors configuration.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Proactively Guide Employees - Behaviors Configuration Items",
      "description": "This resource allows you to retrieve and modify Proactively Guide Employees (PGE) behaviors configuration items.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Reviewer Lists",
      "description": "<p>This resource allows you to retrieve and manipulate reviewer lists, which contain the list of persons used to review requests.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Reviewer Purposes",
      "description": "<p>This resource allows you to create, retrieve, delete and update reviewer purposes.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Symbolic Periods",
      "description": "<p>This resource provides a set of operations that facilitate the set up of symbolic periods.</p><p>Symbolic periods allow employees to enter values such as full day, which translates into the number of hours in an employee's shift.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Symbolic Purposes",
      "description": "<p>This resource allows you to retrieve and manipulate symbolic purposes.</p><p>Symbolic purpose is a label with a predefined type that can be associated with a job, reviewer list, request subtype, or a rule in order to apply additional filtering logic. Symbolic purposes replace reviewer purposes.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "TeleTime IP User Profiles",
      "description": "This resource allows you to retrieve a list of the TeleTime IP User Profiles that are available for person assignment.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Timecard Approval Methods",
      "description": "<p>This resource allows you to retrieve timecard approval methods.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Timezones",
      "description": "This resource allows you to retrieve and set the system's timezone.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Transaction Assistant",
      "description": "<p>This resource allows you to read transaction errors in import feeds from integrations, punch feeds from UDM, and configuration migrations from SDM.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "Transfer Display Profiles",
      "description": "<p>This resource allows you to retrieve and manipulate transfer display profiles.</p><p>A transfer display profile defines which organizational node types an employee can view when searching for business structure jobs.</p>",
      "x-parent": "Common Resources I"
    },
    {
      "name": "WiFi Access Points",
      "description": "This resource allows you to retrieve and manipulate WiFi Access Points, which are defined as a named object with a BSSID. WiFi Access Points can also be associated with WiFi Networks. WiFi Networks are leveraged by Known Places as an additional mechanism through which a user can assert their location while geofenced.",
      "x-parent": "Common Resources I"
    },
    {
      "name": "WiFi Networks",
      "description": "This resource allows you to retrieve and manipulate WiFi Networks, which are defined as a named object with an ESSID. WiFi Networks can be associated with WiFi Access Points. WiFi networks are leveraged by Known Places as an additional mechanism through which a user can assert their location while geofenced.",
      "x-parent": "Common Resources I"
    }
  ],
  "paths": {
    "/v1/commons/access_control_points": {
      "get": {
        "tags": [
          "Access Control Points"
        ],
        "summary": "Returns all Access Control Points.",
        "description": "This operation returns a list of all Access Control Points.",
        "operationId": "Retrieve All Access Control Points",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Access Control Points.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Access Control Point"
                  }
                }
              }
            }
          },
          "403": {
            "description": "[WCO-127825]-The current user is not authorized to retrieve access control points.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/access_method_profiles": {
      "get": {
        "tags": [
          "Access Method Profiles"
        ],
        "summary": "Returns all access method profiles.",
        "description": "<p>This operation returns all access method profiles.</p><br /><p>The associated Access Control Point is ACCESS_METHOD_PROFILE.</p>",
        "operationId": "Retrieve All Access Method Profiles",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of access method profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Access Method Profile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Access Method Profiles"
        ],
        "summary": "Creates an access method profile.",
        "description": "<p>This operation creates an access method profile.</p><br /><p>The associated Access Control Point is ACCESS_METHOD_PROFILE.</p>",
        "operationId": "Create Access Method Profile",
        "requestBody": {
          "description": "The Create Access Method Profile request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Access Method Profile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Access Method Profile"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created Access Method Profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Access Method Profile"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul><li>Name must be unique. This name is already in use.</li><li>Name is required.</li><li>Name contains illegal characters.</li><li>Description contains illegal characters.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/access_method_profiles/access_methods": {
      "get": {
        "tags": [
          "Access Method Profiles"
        ],
        "summary": "Returns access methods.",
        "description": "<p>This operation returns access methods.</p><br /><p>The associated Access Control Point is ACCESS_METHOD_PROFILE.</p>",
        "operationId": "Retrieve Access Methods",
        "responses": {
          "200": {
            "description": "Successfully retrieved Access Methods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMethodDetails"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/access_method_profiles/multi_delete": {
      "post": {
        "tags": [
          "Access Method Profiles"
        ],
        "summary": "Deletes one or more access method profiles.",
        "description": "<p>This operation deletes one or more access method profiles.</p><br /><p>The associated Access Control Point is ACCESS_METHOD_PROFILE.</p>",
        "operationId": "Delete Access Method Profiles",
        "requestBody": {
          "description": "The Delete Access Method Profiles request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully deleted access method profiles.",
            "content": {}
          },
          "207": {
            "description": "Partially deleted access method profiles.",
            "content": {}
          },
          "400": {
            "description": "An Invalid ID or qualifier was supplied in the request.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/access_method_profiles/multi_read": {
      "post": {
        "tags": [
          "Access Method Profiles"
        ],
        "summary": "Returns one or more access method profiles.",
        "description": "<p>This operation returns one or more access method profiles by object references.</p><br /><p>The associated Access Control Point is ACCESS_METHOD_PROFILE.</p>",
        "operationId": "Retrieve Access Method Profiles",
        "requestBody": {
          "description": "The Retrieve Access Method Profiles request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiOperationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retreived access method profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Access Method Profile"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partially retrieved access method profiles.",
            "content": {}
          },
          "400": {
            "description": "An Invalid ID or qualifier was supplied in the request.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/access_method_profiles/multi_upsert": {
      "post": {
        "tags": [
          "Access Method Profiles"
        ],
        "summary": "Creates or updates one or more access method profiles.",
        "description": "<p>This operation creates or updates one or more access method profiles.</p><br /><p>The associated Access Control Point is ACCESS_METHOD_PROFILE.</p>",
        "operationId": "Create or Update Access Method Profiles",
        "requestBody": {
          "description": "The Create or Update Access Method Profiles request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Access Method Profile"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created or updated access method profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Access Method Profile"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partially created or updated Access Method Profiles.",
            "content": {}
          },
          "400": {
            "description": "Access Method Profile not found.",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/access_method_profiles/role_profiles": {
      "get": {
        "tags": [
          "Access Method Profiles"
        ],
        "summary": "Returns role profiles.",
        "description": "<p>This operation returns role profiles.</p><br /><p>The associated Access Control Point is ACCESS_METHOD_PROFILE.</p>",
        "operationId": "Retrieve Role Profiles",
        "responses": {
          "200": {
            "description": "Successfully retrieved all existing role profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AccessMethodDetails"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/access_method_profiles/{id}": {
      "get": {
        "tags": [
          "Access Method Profiles"
        ],
        "summary": "Returns an access method profile.",
        "description": "<p>This operation returns an access method profile by ID.</p><br /><p>The associated Access Control Point is ACCESS_METHOD_PROFILE.</p>",
        "operationId": "Retrieve Access Method Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an access method profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the Access Method Profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Access Method Profile"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          },
          "404": {
            "description": "An Access Method Profile with that ID does not exist.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Access Method Profiles"
        ],
        "summary": "Updates an access method profile.",
        "description": "<p>This operation updates an access method profile by ID.</p><br /><p>The associated Access Control Point is ACCESS_METHOD_PROFILE.</p>",
        "operationId": "Update Access Method Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an access method profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update Access Method Profile by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Access Method Profile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated Access Method Profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Access Method Profile"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul><li>Name must be unique. This name is already used.</li><li>Name is required.</li><li>Name contains illegal characters.</li><li>Description contains illegal characters.</li>",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          },
          "404": {
            "description": "An Access Method Profile with that ID does not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Access Method Profiles"
        ],
        "summary": "Deletes an access method profile.",
        "description": "<p>This operation deletes an access method profile by ID.</p><br /><p>The associated Access Control Point is ACCESS_METHOD_PROFILE.</p>",
        "operationId": "Delete Access Method Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an access method profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted access method profile.",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          },
          "404": {
            "description": "An access method profile with that ID does not exist.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/average_pay_rate_sets": {
      "get": {
        "tags": [
          "Average Pay Rate Sets"
        ],
        "summary": "Returns all Average Pay Rate Sets.",
        "description": "<p>This operation returns all Average Pay Rate Sets.</p><br /><p>The associated Access Control Point is CREATE_AVERAGE_PAY_RATE_SETS, action=VIEW.</p>",
        "operationId": "Retrieve All Average Pay Rate Sets",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AveragePayRateSet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul><li>You are not authorized to perform this operation.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>You are not authorized to perform this operation.</li></ul>",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Average Pay Rate Sets"
        ],
        "summary": "Creates and returns an Average Pay Rate Set.",
        "description": "<p>This operation creates and returns an Average Pay Rate Set.</p><br /><p>The associated Access Control Point is CREATE_AVERAGE_PAY_RATE_SETS, action=EDIT.</p>",
        "operationId": "Create Average Pay Rate Set",
        "requestBody": {
          "description": "The Retrieve Average Pay Rate - One Location request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AveragePayRateSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AveragePayRateSet"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul> <li>[WCO-148906] - The following collection cannot be empty: {paramName}.</li> <li>[WCO-148918] - You must specify the following parameter: {paramName}.</li> <li>[WCO-148902] - The following parameter must be null: {paramName}.</li> <li>[WCO-148907] - Invalid Date range. Start: {effectiveDate} - End: {endDate}.</li> <li>[WCO-148905] - The following object reference is invalid: {paramName}.</li> <li>[WCO-148919] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-148906] - The following collection cannot be empty: {paramName}.</li> <li>[WCO-148904] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>You are not authorized to perform this operation.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/average_pay_rate_sets/apply_read": {
      "post": {
        "tags": [
          "Average Pay Rate Sets"
        ],
        "summary": "Returns the average pay rate set for a single location.",
        "description": "<p>This operation returns the average pay rate set for a single location on a date.</p><br /><p>The associated Access Control Point is CREATE_AVERAGE_PAY_RATE_SETS, action=VIEW.</p>",
        "operationId": "Retrieve Average Pay Rate Set - One Location",
        "requestBody": {
          "description": "The Retrieve Average Pay Rate Set - One Location request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AverageReadContext"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AveragePayRateSet"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul><li>[WCO-148918] - You must specify the following parameter: {paramName}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>You are not authorized to perform this operation.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/average_pay_rate_sets/multi_create": {
      "post": {
        "tags": [
          "Average Pay Rate Sets"
        ],
        "summary": "Creates and returns one or more Average Pay Rate Sets.",
        "description": "<p>This operation creates and returns one or more Average Pay Rate Sets.</p><br /><p>The associated Access Control Point is CREATE_AVERAGE_PAY_RATE_SETS, action=EDIT.</p>",
        "operationId": "Create Average Pay Rate Sets",
        "requestBody": {
          "description": "The Create Average Pay Rate Sets request payload, which contains a list of Average Pay Rate Set objects to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AveragePayRateSet"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AveragePayRateSet"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-148901] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvgPayRateResponse"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul><li>[WCO-148906] - The following collection cannot be empty: {paramName}.</li> <li>[WCO-148918] - You must specify the following parameter: {paramName}.</li> <li>[WCO-148902] - The following parameter must be null: {paramName}.</li> <li>[WCO-148907] - Invalid Date range. Start: {effectiveDate} - End: {endDate}.</li> <li>[WCO-148905] - The following object reference is invalid: {paramName}.</li> <li>[WCO-148919] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-148906] - The following collection cannot be empty: {paramName}.</li> <li>[WCO-148904] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> </ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>You are not authorized to perform this operation.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/average_pay_rate_sets/multi_delete": {
      "post": {
        "tags": [
          "Average Pay Rate Sets"
        ],
        "summary": "Deletes one or more Average Pay Rate Sets.",
        "description": "<p>This operation deletes one or more Average Pay Rate Sets.</p><br /><p>The associated Access Control Point is CREATE_AVERAGE_PAY_RATE_SETS, action=EDIT.</p>",
        "operationId": "Delete Average Pay Rate Sets",
        "requestBody": {
          "description": "The Delete Average Pay Rate Sets request payload, which contains a list of IDs of the Average Pay Rate Sets to delete.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AveragePayRateSets"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully completed.",
            "content": {}
          },
          "207": {
            "description": "[WCO-148901] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvgPayRateResponse"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul><li>[WCO-148919] - You must specify the following parameter: {paramName}.</li><li>[WCO-148905] - The following object reference is invalid: {refName}.</li><li>[WCO-148919] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-148904] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-148903] - The following reference list cannot be empty: {paramName}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>You are not authorized to perform this operation.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/average_pay_rate_sets/multi_update": {
      "post": {
        "tags": [
          "Average Pay Rate Sets"
        ],
        "summary": "Updates and returns one or more Average Pay Rate Sets.",
        "description": "<p>This operation updates and returns one or more Average Pay Rate Sets.</p><br /><p>The associated Access Control Point is CREATE_AVERAGE_PAY_RATE_SETS, action=EDIT.</p>",
        "operationId": "Update Average Pay Rate Sets",
        "requestBody": {
          "description": "The Update Average Pay Rate Sets request payload, which contains a list of Average Pay Rate Set objects to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AveragePayRateSet"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AveragePayRateSet"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-148901] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvgPayRateResponse"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul><li>[WCO-148906] - The following collection cannot be empty: {paramName}.</li> <li>[WCO-148918] - You must specify the following parameter: {paramName}.</li> <li>[WCO-148902] - The following parameter must be null: {paramName}.</li> <li>[WCO-148907] - Invalid Date range. Start: {effectiveDate} - End: {endDate}.</li> <li>[WCO-148905] - The following object reference is invalid: {paramName}.</li> <li>[WCO-148919] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-148906] - The following collection cannot be empty: {paramName}.</li> <li>[WCO-148904] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> </ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>You are not authorized to perform this operation.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/average_pay_rate_sets/{id}": {
      "put": {
        "tags": [
          "Average Pay Rate Sets"
        ],
        "summary": "Updates and returns an Average Pay Rate Set.",
        "description": "<p>This operation updates and returns an Average Pay Rate Set by ID.</p><br /><p>The associated Access Control Point is CREATE_AVERAGE_PAY_RATE_SETS, action=EDIT.</p>",
        "operationId": "Update Average Pay Rate Set by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an Average Pay Rate Set.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update Average Pay Rate Set by ID request payload, which is an object representing the Average Pay Rate Set to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AveragePayRateSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AveragePayRateSet"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul><li>[WCO-148906] - The following collection cannot be empty: {paramName}.</li> <li>[WCO-148918] - You must specify the following parameter: {paramName}.</li> <li>[WCO-148902] - The following parameter must be null: {paramName}.</li> <li>[WCO-148907] - Invalid Date range. Start: {effectiveDate} - End: {endDate}.</li> <li>[WCO-148905] - The following object reference is invalid: {paramName}.</li> <li>[WCO-148919] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-148906] - The following collection cannot be empty: {paramName}.</li> <li>[WCO-148904] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> </ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>You are not authorized to perform this operation.</li></ul>",
            "content": {}
          },
          "409": {
            "description": "This Average Pay Rate Sets has already been updated/deleted by some other user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Average Pay Rate Sets"
        ],
        "summary": "Deletes an Average Pay Rate Set.",
        "description": "<p>This operation deletes an Average Pay Rate Set by ID.</p><br /><p>The associated Access Control Point is CREATE_AVERAGE_PAY_RATE_SETS, action=EDIT.</p>",
        "operationId": "Delete Average Pay Rate Set by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an Average Pay Rate Set.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.",
            "content": {}
          },
          "403": {
            "description": "<ul><li>You are not authorized to perform this operation.</li></ul>",
            "content": {}
          },
          "404": {
            "description": "<ul><li>[WCO-148919] - Entity not found. Type: {object}. ID: {qualifier/id}.</li></ul>",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/average_pay_rates/apply_read": {
      "post": {
        "tags": [
          "Average Pay Rates"
        ],
        "summary": "Returns the average pay rate for a single location.",
        "description": "This operation returns the average pay rate for a single location on a date.",
        "operationId": "Retrieve Average Pay Rate - One Location",
        "requestBody": {
          "description": "The Retrieve Average Pay Rate - One Location request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AverageReadContext"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AveragePayRate"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-148918] - You must specify the following parameter: {paramName}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>You are not authorized to perform this operation.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/comments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Returns a list of Comments.",
        "description": "This operation returns a filtered list of Comments.",
        "operationId": "Retrieve Comments-Manager",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID of a Comment.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text of a Comment.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of a Comment.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "The category ID of a Comment.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "category_name",
            "in": "query",
            "description": "The category name of a Comment.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved list of comment's information for specified filters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/comments/employee_comments": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "Returns a list of Comments with the request category type.",
        "description": "This operation returns a filtered list of Comments that are associated with the request category type.",
        "operationId": "Retrieve Comments-Employee",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID of a request category Comment.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text of a request category Comment.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The status of a request category Comment.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "category_id",
            "in": "query",
            "description": "The category ID of a request category Comment.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "category_name",
            "in": "query",
            "description": "The category name of a request category Comment.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of request category Comments for specified filters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/control_center_profiles": {
      "get": {
        "tags": [
          "Control Center Profiles"
        ],
        "summary": "Returns all Control Center profiles.",
        "description": "This operation returns a list of all Control Center profiles.",
        "operationId": "Retrieve All Control Center Profiles",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Control Center profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Control Center Profile JSON"
                  }
                }
              }
            }
          },
          "403": {
            "description": "[WCO-104020]-The current user is not authorized to access Control Center profiles.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/control_center_profiles/multi_read": {
      "post": {
        "tags": [
          "Control Center Profiles"
        ],
        "summary": "Returns a list of Control Center profiles.",
        "description": "This operation returns a list of Control Center profiles by object references.",
        "operationId": "Retrieve Control Center Profiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Control Center profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Control Center Profile JSON"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-104017]-Partially retrieved a list of the Control Center profiles. Some of the specified object references do not exist.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104020]-The current user is not authorized to access Control Center profiles.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104016]-The specified Control Center profile object references do not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/control_center_profiles/{id}": {
      "get": {
        "tags": [
          "Control Center Profiles"
        ],
        "summary": "Returns a Control Center profile by ID.",
        "description": "This operation returns a Control Center profile by ID.",
        "operationId": "Retrieve Control Center Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Control Center profile to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a Control Center profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Control Center Profile JSON"
                }
              }
            }
          },
          "403": {
            "description": "[WCO-104020]-The current user is not authorized to access Control Center profiles.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104021]-Control Center profile does not exist with given ID.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/cost_centers": {
      "get": {
        "tags": [
          "Cost Centers"
        ],
        "summary": "Returns a list of all cost centers in the system. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use GET /v2/commons/cost_centers.</strong></p><p>This operation returns a list of all cost centers in the system.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Retrieve All Cost Centers (Deprecated)",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Cost Centers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cost Center Model"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Unable to retrieve Cost Centers",
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/v1/commons/cost_centers/apply_read": {
      "post": {
        "tags": [
          "Cost Centers"
        ],
        "summary": "Returns a paginated list of cost centers.",
        "description": "This operation returns a paginated list of cost centers.",
        "operationId": "Retrieve Paginated List of Cost Centers",
        "requestBody": {
          "description": "The Retrieve Paginated List of Cost Centers request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/costCenterPaginationSortFilterRestParameters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Cost Centers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pagination Response for Cost Centers"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: The Cost Centers retrieval unsuccessful.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/cost_centers/multi_create": {
      "post": {
        "tags": [
          "Cost Centers"
        ],
        "summary": "Creates a list of cost centers.",
        "description": "This operation creates a list of cost centers.",
        "operationId": "Create Cost Centers",
        "requestBody": {
          "description": "The Create Cost Centers request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Cost Center Model"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created a list of Cost Centers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cost Center Model"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request:  Unable to create Cost Center",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/cost_centers/multi_delete": {
      "post": {
        "tags": [
          "Cost Centers"
        ],
        "summary": "Deletes a list of cost centers.",
        "description": "This operation deletes a list of cost centers by object references.",
        "operationId": "Delete Cost Centers",
        "requestBody": {
          "description": "The Delete Cost Centers request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Labor Category Object Reference Setup Model"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully deleted a list of Cost Centers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cost Center Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: <ul><li>The cost centers to delete must exist</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/cost_centers/multi_read": {
      "post": {
        "tags": [
          "Cost Centers"
        ],
        "summary": "Returns one or more cost centers.",
        "description": "<p>This operation returns one or more cost centers by object references.</p><br /><p>The associated Access Control Point is COST_CENTERS.</p>",
        "operationId": "Retrieve Cost Centers",
        "requestBody": {
          "description": "The Retrieve Cost Centers request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CostCenterSearchCriteria"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The Retrieve Cost Centers request payload.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cost Center Model"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Retrieved a partial list of cost centers.",
            "content": {}
          },
          "400": {
            "description": "Bad Request: The Cost Centers retrieval unsuccessful.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/cost_centers/multi_update": {
      "post": {
        "tags": [
          "Cost Centers"
        ],
        "summary": "Updates a list of cost centers.",
        "description": "This operation updates a list of cost centers.",
        "operationId": "Update Cost Centers",
        "requestBody": {
          "description": "The Update Cost Centers request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Cost Center Model"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated a list of Cost Centers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cost Center Model"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: <ul><li>The cost centers to update must exist</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/cost_centers/{id}": {
      "get": {
        "tags": [
          "Cost Centers"
        ],
        "summary": "Returns the requested cost center. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use GET /v2/commons/cost_centers/{id}.</strong></p><p>This operation returns a cost center by ID.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Retrieve Cost Center by ID (Deprecated)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the cost center.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the Cost Center",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cost Center Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Unable to retrieve Cost Center",
            "content": {}
          }
        },
        "deprecated": true
      }
    },
    "/v1/commons/custom_tiles": {
      "get": {
        "tags": [
          "Custom Tiles"
        ],
        "summary": "Returns a list of all custom tiles accessible to the currently logged-in user.",
        "description": "This operation returns a list of all the custom tiles present in the system which are accessible to the currently logged-in user.",
        "operationId": "Retrieve All Custom Tiles",
        "responses": {
          "200": {
            "description": "All the custom tiles were retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Custom Tile Resource"
                }
              }
            }
          },
          "204": {
            "description": "No custom tiles are present in the system.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Custom Tiles"
        ],
        "summary": "Creates a new custom tile.",
        "description": "This operation creates a new custom tile and returns the successfully created resource as a response.",
        "operationId": "Create Custom Tile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Custom Tile Resource"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Custom Tile Resource"
                }
              }
            }
          },
          "201": {
            "description": "Custom tile was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Custom Tile Resource"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-123004]-URL is a required field for creating a custom tile.</li><li>[WCO-123005]-Name is a required field for creating a custom tile.</li><li>[WCO-123007]-The height {height} is not correct for {cardType} custom tile. Allowed values for this type are {allHeights}.</li><li>[WCO-123008]-A content provider is required when a relative URL is provided.</li><li>[WCO-123009]-Service with name {service} is not registered.</li><li>[WCO-123010]-The locale {locale} is not supported.</li><li>[WCO-123011]-The navigation type {type} is not valid. Valid navigation types are {allTypes}.</li><li>[WCO-123013]-The name is too big. Please enter a name within {length} characters.</li><li>[WCO-123016]-The license {license} is not valid.</li><li>[WCO-123017]-The permission {perm} is not valid.</li><li>[WCO-123019]-At least one {labelType} label is required for creating a custom tile.</li><li>[WCO-123020]-Navigation URL is required.</li><li>[WCO-123021]-URL text is required.</li><li>[WCO-123022]-Navigation is not applicable for external card type.</li><li>[WCO-123023]-Service identifier is not applicable for external custom tile.</li><li>[WCO-123024]-Type of custom tile cannot be changed.</li><li>[WCO-123025]-URL is not valid.</li><li>[WCO-123026]-The URL text is too long. Please enter a text within {length} characters.</li><li>[WCO-123027]-The description is too long. Please enter a description within {length} characters.</li><li>[WCO-123028]-Icon is not required for external custom tile.</li></ul>",
            "content": {}
          },
          "409": {
            "description": "A custom tile with name {name} already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/custom_tiles/multi_read": {
      "post": {
        "tags": [
          "Custom Tiles"
        ],
        "summary": "Returns custom tiles by reference. A reference consist of either the ID or the qualifier of a custom tile.",
        "description": "<p>This operation returns custom tiles based on the provided list of references.</p><p>A reference consists of either the ID or the qualifier of a custome tile. The qualifier of a custom tile is <code>name</code></p><p>If both ID and qualifier are provided, the ID is used to retrieve the tile.</p>",
        "operationId": "Retrieve Custom Tiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Custom Tile Reference"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "All the custom tiles were retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Custom Tile Resource"
                }
              }
            }
          },
          "207": {
            "description": "Some records could not be retrieved. Check response for details.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/custom_tiles/{id}": {
      "get": {
        "tags": [
          "Custom Tiles"
        ],
        "summary": "Returns a custom tile.",
        "description": "This operation returns a custom tile by ID.",
        "operationId": "Retrieve Custom Tile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom tile was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Custom Tile Resource"
                }
              }
            }
          },
          "404": {
            "description": "Custom tile with ID {tileId} does not exist.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Custom Tiles"
        ],
        "summary": "Updates a custom tile.",
        "description": "This operation updates a custom tile by ID and returns the successfully updated resource as a response.",
        "operationId": "Update Custom Tile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Custom Tile Resource"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Custom tile was updated created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Custom Tile Resource"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-123004]-URL is a required field for creating a custom tile.</li><li>[WCO-123005]-Name is a required field for creating a custom tile.</li><li>[WCO-123007]-The height {height} is not correct for {cardType} custom tile. Allowed values for this type are {allHeights}.</li><li>[WCO-123008]-A content provider is required when a relative URL is provided.</li><li>[WCO-123009]-Service with name {service} is not registered.</li><li>[WCO-123010]-The locale {locale} is not supported.</li><li>[WCO-123011]-The navigation type {type} is not valid. Valid navigation types are {allTypes}.</li><li>[WCO-123013]-The name is too big. Please enter a name within {length} characters.</li><li>[WCO-123016]-The license {license} is not valid.</li><li>[WCO-123017]-The permission {perm} is not valid.</li><li>[WCO-123019]-At least one {labelType} label is required for creating a custom tile.</li><li>[WCO-123020]-Navigation URL is required.</li><li>[WCO-123021]-URL text is required.</li><li>[WCO-123022]-Navigation is not applicable for external card type.</li><li>[WCO-123023]-Service identifier is not applicable for external custom tile.</li><li>[WCO-123024]-Type of custom tile cannot be changed.</li><li>[WCO-123025]-URL is not valid.</li><li>[WCO-123026]-The URL text is too long. Please enter a text within {length} characters.</li><li>[WCO-123027]-The description is too long. Please enter a description within {length} characters.</li><li>[WCO-123028]-Icon is not required for external custom tile.</li></ul>",
            "content": {}
          },
          "404": {
            "description": "Custom tile with ID {tileId} does not exist.",
            "content": {}
          },
          "409": {
            "description": "A custom tile with name {name} already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Custom Tiles"
        ],
        "summary": "Deletes a custom tile.",
        "description": "This operation deletes a custom tile by ID.",
        "operationId": "Delete Custom Tile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Custom Tile Resource"
                }
              }
            }
          },
          "204": {
            "description": "Custom tile was successfully deleted.",
            "content": {}
          },
          "404": {
            "description": "Custom tile with ID {tileId} does not exist.",
            "content": {}
          },
          "409": {
            "description": "Custom tile with ID {tileId} cannot be deleted, possibly because it is being referenced somewhere else.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/delegate_profiles": {
      "get": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Returns all delegate profiles.",
        "description": "<p>This operation returns all delegate profiles.  The response may be paginated using index and count. The count query parameter has no upper limit.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Retrieve All Delegate Profiles",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "index",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "count",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all delegate profiles successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateProfileRecordDTO"
                }
              }
            }
          },
          "400": {
            "description": "The profiles could not be found in the database.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Creates a delegate profile.",
        "description": "<p>This operation creates a delegate profile.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Create Delegate Profile",
        "requestBody": {
          "description": "The Create Delegate Profile request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateProfileDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created a delegate profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateProfileResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/delegate_profiles/apply_upsert": {
      "post": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Adds or removes delegates from delegate profiles.",
        "description": "<p>This operation adds or removes delegates from delegate profiles.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Add or Remove Delegate Profile Delegates",
        "requestBody": {
          "description": "The Add or Remove Delegate Profile Delegates request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegateProfileApplyDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "All Delegate profiles records created/updates successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateProfileDTO"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Some of the delegateProfile records are created/updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateProfileDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/delegate_profiles/apply_upsert/async": {
      "post": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Adds or removes delegates from delegate profiles asynchronously.",
        "description": "<p>This operation adds or removes delegates from delegate profiles asynchronously.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Add or Remove Delegate Profile Delegates Asynchronously",
        "requestBody": {
          "description": "The Add or Remove Delegate Profile Delegates Asynchronously request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegateProfileApplyDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateProfileDTO"
                  }
                }
              }
            }
          },
          "202": {
            "description": "The delegate profiles request has been accepted for processing with a tracking request ID as a response in the location header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateProfileResponseDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Add or Remove Delegate Profile Delegates Asynchronously unsuccessful.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/delegate_profiles/async": {
      "get": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Returns a summary of asynchronous Delegate Profile jobs.",
        "description": "<p>This operation returns a summary of asynchronous Delegate Profile jobs.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Retrieve Summary of Asynchronous Delegate Profile Jobs",
        "responses": {
          "200": {
            "description": "Successfully returned a summary of asynchronous Delegate Profile jobs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/delegate_profiles/async/{executionKey}/response": {
      "get": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Returns the response payload for an asynchronous operation.",
        "description": "<p>This operation returns the response payload for an asynchronous operation by execution key.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Retrieve Asynchronous Response Payload by Key",
        "parameters": [
          {
            "name": "executionKey",
            "in": "path",
            "description": "The execution key associated with an asynchronous operation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched JSON response for the execution key.",
            "content": {}
          },
          "404": {
            "description": "Invalid execution key.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/delegate_profiles/async/{executionKey}/status": {
      "get": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Returns the status of an asynchronous Delegate Profiles request.",
        "description": "<p>This operation returns the status of an asynchronous Delegate Profiles request by execution key.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Retrieve Delegate Profile Asynchronous Request Status by Key",
        "parameters": [
          {
            "name": "executionKey",
            "in": "path",
            "description": "The execution key of an asynchronous Delegate Profile request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a Delegate Profile asynchronous request status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateProfileJobStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/delegate_profiles/multi_delete": {
      "post": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Deletes one or more delegate profiles.",
        "description": "<p>This operation deletes one or more delegate profiles.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Delete Delegate Profiles",
        "requestBody": {
          "description": "The Delete Delegate Profiles request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateProfileDTO"
                }
              }
            }
          },
          "204": {
            "description": "Success",
            "content": {}
          },
          "207": {
            "description": "Some of the delegate profile records are deleted successfully.",
            "content": {}
          },
          "400": {
            "description": "The profile could not be found in the database.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/delegate_profiles/multi_read": {
      "post": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Returns one or more delegate profiles.",
        "description": "<p>This operation returns one or more delegate profiles.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Retrieve Delegate Profiles",
        "requestBody": {
          "description": "The Retrieve Delegate Profiles request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns all delegate profiles successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateProfileResponseDTO"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Some of the delegate profile records returned successfully.",
            "content": {}
          },
          "400": {
            "description": "The profile could not be found in the database.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/delegate_profiles/multi_upsert": {
      "post": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Creates or updates one or more delegate profiles.",
        "description": "<p>This operation creates or updates one or more delegate profiles.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Create or Update Delegate Profiles",
        "requestBody": {
          "description": "The Create or Update Delegate Profiles request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegateProfileDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "All Delegate profiles records created/updates successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateProfileResponseDTO"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Some of the delegateProfile records are created/updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateProfileResponseDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/delegate_profiles/multi_upsert/async": {
      "post": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Processes and returns delegate profiles requests asynchronously.",
        "description": "<p>This operation processes and returns delegate profiles requests asynchronously.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Create or Update Delegate Profiles Asynchronously",
        "requestBody": {
          "description": "The Create or Update Delegate Profiles Asynchronously request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DelegateProfileDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateProfileDTO"
                  }
                }
              }
            }
          },
          "202": {
            "description": "The delegate profiles request has been accepted for processing. A tracking request ID is in the Content-Location header.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DelegateProfileResponseDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The Create or Update Delegate Profiles Asynchronously operation was unsuccessful.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/delegate_profiles/{id}": {
      "get": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Returns a delegate profile.",
        "description": "<p>This operation returns a delegate profile by ID.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Retrieve Delegate Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a delegate profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a delegate profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateProfileResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: id, Value: {parameterValue}.",
            "content": {}
          },
          "404": {
            "description": "The profile could not be found in the database.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Updates a delegate profile.",
        "description": "<p>This operation updates a delegate profile by ID.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Update Delegate Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a delegate profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update Delegate Profile by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DelegateProfileDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Delegate Profile record updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateProfileResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "404": {
            "description": "The profile could not be found in the database.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Delegate Profiles"
        ],
        "summary": "Deletes a delegate profile.",
        "description": "<p>This operation deletes a delegate profile by ID.</p><br /><p>The associated Access Control Point is DELEGATE_PROFILES.</p>",
        "operationId": "Delete Delegate Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a delegate profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DelegateProfileDTO"
                }
              }
            }
          },
          "204": {
            "description": "Delegate Profile record deleted successfully.",
            "content": {}
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "404": {
            "description": "The profile could not be found in the database.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/device_groups": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "Returns a list of all device groups.",
        "description": "This operation returns a list of all device groups in the system.",
        "operationId": "Retrieve Device Groups",
        "parameters": [
          {
            "name": "token",
            "in": "header",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Retrieved a list of Device Groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Device Group Model"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/display_profiles": {
      "get": {
        "tags": [
          "Display Profiles"
        ],
        "summary": "Returns a list of all display profiles.",
        "description": "This operation returns a list of all display profiles.",
        "operationId": "Retrieve All Display Profiles",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of all display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Display Profile Setup Model"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Display Profiles"
        ],
        "summary": "Creates a display profile.",
        "description": "This operation creates a display profile.",
        "operationId": "Create Display Profile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Display Profile Setup Model"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully created a Display profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Display Profile Setup Model"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-119056] - Invalid request. Display profile object is not provided.",
            "content": {}
          },
          "403": {
            "description": "[WCO-119007] - The current user is not authorized to access display profiles.",
            "content": {}
          },
          "409": {
            "description": "[WCO-119000] - A display profile with the name {displayProfileName} already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/display_profiles/multi_create": {
      "post": {
        "tags": [
          "Display Profiles"
        ],
        "summary": "Creates a list of display profiles.",
        "description": "<p>This operation creates a list of display profiles.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of display profiles that can be processed in a single request.</p><ul><li>The <strong>Number of Display Profiles</strong> cannot exceed 10.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Create Display Profiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Display Profile Setup Model"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully created a list of display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Display Profile Setup Model"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-119040] - Partially created a list of display profiles. Some of the specified display profiles could not be created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIExceptionDetailResult"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-119041] - The specified display profiles could not be created.",
            "content": {}
          },
          "403": {
            "description": "[WCO-119007] - The current user is not authorized to access display profiles.",
            "content": {}
          },
          "413": {
            "description": "[WCO-119042] - Number of display profiles provided in request exceeds service limit.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/display_profiles/multi_delete": {
      "post": {
        "tags": [
          "Display Profiles"
        ],
        "summary": "Deletes a list of display profiles.",
        "description": "<p>This operation deletes a list of display profiles.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of display profiles that can be processed in a single request.</p><ul><li>The <strong>Number of Display Profiles</strong> cannot exceed 10.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Delete Display Profiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ObjectRefList"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Display Profile Setup Model"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted list of display profiles.",
            "content": {}
          },
          "207": {
            "description": "[WCO-119048] - Partially deleted a list of the display profiles. Some of the specified object references do not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIExceptionDetailResult"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-119047] - The specified display profiles object references cannot be deleted.",
            "content": {}
          },
          "403": {
            "description": "[WCO-119007] - The current user is not authorized to access display profiles.",
            "content": {}
          },
          "413": {
            "description": "[WCO-119042] - Number of display profiles provided in request exceeds service limit.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/display_profiles/multi_read": {
      "post": {
        "tags": [
          "Display Profiles"
        ],
        "summary": "Returns a list of display profiles.",
        "description": "This operation returns a list of display profiles by object references.",
        "operationId": "Retrieve Display Profiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ObjectRef"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Display Profile Setup Model"
                  }
                }
              }
            }
          },
          "404": {
            "description": "[WCO-119024] - display profiles with the specified references do not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/display_profiles/multi_update": {
      "post": {
        "tags": [
          "Display Profiles"
        ],
        "summary": "Updates a list of display profiles.",
        "description": "<p>This operation updates a list of display profiles.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of display profiles that can be processed in a single request.</p><ul><li>The <strong>Number of Display Profiles</strong> cannot exceed 10.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Update Display Profiles",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Display Profile Setup Model"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully updated list of display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Display Profile Setup Model"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-119045 ] - Partially updated a list of display profiles. Some of the specified display profiles could not be updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIExceptionDetailResult"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-119046] - The specified display profiles object could not be updated.",
            "content": {}
          },
          "403": {
            "description": "[WCO-119007] - The current user is not authorized to access display profiles.",
            "content": {}
          },
          "413": {
            "description": "[WCO-119042] - Number of display profiles provided in request exceeds service limit.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/display_profiles/{id}": {
      "get": {
        "tags": [
          "Display Profiles"
        ],
        "summary": "Returns a display profile.",
        "description": "This operation returns a display profile by ID.",
        "operationId": "Retrieve Display Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the display profile to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a display profile by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Display Profile Setup Model"
                }
              }
            }
          },
          "404": {
            "description": "[WCO-119016] - A display profile with that ID does not exist.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Display Profiles"
        ],
        "summary": "Updates a display profile.",
        "description": "This operation updates a display profile by ID.",
        "operationId": "Update Display Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Display Profile Setup Model"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully updated a Display profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Display Profile Setup Model"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-119001] - A Display profile name must not exceed 30 characters.",
            "content": {}
          },
          "403": {
            "description": "[WCO-119042] - Number of display profiles provided in request exceeds service limit.",
            "content": {}
          },
          "404": {
            "description": "[WFP-05809] - The specified entity cannot be updated as it does not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Display Profiles"
        ],
        "summary": "This operation deletes a display profile by ID.",
        "description": "Deletes a display profile.",
        "operationId": "Delete Display Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a display profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted display profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Display Profile Setup Model"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-119013] - The default display profile cannot be deleted.",
            "content": {}
          },
          "403": {
            "description": "[WCO-119007] - The current user is not authorized to access display profiles.",
            "content": {}
          },
          "404": {
            "description": "[WCO-119016] - A display profile does not exist with specified ID.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/employee_groups": {
      "get": {
        "tags": [
          "Employee Groups"
        ],
        "summary": "Returns all employee groups or one by name.",
        "description": "This operation returns a list of all employee groups or returns a single employee group by name.",
        "operationId": "Retrieve All Employee Groups or by Name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of an employee group.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all_details",
            "in": "query",
            "description": "A Boolean indicator of whether or not the response is lightweight which is response containing only id and name fields.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of employee groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Employee Group Model"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/employee_groups/multi_create": {
      "post": {
        "tags": [
          "Employee Groups"
        ],
        "summary": "Creates employee groups.",
        "description": "This operation creates employee groups.",
        "operationId": "Create Employee Groups",
        "requestBody": {
          "description": "The Create Employee Groups request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Employee Group Model"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created a list of Employee Groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Employee Group Model"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/employee_groups/multi_read": {
      "post": {
        "tags": [
          "Employee Groups"
        ],
        "summary": "Returns employee groups.",
        "description": "This operation returns employee groups by object references.",
        "operationId": "Retrieve Employee Groups",
        "requestBody": {
          "description": "The Retrieve Employee Groups request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Multi Read Request for employee Groups"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of employee groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Employee Group Model"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Multi Status response: <ul><li>The employee groups success list along with errors occured for input parameter for employee group</li></ul>",
            "content": {}
          },
          "400": {
            "description": "<p>Bad Request:</p> <ul> <li>[employeegroup-common:1] - You do not have permission to access this resource. </li> <li>[employeegroup-common:4] - The labor employee group does not exist. Employee Group Name: {Name}. </li> <li>[employeegroup-common:5] - An internal error has occurred. </li> <li>[employeegroup-common:8] - Id is missing. </li> <li>[employeegroup-common:17] - An error has occurred processing client request. </li> <li>Invalid Parameter passed as input for fetching employee groups </li> </ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/employee_groups/multi_update": {
      "post": {
        "tags": [
          "Employee Groups"
        ],
        "summary": "Updates employee groups.",
        "description": "This operation updates employee groups.",
        "operationId": "Update Employee Groups",
        "requestBody": {
          "description": "The Update Employee Groups request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Employee Group Model"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated a list of employee groups.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Employee Group Model"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad Request:</p><ul> <li>[employeegroup-common:1] - You do not have permission to access this resource. </li> <li>[employeegroup-common:2] - Name must be unique. This name is already used: {value}. </li> <li>[employeegroup-common:3] - The employee group does not exist. Employee Group Id: {Id}. </li> <li>[employeegroup-common:5] - An internal error has occurred. </li> <li>[employeegroup-common:8] - Id is missing. </li> <li>[employeegroup-common:9] - Version is missing. </li> <li>[employeegroup-common:10] - The information has been modified by another user. Please refresh your data, incorporate your changes and save again. </li> <li>[employeegroup-common:14] - Name is required </li> <li>[employeegroup-common:15] - The value {Data} contains one or more of the following reserved characters: {Reserved} </li> <li>[employeegroup-common:17] - An error has occurred processing client request. </li> <li>[employeegroup-common:18] - Org group is required. </li> <li>[employeegroup-common:19] - Employee group name exceeds max length </li> <li>[employeegroup-common:21] - Referenced Org group does not exist or is of invalid type. </li> <li>[employeegroup-common:21] - Referenced Org group does not exist or is of invalid type. </li> <li>[employeegroup-common:22] - Referenced Labor category profile does not exist. </li> <li>[employeegroup-common:23] - Referenced Org group does not exist </li> <li>[employeegroup-common:24] - Employee group should not be updated: {Name}. </li> <li>The employee groups to update must exist </li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/employee_groups/{id}": {
      "get": {
        "tags": [
          "Employee Groups"
        ],
        "summary": "Returns an employee group.",
        "description": "This operation returns an employee group by ID.",
        "operationId": "Retrieve Employee Group by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of an employee group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Retrieved the Employee Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Employee Group Model"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/event_categories": {
      "get": {
        "tags": [
          "Domain Event Categories"
        ],
        "summary": "Returns all domain event categories.",
        "description": "This operation returns all domain event categories.",
        "operationId": "Retrieve All Domain Event Categories",
        "responses": {
          "200": {
            "description": "Successfully retrieved Domain Event Categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DomainEventCategory"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Domain Event Categories"
        ],
        "summary": "Creates a domain event category.",
        "description": "This operation creates a domain event category.",
        "operationId": "Create Domain Event Category",
        "requestBody": {
          "description": "Domain Event Category JSON",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainEventCategory"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful creation of a domain event category.",
            "content": {}
          },
          "400": {
            "description": "Domain Event Category not created.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          },
          "409": {
            "description": "A domain event category with that name already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_categories/multi_read": {
      "post": {
        "tags": [
          "Domain Event Categories"
        ],
        "summary": "Returns a list of domain event categories.",
        "description": "This operation returns a list of domain event categories.",
        "operationId": "Retrieve Domain Event Categories",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhereEntityReference"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful retrieval of domain event categories.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DomainEventCategory"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partial success in retrieving domain event categories.",
            "content": {}
          },
          "400": {
            "description": "Domain Event Category not found.",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Resource not found.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_categories/multi_upsert": {
      "post": {
        "tags": [
          "Domain Event Categories"
        ],
        "summary": "Creates or updates domain event categories.",
        "description": "This operation creates or updates domain event categories.",
        "operationId": "Create or Update Domain Event Categories",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DomainEventCategory"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "Successful updation/insertion of domain event categories.",
            "content": {}
          },
          "207": {
            "description": "Partially updated/inserted domain event categories.",
            "content": {}
          },
          "400": {
            "description": "Domain Event Category not found.",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "The requested ID does not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_categories/{id}": {
      "get": {
        "tags": [
          "Domain Event Categories"
        ],
        "summary": "Returns a domain event category.",
        "description": "This operation returns a domain event category by ID.",
        "operationId": "Retrieve Domain Event Category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An ID that uniquely identifies a domain event category.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a domain event category by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainEventCategory"
                }
              }
            }
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notification couldn't be loaded. Try again.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          },
          "404": {
            "description": "The requested ID does not exist.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Domain Event Categories"
        ],
        "summary": "Updates a domain event category.",
        "description": "This operation updates a domain event category by ID.",
        "operationId": "Update Domain Event Category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the domain event category.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Notification Message JSON",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainEventCategory"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully updated a domain event category.",
            "content": {}
          },
          "400": {
            "description": "Domain Event Category not updated.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          },
          "409": {
            "description": "A domain event category with that name already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Domain Event Categories"
        ],
        "summary": "Deletes a domain event category.",
        "description": "This operation deletes a domain event category by ID.",
        "operationId": "Delete Domain Event Category by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An ID that uniquely identifies a domain event category.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion of a domain event category.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          },
          "404": {
            "description": "The requested ID does not exist.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/event_navigations": {
      "get": {
        "tags": [
          "Domain Event Navigations"
        ],
        "summary": "Returns all domain event navigations.",
        "description": "This operation returns all domain event navigations.",
        "operationId": "Retrieve All Domain Event Navigations",
        "responses": {
          "200": {
            "description": "Successfully retrieved Domain Event Navigations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DomainEventNavigation"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Domain Event Navigations"
        ],
        "summary": "Creates a domain event navigation.",
        "description": "This operation creates a domain event navigation.",
        "operationId": "Create Domain Event Navigation",
        "requestBody": {
          "description": "Domain Event Navigation JSON",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainEventNavigation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful creation of a domain event navigation.",
            "content": {}
          },
          "400": {
            "description": "Domain Event Navigation not created.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          },
          "409": {
            "description": "A domain event navigation with that name already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_navigations/multi_read": {
      "post": {
        "tags": [
          "Domain Event Navigations"
        ],
        "summary": "Returns a list of domain event navigations.",
        "description": "This operation returns a list of domain event navigations.",
        "operationId": "Retrieve Domain Event Navigations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WhereEntityReference"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful retrieval of domain event navigations.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DomainEventNavigation"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partially updated/inserted domain event navigations.",
            "content": {}
          },
          "400": {
            "description": "Domain Event Navigation not found.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          },
          "404": {
            "description": "The requested ID does not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_navigations/multi_upsert": {
      "post": {
        "tags": [
          "Domain Event Navigations"
        ],
        "summary": "Updates or creates a list of domain event navigations.",
        "description": "This operation updates or creates a list of domain event navigations.",
        "operationId": "Update or Create Domain Event Navigations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DomainEventNavigation"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "Successful updation/insertion of domain event navigations.",
            "content": {}
          },
          "207": {
            "description": "Partially updated/inserted domain event navigations.",
            "content": {}
          },
          "400": {
            "description": "Domain Event Navigation not found.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          },
          "404": {
            "description": "The requested ID does not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_navigations/{id}": {
      "get": {
        "tags": [
          "Domain Event Navigations"
        ],
        "summary": "Returns a domain event navigation.",
        "description": "This operation returns a domain event navigation by ID.",
        "operationId": "Retrieve Domain Event Navigation by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An ID that uniquely identifies a domain event navigation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a domain event navigation by ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainEventNavigation"
                }
              }
            }
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notification couldn't be loaded. Try again.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          },
          "404": {
            "description": "The requested ID does not exist.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Domain Event Navigations"
        ],
        "summary": "Updates a domain event navigation.",
        "description": "This operation updates a domain event navigation by ID.",
        "operationId": "Update Domain Event Navigation by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the domain event navigation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Notification Message JSON",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainEventNavigation"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully updated a domain event navigation.",
            "content": {}
          },
          "400": {
            "description": "Domain Event Navigation not updated.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          },
          "409": {
            "description": "A domain event navigation with that name already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Domain Event Navigations"
        ],
        "summary": "Deletes a domain event navigation.",
        "description": "This operation deletes a domain event navigation by ID.",
        "operationId": "Delete Domain Event Navigation by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "An ID that uniquely identifies a domain event navigation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful deletion of a domain event navigation.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          },
          "404": {
            "description": "The requested ID does not exist.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/event_notifications": {
      "get": {
        "tags": [
          "Dynamic Event Notification Mappings"
        ],
        "summary": "Returns all dynamic event notification mappings.",
        "description": "This operation returns a list of all dynamic event notification mappings.",
        "operationId": "Retrieve All Dynamic Event Notification Mappings",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of dynamic event notification mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DoaminEventNotification Mapping"
                  }
                }
              }
            }
          },
          "403": {
            "description": "[WCO-104038] - The current user is not authorized to access dynamic event notification mappings.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Dynamic Event Notification Mappings"
        ],
        "summary": "Creates and returns a dynamic event notification mapping.",
        "description": "This operation creates and returns a dynamic event notification mapping.",
        "operationId": "Create a Dynamic Event Notification Mapping",
        "requestBody": {
          "description": "Event notificationmapping payload for create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoaminEventNotification Mapping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created a dynamic event notification mapping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoaminEventNotification Mapping"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-104045] - Icon-Class is not defined correctly in request.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104003] - The current user is not authorized to access dynamic event notification mappings.",
            "content": {}
          },
          "409": {
            "description": "[WCO-104008] - The specified dynamic event notification mapping is not defined correctly.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_notifications/multi_delete": {
      "post": {
        "tags": [
          "Dynamic Event Notification Mappings"
        ],
        "summary": "Deletes a list of dynamic event notification mappings.",
        "description": "<p>This operation deletes a list of dynamic event notification mappings.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of event notifications that can be processed in a single request.</p><ul><li>The <strong>Number of Event Notifications</strong> cannot exceed 25.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Delete Dynamic Event Notification Mappings",
        "requestBody": {
          "description": "The Delete Dynamic Event Notification Mappings request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notif DomainEvent Request"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectRef"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted Dynamic Event Notification Mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectRef"
                  }
                }
              }
            }
          },
          "400": {
            "description": "[WCO-133102]-Please provide only 1 of these parameters :- ids/qualifiers/refs.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104044]-The current User is not authorized to access dynamic event notification mappings.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104039]-A Dynamic Event Notification Mapping does not exist with specified ID.",
            "content": {}
          },
          "413": {
            "description": "[WCO-104089]-Service limit exceeded.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_notifications/multi_read": {
      "post": {
        "tags": [
          "Dynamic Event Notification Mappings"
        ],
        "summary": "Returns a list of dynamic event notification mappings.",
        "description": "This operation returns a list of dynamic event notification mappings by object references.",
        "operationId": "Retrieve Dynamic Event Notification Mappings",
        "requestBody": {
          "description": "The Retrieve Dynamic Event Notification Mappings request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Notif DomainEvent Request"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of dynamic event notification mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DoaminEventNotification Mapping"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-104036] - Partially retrieved a list of the dynamic event notification mappings. Some of the specified object references do not exist.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104038] - The current user is not authorized to access dynamic event notification mappings.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104035] - The specified dynamic event notification mapping object references do not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_notifications/multi_upsert": {
      "post": {
        "tags": [
          "Dynamic Event Notification Mappings"
        ],
        "summary": "Creates or updates and returns a list of dynamic event notification mappings.",
        "description": "<p>This operation creates or updates and returns a list of dynamic event notification mappings.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of event notifications that can be processed in a single request.</p><ul><li>The <strong>Number of Event Notifications</strong> cannot exceed 100.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Create or Update Dynamic Event Notification Mappings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DoaminEventNotification Mapping"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successful multi_upsert of dynamic event notification mappings.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DoaminEventNotification Mapping"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-104048]-Some of the Domain Event Notification Mappings could not  be created or updated.",
            "content": {}
          },
          "400": {
            "description": "[WCO-104045] - Icon-Class is not defined correctly in request.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104003]  -The current user is not authorized to access dynamic event notification mappings.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104046] -The specified dynamic event notification mapping object references do not exist.",
            "content": {}
          },
          "413": {
            "description": "[WCO-104047] - The specified dynamic event notification mappings list is too long.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_notifications/notify": {
      "post": {
        "tags": [
          "Dynamic Event Notifications"
        ],
        "summary": "Sends one or more notifications for an event.",
        "description": "This operation sends one or more notifications for an event to a specified recipient.",
        "operationId": "Send Dynamic Event Notifications",
        "requestBody": {
          "description": "External Notification Message JSON",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/External Notification Message"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully sent one or more event notifications.",
            "content": {}
          },
          "400": {
            "description": "An error occurred.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_notifications/{id}": {
      "get": {
        "tags": [
          "Dynamic Event Notification Mappings"
        ],
        "summary": "Returns a dynamic event notification mapping.",
        "description": "This operation returns a dynamic event notification mapping by ID.",
        "operationId": "Retrieve Dynamic Event Notification Mapping by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the dynamic event notification mapping to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a dynamic event notification mapping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoaminEventNotification Mapping"
                }
              }
            }
          },
          "403": {
            "description": "[WCO-104038] -The current user is not authorized to access dynamic event notification mappings.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104034]- A dynamic event notification mapping does not exist with the specified ID.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Dynamic Event Notification Mappings"
        ],
        "summary": "Updates and returns a dynamic event notification mapping.",
        "description": "This operation updates and returns a dynamic event notification mapping by ID.",
        "operationId": "Update a Dynamic Event Notification Mapping by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event notificationmapping Id for update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Event notificationmapping values for update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DoaminEventNotification Mapping"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated a dynamic event notification mapping.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DoaminEventNotification Mapping"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-104045] - Icon-Class is not defined correctly in request.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104003] - The current user is not authorized to access dynamic event notification mappings.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104052] - The specified dynamic event notification mapping object references does not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Dynamic Event Notification Mappings"
        ],
        "summary": "Deletes a dynamic event notification mapping.",
        "description": "This operation deletes a dynamic event notification mapping by ID.",
        "operationId": "Delete Dynamic Event Notification Mapping by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the dynamic event notification mapping to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted a Dynamic Event Notification Mapping.",
            "content": {}
          },
          "400": {
            "description": "[WCO-104034]-A dynamic event notification mapping does not exist with the specified ID.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104044]-You are not authorized to access control center notification mapping configuration.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104039]-Exception occurred while deleting the record with specified ID.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/event_types": {
      "get": {
        "tags": [
          "Domain Events"
        ],
        "summary": "Returns all Domain Events.",
        "description": "This operation returns a list of all Domain Events.",
        "operationId": "Retrieve All Domain Events",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Domain events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Domain Event"
                  }
                }
              }
            }
          },
          "403": {
            "description": "[WCO-104027]-The current User is not authorized to access Domain event.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Domain Events"
        ],
        "summary": "Creates a Domain Event.",
        "description": "This operation creates a Domain Event.",
        "operationId": "Create Domain Event",
        "requestBody": {
          "description": "Domain event payload for create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Domain Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created a Domain Event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain Event"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-104079]- A event name is required to create domain event.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104027]-The current User is not authorized to access Domain Events.",
            "content": {}
          },
          "409": {
            "description": "[WCO-104080] -A Domain Event already exists with the name.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_types/multi_delete": {
      "post": {
        "tags": [
          "Domain Events"
        ],
        "summary": "Deletes one or more Domain Events.",
        "description": "<p>This operation deletes one or more Domain Events by object references.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of event types that can be processed in a single request.</p><ul><li>The <strong>Number of Event Types</strong> cannot exceed 25.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Delete Domain Events",
        "requestBody": {
          "description": "The Delete Domain Events request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Domain Event Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectRef"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted Domain Events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectRef"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-104031]-Partial deletion of the Domain Events. Some of the specified object references do not exist.",
            "content": {}
          },
          "400": {
            "description": "[WCO-104029]-Domain Event does not exists for ID: {id}.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104027]-The current User is not authorized to access Domain Events.",
            "content": {}
          },
          "413": {
            "description": "[WCO-104047]-Service limit exceeded.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_types/multi_read": {
      "post": {
        "tags": [
          "Domain Events"
        ],
        "summary": "Returns a list of Domain Events.",
        "description": "This operation returns a list of Domain Events by object references.",
        "operationId": "Retrieve Domain Events",
        "requestBody": {
          "description": "The Retrieve Domain Events request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Domain Event Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Domain Events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Domain Event"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-104026] - Partially retrieved a list of the Domain Events. Some of the specified object references do not exist.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104027]-The current User is not authorized to access Domain event.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104025] - The specified Domain Event object references do not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_types/multi_upsert": {
      "post": {
        "tags": [
          "Domain Events"
        ],
        "summary": "Creates or updates one or more Domain Events.",
        "description": "<p>This operation creates or updates one or more Domain Events.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of event types that can be processed in a single request.</p><ul><li>The <strong>Number of Event Types</strong> cannot exceed 25.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Create or Update Domain Events",
        "requestBody": {
          "description": "The Create or Update Domain Events request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Domain Event"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful multi_upsert of Domain Events.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Domain Event"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-104095] - Partially create or update Domain Events. Some of the specified Domain Events do not create or update.",
            "content": {}
          },
          "400": {
            "description": "[WCO-104096]-create or update failed for Domain Event: {name}.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104027]-The current User is not authorized to access Domain event.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104094]-Some of the specified Domain Events do not create or update.",
            "content": {}
          },
          "413": {
            "description": "[WCO-104047]-Service limit exceeded.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/event_types/{id}": {
      "get": {
        "tags": [
          "Domain Events"
        ],
        "summary": "Returns a Domain Event.",
        "description": "This operation returns a Domain Event by ID.",
        "operationId": "Retrieve Domain Event by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a Domain Event.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a Domain event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain Event"
                }
              }
            }
          },
          "403": {
            "description": "[WCO-104027]-The current User is not authorized to access Domain event.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104023]-A Domain event does not exist with specified ID.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Domain Events"
        ],
        "summary": "Updates a Domain Event.",
        "description": "This operation updates a Domain Event by ID.",
        "operationId": "Update Domain Event by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a Domain Event.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Domain Event"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully updated a Domain Event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain Event"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-104079]- A event name is required to create domain event.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104027]-The current User is not authorized to access Domain Events.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104023]-A Domain event does not exist with specified ID.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Domain Events"
        ],
        "summary": "Deletes a Domain Event.",
        "description": "This operation deletes a Domain Event by ID.",
        "operationId": "Delete Domain Event by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a Domain Event.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted a Domain Event.",
            "content": {}
          },
          "400": {
            "description": "[WCO-104029]-Domain Event does not exists for ID: {id}.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104027]-The current User is not authorized to access Domain Event.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104028]-Exception occurred while deleting the record with specified ID.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/exports": {
      "get": {
        "tags": [
          "Bulk Downloads"
        ],
        "summary": "Returns a summary of all download requests submitted by the current user.",
        "description": "<p>This operation returns a summary of all download requests submitted by the current user. The summary includes the name of the Dataview and the submission date, completion date, and status of the request such as PENDING, FAILED, SUCCESSFUL or PARTIAL.</p><br /><p>The associated Access Control Point is DOWNLOADS.</p>",
        "operationId": "Retrieve Download Request Summary",
        "responses": {
          "200": {
            "description": "The summary of all download requests was retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobSummaryResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/exports/async": {
      "post": {
        "tags": [
          "Bulk Downloads"
        ],
        "summary": "Processes and returns bulk data requests asynchronously.",
        "description": "<p>This operation processes and returns bulk data requests asynchronously. The output is returned as a CSV file that can be retrieved using the Retrieve Bulk Download Results (GET /v1/commons/exports/{id}/file) API operation.</p><p><em><strong>Note:</strong> Although the <code>payload</code> property accepts a model similar to the Retrieve Data request, certain elements of the Retrieve Data request payload are ignored by this operation. Refer to the Docs > Examples > Submit Bulk Downloads topic for complete request and response schemas.</em></p><br /><p>The associated Access Control Point is DOWNLOADS.</p><br /><h2>Example request</h2><br /><p>The following example request payload demonstrates how the Retrieve Data request model is used by this API operation inside the <code>payLoad</code> property.</p><br /><pre><code>{<br />  \"name\": \"OOAP Schedule Metrics - Leadership v1\",<br />  \"type\": \"DATA\",<br />  \"payload\": {<br />    \"from\": {<br />      \"view\": 1,<br />      \"locationSet\": {<br />        \"hyperfind\": {<br />          \"id\": \"-5001\"<br />        },<br />        \"dateRange\": {<br />          \"startDate\": \"2021-01-01\",<br />          \"endDate\": \"2021-01-15\"<br />        },<br />        \"rollupBy\": [<br />          {<br />            \"key\": \"6\",<br />            \"value\": \"Department\"<br />          }<br />        ]<br />      },<br />      \"viewPresentation\": \"Business Structure\"<br />    },<br />    \"count\": null,<br />    \"index\": null,<br />    \"select\": [<br />      {<br />        \"key\": \"LOCATION_NAME\",<br />        \"alias\": \"alias_241606923555628\",<br />        \"properties\": [<br />          {<br />            \"key\": \"-3\",<br />            \"value\": \"/\"<br />          }<br />        ]<br />      },<br />      {<br />        \"key\": \"LOCATION_NAME\",<br />        \"alias\": \"alias_261606923555667\",<br />        \"properties\": [<br />          {<br />            \"key\": \"4\",<br />            \"value\": \"Company\"<br />          }<br />        ]<br />      },<br />      {<br />        \"key\": \"LOCATION_NAME\",<br />        \"alias\": \"alias_281606923555697\",<br />        \"properties\": [<br />          {<br />            \"key\": \"54\",<br />            \"value\": \"Country\"<br />          }<br />        ]<br />      },<br />      {<br />        \"key\": \"LOCATION_NAME\",<br />        \"alias\": \"alias_301606923555727\",<br />        \"properties\": [<br />          {<br />            \"key\": \"7\",<br />            \"value\": \"Business\"<br />          }<br />        ]<br />      },<br />      {<br />        \"key\": \"LOCATION_NAME\",<br />        \"alias\": \"alias_300606923555727\",<br />        \"properties\": [<br />          {<br />            \"key\": \"8\",<br />            \"value\": \"Field\"<br />          }<br />        ]<br />      },<br />      {<br />        \"key\": \"LOCATION_NAME\",<br />        \"alias\": \"alias_421606923555903\",<br />        \"properties\": [<br />          {<br />            \"key\": \"6\",<br />            \"value\": \"Department\"<br />          }<br />        ]<br />      },<br />      {<br />        \"key\": \"LOCATION_PATH\",<br />        \"alias\": \"alias_681606923690648\",<br />        \"properties\": [<br />          {<br />            \"key\": \"7\",<br />            \"value\": \"Department\"<br />          }<br />        ]<br />      },<br />      {<br />        \"key\": \"KPI_METRIC_ACTUAL_HRS\",<br />        \"alias\": \"alias_261595447145974\"<br />      },<br />      {<br />        \"key\": \"KPI_FRESHNESS_LASTUPDATEDTS\",<br />        \"alias\": \"KPI_FRESHNESS_LASTUPDATEDTS_1\"<br />      },<br />      {<br />        \"key\": \"KPI_FRESHNESS_DATAFRESHNESS_INDICATOR\",<br />        \"alias\": \"KPI_FRESHNESS_DATAFRESHNESS_INDICATOR_1\"<br />      }<br />    ],<br />    \"options\": {<br />      \"currencyType\": \"PREFERRED_CURRENCY\",<br />      \"includeColumnTotals\": true<br />    }<br />  }<br />}</code></pre>",
        "operationId": "Submit Bulk Download",
        "requestBody": {
          "description": "The Submit Bulk Download request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadJobStatus"
                }
              }
            }
          },
          "202": {
            "description": "The bulk download request has been accepted for processing with a tracking request ID as a response in the location header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadJobStatus"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/exports/multi_delete": {
      "post": {
        "tags": [
          "Bulk Downloads"
        ],
        "summary": "Deletes download jobs based on valid job request IDs.",
        "description": "<p>This operation deletes the specified download requests by ID. Downloads in the following states can be deleted: in progress, complete, and pending.</p><br /><p>The associated Access Control Point is DOWNLOADS.</p>",
        "operationId": "Delete Bulk Downloads",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteJobRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "204": {
            "description": "The delete job operation is successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "207": {
            "description": "The delete job operation is partially successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/exports/{id}/file": {
      "get": {
        "tags": [
          "Bulk Downloads"
        ],
        "summary": "<p>Returns a CSV file containing the download results.</p><br /><p>The associated Access Control Point is DOWNLOADS.</p>",
        "description": "This operation returns a CSV file containing combined data sets based on a tracking request ID. This file contains metadata such as the total number of rows, username, time-period, and locations along with the data sets.",
        "operationId": "Retrieve Bulk Download Results",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The request ID returned as response in location header of bulk download request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The CSV file containing data sets was returned successfully.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/exports/{id}/status": {
      "get": {
        "tags": [
          "Bulk Downloads"
        ],
        "summary": "Returns the status of a bulk download request.",
        "description": "<p>This operation returns the status of a bulk download request.</p><br /><p>The associated Access Control Point is DOWNLOADS.</p>",
        "operationId": "Retrieve Download Status",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The request ID returned as response in location header of bulk download request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DownloadJobStatus"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/feature_switch/multi_read": {
      "post": {
        "tags": [
          "Feature Switches"
        ],
        "summary": "Returns one or more feature switches.",
        "description": "<p>This operation returns one or more feature switches by object references.</p><br /><p>The associated Access Control Point is as follows:</p><ul><li><strong>ACP Key:</strong> FEATURE_SWITCH</li><li><strong>API Access Controlled By:</strong> View - Allowed or Edit - Allowed</li><li><strong>Default Values:</strong> View - Disallowed, Edit - Disallowed</li></ul>",
        "operationId": "Retrieve Feature Switches",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Combination Feature Toggle Request"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved all the feature switches in the system.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WFCFeatureSwitch"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WFCFeatureSwitch"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/feature_switch/{name}": {
      "get": {
        "tags": [
          "Feature Switches"
        ],
        "summary": "Returns a feature switch.",
        "description": "<p>This operation returns a feature switch by name.</p><br /><p>The associated Access Control Point is as follows:</p><ul><li><strong>ACP Key:</strong> FEATURE_SWITCH</li><li><strong>API Access Controlled By:</strong> View - Allowed or Edit - Allowed</li><li><strong>Default Values:</strong> View - Disallowed, Edit - Disallowed</li></ul>",
        "operationId": "Retrieve Feature Switch by Name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The unique name of a feature switch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a feature switch by name.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WFCFeatureSwitch"
                }
              }
            }
          },
          "404": {
            "description": "The requested resource cannot be found.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/fiscal_calendars/import": {
      "post": {
        "tags": [
          "Fiscal Calendars"
        ],
        "summary": "Creates one or more fiscal periods.",
        "description": "This operation creates one or more fiscal periods.",
        "operationId": "Create Fiscal Periods",
        "requestBody": {
          "description": "The Create Fiscal Periods request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FiscalYearDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful insertion of given Fiscal records, All records are inserted.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FiscalYearDTO"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partial success in insertion of Fiscal records.",
            "content": {}
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/fiscal_calendars/multi_delete": {
      "post": {
        "tags": [
          "Fiscal Calendars"
        ],
        "summary": "Deletes one or more fiscal periods.",
        "description": "This operation deletes one or more fiscal periods.",
        "operationId": "Delete Fiscal Periods",
        "requestBody": {
          "description": "The Delete Fiscal Periods request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FiscalYears"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success, All requested Fiscal periods are deleted.",
            "content": {}
          },
          "207": {
            "description": "Partial success in deletion of Fiscal records",
            "content": {}
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          },
          "500": {
            "description": "Internal error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/function_access_profiles": {
      "get": {
        "tags": [
          "Function Access Profiles"
        ],
        "summary": "Returns all Function Access Profiles or one by name.",
        "description": "This operation returns a list of all Function Access Profiles or a single profile by name.",
        "operationId": "Retrieve All Function Access Profiles or by Name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of a Function Access Profile.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Function Access Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Function Access Profile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "[WCO-127805]-The current User is not authorized to access Function access profiles.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Function Access Profiles"
        ],
        "summary": "Creates a Function Access Profile.",
        "description": "This operation creates a Function Access Profile.",
        "operationId": "Create Function Access Profile",
        "requestBody": {
          "description": "FunctionAccessProfile  payload for create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Function Access Profile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created a Function Access Profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Function Access Profile"
                }
              }
            }
          },
          "400": {
            "description": "[WCO-127812]- A function access profile name is required to create function access profile.",
            "content": {}
          },
          "403": {
            "description": "[WCO-127805]-The current user is not authorized to create Function access profiles.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/function_access_profiles/{fapId}": {
      "delete": {
        "tags": [
          "Function Access Profiles"
        ],
        "summary": "Deletes a Function Access Profile.",
        "description": "This operation deletes a Function Access Profile by ID.",
        "operationId": "Delete Function Access Profile by ID",
        "parameters": [
          {
            "name": "fapId",
            "in": "path",
            "description": "The ID of a Function Access Profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted a Function Access Profile.",
            "content": {}
          },
          "400": {
            "description": "[WCO-127804]-No operation allowed on gold data.",
            "content": {}
          },
          "403": {
            "description": "[WCO-127805]-The current user is not authorized to access Function access profile.",
            "content": {}
          },
          "404": {
            "description": "[WCO-127801]-Function access profile can not be deleted as id does not exist.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/function_access_profiles/{id}": {
      "get": {
        "tags": [
          "Function Access Profiles"
        ],
        "summary": "Returns a Function Access Profile.",
        "description": "This operation returns a Function Access Profile by ID.",
        "operationId": "Retrieve Function Access Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a Function Access Profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a Function access profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Function Access Profile"
                }
              }
            }
          },
          "403": {
            "description": "[WCO-127805]-The current user is not authorized to access Function access profile.",
            "content": {}
          },
          "404": {
            "description": "[WCO-127824]-A Function access profile does not exist with specified ID.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Function Access Profiles"
        ],
        "summary": "Updates a Function Access Profile.",
        "description": "This operation updates a Function Access Profile by ID.",
        "operationId": "Update Function Access Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Function AccessProfile Id for update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Function AccessProfile values for update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Function Access Profile"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated a Function Access Profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Function Access Profile"
                }
              }
            }
          },
          "400": {
            "description": "[WFP-113112]- A function access profile name is required to create function access profile.",
            "content": {}
          },
          "403": {
            "description": "[WFP-113105]-The current User is not authorized to access function access profile.",
            "content": {}
          },
          "404": {
            "description": "[WFP-127821]-function Access Profile id does not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/generic_data_access_profiles/apply_upsert": {
      "post": {
        "tags": [
          "Generic Data Access Profiles"
        ],
        "summary": "Creates or updates and returns a list of Generic Data Access Profiles.",
        "description": "<p>This operation creates or updates and returns a list of Generic Data Access Profiles.</p><br /><p>The associated Access Control Point is GENERIC_DATA_ACCESS_PROFILE.</p><br /><h2>Service limit</h2><p>A service limit constrains the total number of generic data access profiles and the number of generic data access profiles times the number of setup items that can be processed in a single request.</p><ul><li>The <strong>Number of Generic Data Access Profiles</strong> cannot exceed 5.</li><li>The <strong>Number of Generic Data Access Profiles</strong> multiplied by the <strong>Number of Setup Items</strong> cannot exceed 200.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Create or Update Generic Data Access Profiles",
        "requestBody": {
          "description": "The Create or Update Generic Data Access Profiles request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GenericDataAccessprofilesDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully  created or updated a list of Generic Data Access Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenericDataAccessprofilesResponseDTO"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partially created or updated a list of the Generic Data Access Profiles. Some of the specified object references could't be created or updated.",
            "content": {}
          },
          "400": {
            "description": "Invalid request.",
            "content": {}
          },
          "403": {
            "description": "The current user is not authorized to create or update Generic Data Access Profiles.",
            "content": {}
          },
          "404": {
            "description": "A Generic Data Access Profiles does not exist with specified ID.",
            "content": {}
          },
          "413": {
            "description": "Service limit exceeded.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/generic_data_access_profiles/multi_read": {
      "post": {
        "tags": [
          "Generic Data Access Profiles"
        ],
        "summary": "Returns a list of generic data access profiles.",
        "description": "<p>This operation returns a list of generic data access profiles by object references.</p><br /><p>The associated Access Control Point is GENERIC_DATA_ACCESS_PROFILE.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of generic data access profiles that can be processed in a single request.</p><ul><li>The <strong>Number of Generic Data Access Profiles</strong> cannot exceed 40.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Retrieve Generic Data Access Profiles",
        "requestBody": {
          "description": "The Retrieve Generic Data Access Profiles request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Generic Data Access Profiles"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Generic Data Access Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GenericDataAccessprofilesResponseDTO"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partially retrieved a list of the Generic Data Access Profiles. Some of the specified object references do not exist.",
            "content": {}
          },
          "400": {
            "description": "Invalid request.",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/generic_data_access_profiles/setup/gdap_items": {
      "get": {
        "tags": [
          "Generic Data Access Profiles"
        ],
        "summary": "Returns setup category available items.",
        "description": "v1.0.generic_data_access_profiles.get.gdap_items.notes",
        "operationId": "v1.0.generic_data_access_profiles.get.gdap_items.nickname",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "The names of one or more setup categories. For example, <code>category=Access Profiles,Accrual Profiles</code>.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gdap_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "gdap_name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved setup category available items.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GdapAvailableItemsResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "A setup category available item does not exist with the specified context.",
            "content": {}
          },
          "403": {
            "description": "The current user is not authorized to access setup category available items.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/generic_notifications": {
      "get": {
        "tags": [
          "Generic Notifications"
        ],
        "summary": "Returns all Generic Notifications.",
        "description": "This operation returns a list of all Generic Notifications.",
        "operationId": "Retrieve All Generic Notifications",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Generic Notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Generic Notification"
                  }
                }
              }
            }
          },
          "403": {
            "description": "[WCO-104060]-The current User is not authorized to access Generic Notification.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Generic Notifications"
        ],
        "summary": "Creates a Generic Notification.",
        "description": "This operation creates a new Generic Notification.",
        "operationId": "Create Generic Notification",
        "requestBody": {
          "description": "The Create a Generic Notification request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Generic Notification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created a Generic Notification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Generic Notification"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {}
          },
          "403": {
            "description": "The current user is not authorized to create Generic Notification.",
            "content": {}
          },
          "409": {
            "description": "A Generic Notification with the same name already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/generic_notifications/multi_delete": {
      "post": {
        "tags": [
          "Generic Notifications"
        ],
        "summary": "Deletes Generic Notifications.",
        "description": "<p>This operation deletes a list of Generic Notifications by object references.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of notifications that can be processed in a single request.</p><ul><li>The <strong>Number of Generic Notifications</strong> cannot exceed 10.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Delete Generic Notifications",
        "requestBody": {
          "description": "The Delete Generic Notifications request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericNotificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectRef"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Successfully deletes Generic Notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectRef"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-104059]- Partially deletes Generic Notifications. Some of the specified object references do not exist.",
            "content": {}
          },
          "400": {
            "description": "Invalid request.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104060]- The current user is not authorized to delete Generic Notifications.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104058]- A Generic Notification does not exist with specified ID.",
            "content": {}
          },
          "413": {
            "description": "[WCO-104069]- Service limit exceeded.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/generic_notifications/multi_read": {
      "post": {
        "tags": [
          "Generic Notifications"
        ],
        "summary": "Returns a list of Generic Notifications.",
        "description": "This operation returns a list of Generic Notifications by object references.",
        "operationId": "Retrieve Generic Notifications",
        "requestBody": {
          "description": "The Retrieve Generic Notification request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenericNotificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of Generic Notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Generic Notification"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-104059] - Partially retrieved a list of the Generic Notifications. Some of the specified object references do not exist.",
            "content": {}
          },
          "400": {
            "description": "Invalid request.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104060]-The current user is not authorized to view Generic Notifications.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104058]- The specified Generic Notifications object references do not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/generic_notifications/multi_upsert": {
      "post": {
        "tags": [
          "Generic Notifications"
        ],
        "summary": "Creates or updates and returns a list of Generic Notifications.",
        "description": "<p>This operation creates or updates and returns a list of Generic Notifications.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of notifications that can be processed in a single request.</p><ul><li>The <strong>Number of Generic Notifications</strong> cannot exceed 10.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Create or Update Generic Notifications",
        "requestBody": {
          "description": "The Create or Update Generic Notifications request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Generic Notification"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully  created or updated a list of Generic Notifications.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Generic Notification"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-104059]- Partially created or updated a list of the Generic Notifications. Some of the specified object references could't be created or updated.",
            "content": {}
          },
          "400": {
            "description": "Invalid request.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104060]- The current user is not authorized to create or update Generic Notifications.",
            "content": {}
          },
          "413": {
            "description": "[WCO-104069]- Service limit exceeded.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/generic_notifications/{id}": {
      "get": {
        "tags": [
          "Generic Notifications"
        ],
        "summary": "Returns a Generic Notification.",
        "description": "This operation returns a Generic Notification by ID.",
        "operationId": "Retrieve Generic Notification by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Generic Notification to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a Generic Notification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Generic Notification"
                }
              }
            }
          },
          "403": {
            "description": "[WCO-104060]-The current User is not authorized to access Generic Notification.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104058]-A Generic Notification does not exist with specified ID.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Generic Notifications"
        ],
        "summary": "Updates a Generic Notification.",
        "description": "This operation updates a Generic Notification.",
        "operationId": "Update Generic Notification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Generic Notification to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update Generic Notification request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Generic Notification"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updates a Generic Notification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Generic Notification"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {}
          },
          "403": {
            "description": "The current user is not authorized to update a Generic Notification.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104058]-A Generic Notification does not exist with specified ID.",
            "content": {}
          },
          "409": {
            "description": "A Generic Notification with the same name already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Generic Notifications"
        ],
        "summary": "Deletes a Generic Notification.",
        "description": "This operation deletes a Generic Notification.",
        "operationId": "Delete Generic Notification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a generic notification.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Generic Notification"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deletes a Generic Notification.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Generic Notification"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {}
          },
          "403": {
            "description": "[WCO-104060]- The current user is not authorized to delete a Generic Notification.",
            "content": {}
          },
          "404": {
            "description": "[WCO-104058]- A Generic Notification does not exist with specified ID.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/hours_operation": {
      "get": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Returns all Hours of Operation with a single effective version or a particular Hours of Operation with a single effective version by name. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use GET /v2/commons/hours_operation.</strong></p><p>This operation returns all Hours of Operation if no parameter is specified or a particular Hours of Operation if a name is provided.</p><br /><p><strong>Note:</strong> This operation only returns Hours of Operation with a single effective version.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Retrieve All Hours of Operation or by Name (Deprecated)",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of an Hours of Operation object.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li><li>[WCO-127717] - You cannot use v1 operations on Hours of Operation with more than one effective version. Use a v2 or greater operation to complete this action.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action VIEW.</li></ul>",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Creates and returns an Hours of Operation object with a single effective version. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use POST /v2/commons/hours_operation.</strong></p><p>This operation creates and returns an Hours of Operation object with a single effective version.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Create Hours of Operation (Deprecated)",
        "requestBody": {
          "description": "An object representing the Hours of Operation to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoursOfOperation"
                }
              }
            }
          },
          "400": {
            "description": "<ul> <li>[WCO-127701] - The following collection cannot be empty: {listName}.</li> <li>[WCO-127702] - You must specify the following parameter: {paramName}.</li> <li>[WCO-127703] - The following parameter must be null: {paramName}.</li> <li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li> <li>[WCO-127706] - The following object reference is invalid: {refName}.</li> <li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li> <li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> <li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li> <li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li> <li>[WCO-127712] - Request body is missing. Specify request parameters.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation/multi_create": {
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Creates and returns Hours of Operation objects, each of which has a single effective version. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use POST /v2/commons/hours_operation/multi_create.</strong></p><p>This operation creates and returns Hours of Operation objects, each of which has a single effective version.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Create Multiple Hours of Operation (Deprecated)",
        "requestBody": {
          "description": "An object representing a collection of Hours of Operations to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HoursOfOperation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperation"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul> <li>[WCO-127701] - The following collection cannot be empty: {listName}.</li> <li>[WCO-127702] - You must specify the following parameter: {paramName}.</li> <li>[WCO-127703] - The following parameter must be null: {paramName}.</li> <li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li> <li>[WCO-127706] - The following object reference is invalid: {refName}.</li> <li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li> <li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> <li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li> <li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li> <li>[WCO-127712] - Request body is missing. Specify request parameters.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation/multi_delete": {
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Deletes a list of Hours of Operation objects, each of which has a single effective version. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use POST /v2/commons/hours_operation/multi_delete.</strong></p><p>This operation deletes a list of Hours of Operation objects, each of which has a single effective version.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Delete Multiple Hours of Operation (Deprecated)",
        "requestBody": {
          "description": "An object representing a collection of references to Hours of Operations.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperationRefs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully completed.",
            "content": {}
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127706] - The following object reference is invalid: {refName}.</li><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li><li>[WCO-127717] - You cannot use v1 operations on Hours of Operation with more than one effective version. Use a v2 or greater operation to complete this action.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation/multi_read": {
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Returns Hours of Operation with a single effective version by object references. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use POST /v2/commons/hours_operation/multi_read.</strong></p><p>This operation returns Hours of Operation with a single effective version according to the specified object references.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Retrieve Multiple Hours of Operation (Deprecated)",
        "requestBody": {
          "description": "An object representing a collection of references to Hours of Operations.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperationRefs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127706] - The following object reference is invalid: {refName}.</li><li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li><li>[WCO-127717] - You cannot use v1 operations on Hours of Operation with more than one effective version. Use a v2 or greater operation to complete this action.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action VIEW.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation/multi_update": {
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Updates and returns a list of Hours of Operation objects, each of which has a single effective version. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use POST /v2/commons/hours_operation/multi_update.</strong></p><p>This operation updates and returns a list of Hours of Operation objects, each of which has a single effective version.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Update Multiple Hours of Operation (Deprecated)",
        "requestBody": {
          "description": "An object representing a collection of Hours of Operations to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HoursOfOperation"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperation"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul> <li>[WCO-127701] - The following collection cannot be empty: {listName}.</li> <li>[WCO-127702] - You must specify the following parameter: {paramName}.</li> <li>[WCO-127703] - The following parameter must be null: {paramName}.</li> <li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li> <li>[WCO-127706] - The following object reference is invalid: {refName}.</li> <li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li> <li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> <li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li> <li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li> <li>[WCO-127712] - Request body is missing. Specify request parameters.</li> <li>[WCO-127717] - You cannot use v1 operations on Hours of Operation with more than one effective version. Use a v2 or greater operation to complete this action.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation/{id}": {
      "get": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Returns an Hours of Operation object with a single effective version. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use GET /v2/commons/hours_operation/{id}.</strong></p><p>This operation returns an Hours of Operation object with a single effective version by ID.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Retrieve Hours of Operation by ID (Deprecated)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an Hours of Operation object.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoursOfOperation"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127717] - You cannot use v1 operations on Hours of Operation with more than one effective version. Use a v2 or greater operation to complete this action.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action VIEW.</li></ul>",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Updates and returns an Hours of Operation object. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use PUT /v2/commons/hours_operation/{id}.</strong></p><p>This operation updates and returns an Hours of Operation object with a single effective version by ID.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Update Hours of Operation by ID (Deprecated)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an Hours of Operation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "An object representing the Hours of Operation to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoursOfOperation"
                }
              }
            }
          },
          "400": {
            "description": "<ul> <li>[WCO-127701] - The following collection cannot be empty: {listName}.</li> <li>[WCO-127702] - You must specify the following parameter: {paramName}.</li> <li>[WCO-127703] - The following parameter must be null: {paramName}.</li> <li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li> <li>[WCO-127705] - ID from path does not match ID from request payload.</li> <li>[WCO-127706] - The following object reference is invalid: {refName}.</li> <li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li> <li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> <li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li> <li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li> <li>[WCO-127712] - Request body is missing. Specify request parameters.</li> <li>[WCO-127717] - You cannot use v1 operations on Hours of Operation with more than one effective version. Use a v2 or greater operation to complete this action.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          },
          "409": {
            "description": "This Hours of Operations has already been updated/deleted by some other user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Deletes an Hours of Operation object with a single effective version. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use DELETE /v2/commons/hours_operation/{id}.</strong></p><p>This operation deletes an Hours of Operation object with a single effective version by ID.</p><br /><br /><p><em><strong>Important Note:</strong> We recommend you update your implementations to utilize version 2 operations as they provide better security, performance, and functionality.</em></p>",
        "operationId": "Delete Hours of Operation by ID (Deprecated)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an Hours of Operation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.",
            "content": {}
          },
          "400": {
            "description": "<ul><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127717] - You cannot use v1 operations on Hours of Operation with more than one effective version. Use a v2 or greater operation to complete this action.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/hours_operation_assignments": {
      "get": {
        "tags": [
          "Hours of Operation Assignments"
        ],
        "summary": "Returns hours of operation assignments for a single location.",
        "description": "This operation returns hours of operation assignments for a single location.",
        "operationId": "Retrieve Hours of Operation Assignments for One Location",
        "parameters": [
          {
            "name": "location_id",
            "in": "query",
            "description": "The ID of a location.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location_qualifier",
            "in": "query",
            "description": "The qualifier of a location, which is its full path in the business structure.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effective_date",
            "in": "query",
            "description": "The effective date of an assignment in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "adjust_boundary_assignment_dates",
            "in": "query",
            "description": "A Boolean indicator of whether or not boundary assignment dates should be adjusted to match the effective date span of the location when the difference between the assignment start or end dates and the effective start or end dates of the location are a week or less apart, respectively.",
            "required": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationAssignment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Assign Hours of Operation with action VIEW.</li></ul>",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/hours_operation_assignments/multi_delete": {
      "post": {
        "tags": [
          "Hours of Operation Assignments"
        ],
        "summary": "Deletes hours of operation assignments.",
        "description": "This operation deletes hours of operation assignments for multiple locations.",
        "operationId": "Delete Hours of Operation Assignments",
        "requestBody": {
          "description": "The Delete Hours of Operation Assignments request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HoursOfOperationAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "All items are proceed successfully.",
            "content": {}
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127701] - The following collection cannot be empty: {listName}.</li><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li><li>[WCO-127706] - The following object reference is invalid: {refName}.</li><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li><li>[WCO-127715] - You cannot unassign an hours of operation which is not assigned to a location.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Assign Hours of Operation with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation_assignments/multi_read": {
      "post": {
        "tags": [
          "Hours of Operation Assignments"
        ],
        "summary": "Returns hours of operation assignments for multiple locations",
        "description": "This operation returns hours of operation assignments for multiple locations.",
        "operationId": "Retrieve Hours of Operation Assignments for Multiple Locations",
        "requestBody": {
          "description": "The Retrieve Hours Of Operation Assignments request payload, which contains a list of locations and an effective date span.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperationAssignmentMultiReadContext"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationAssignment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Assign Hours of Operation with action VIEW.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation_assignments/multi_upsert": {
      "post": {
        "tags": [
          "Hours of Operation Assignments"
        ],
        "summary": "Creates or updates hours of operation assignments.",
        "description": "This operation creates or updates hours of operation assignments for multiple locations.",
        "operationId": "Create or Update Hours of Operation Assignments",
        "requestBody": {
          "description": "The Create or Update Hours of Operation Assignments request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HoursOfOperationAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "All items were processed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationAssignment"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127701] - The following collection cannot be empty: {listName}.</li><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li><li>[WCO-127706] - The following object reference is invalid: {refName}.</li><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Assign Hours of Operation with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation_override": {
      "get": {
        "tags": [
          "Hours of Operation Overrides"
        ],
        "summary": "Returns all Hours of Operation Overrides or a particular Hours of Operation Override by name.",
        "description": "This operation returns all Hours of Operation Overrides if no parameter is specified or a particular Hours of Operation Override if a name is provided.",
        "operationId": "Retrieve All Hours of Operation Overrides or by Name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of an Hours of Operation Override.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationOverride"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Override Hours with action VIEW.</li></ul>",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Hours of Operation Overrides"
        ],
        "summary": "Creates and returns an Hours of Operation Override.",
        "description": "This operation creates and returns an Hours of Operation Override.",
        "operationId": "Create Hours of Operation Override",
        "requestBody": {
          "description": "An object representing the Hours of Operation Override to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperationOverride"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoursOfOperationOverride"
                }
              }
            }
          },
          "400": {
            "description": "<ul> <li>[WCO-127701] - The following collection cannot be empty: {listName}.</li> <li>[WCO-127702] - You must specify the following parameter: {paramName}.</li> <li>[WCO-127703] - The following parameter must be null: {paramName}.</li> <li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li> <li>[WCO-127706] - The following object reference is invalid: {refName}.</li> <li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li> <li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> <li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li> <li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li> <li>[WCO-127712] - Request body is missing. Specify request parameters.</li> </ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation_override/multi_create": {
      "post": {
        "tags": [
          "Hours of Operation Overrides"
        ],
        "summary": "Creates and returns Hours of Operation Overrides.",
        "description": "This operation creates and returns Hours of Operation Overrides.",
        "operationId": "Create Hours of Operation Overrides",
        "requestBody": {
          "description": "An object representing a collection of Hours of Operation Overrides to create.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HoursOfOperationOverride"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationOverride"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul> <li>[WCO-127701] - The following collection cannot be empty: {listName}.</li> <li>[WCO-127702] - You must specify the following parameter: {paramName}.</li> <li>[WCO-127703] - The following parameter must be null: {paramName}.</li> <li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li> <li>[WCO-127706] - The following object reference is invalid: {refName}.</li> <li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li> <li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> <li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li> <li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li> <li>[WCO-127712] - Request body is missing. Specify request parameters.</li> </ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation_override/multi_delete": {
      "post": {
        "tags": [
          "Hours of Operation Overrides"
        ],
        "summary": "Deletes a list of Hours of Operation Overrides.",
        "description": "This operation deletes a list of Hours of Operation Overrides.",
        "operationId": "Delete Hours of Operation Overrides",
        "requestBody": {
          "description": "An object representing a collection of references to Hours of Operation Overrides.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperationOverrideRefs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully completed.",
            "content": {}
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127706] - The following object reference is invalid: {refName}.</li><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation_override/multi_read": {
      "post": {
        "tags": [
          "Hours of Operation Overrides"
        ],
        "summary": "Returns Hours of Operation Overrides by object references.",
        "description": "This operation returns Hours of Operation Overrides according to the specified object references.",
        "operationId": "Retrieve Hours of Operation Overrides",
        "requestBody": {
          "description": "An object representing a collection of references to Hours of Operation Overrides.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperationOverrideRefs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationOverride"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127706] - The following object reference is invalid: {refName}.</li><li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action VIEW.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation_override/multi_update": {
      "post": {
        "tags": [
          "Hours of Operation Overrides"
        ],
        "summary": "Updates and returns a list of Hours of Operation Overrides.",
        "description": "This operation updates and returns a list of Hours of Operation Overrides.",
        "operationId": "Update Hours of Operation Overrides",
        "requestBody": {
          "description": "An object representing a collection of Hours of Operation Overrides to update.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HoursOfOperationOverride"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationOverride"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul> <li>[WCO-127701] - The following collection cannot be empty: {listName}.</li> <li>[WCO-127702] - You must specify the following parameter: {paramName}.</li> <li>[WCO-127703] - The following parameter must be null: {paramName}.</li> <li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li> <li>[WCO-127706] - The following object reference is invalid: {refName}.</li> <li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li> <li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> <li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li> <li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li> <li>[WCO-127712] - Request body is missing. Specify request parameters.</li> </ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation_override/{id}": {
      "get": {
        "tags": [
          "Hours of Operation Overrides"
        ],
        "summary": "Returns an Hours of Operation Override by ID.",
        "description": "This operation returns an Hours of Operation Override by ID.",
        "operationId": "Retrieve Hours of Operation Override by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an Hours of Operation Override.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoursOfOperationOverride"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action VIEW.</li></ul>",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Hours of Operation Overrides"
        ],
        "summary": "Updates and returns an Hours of Operation Override.",
        "description": "This operation updates and returns an Hours of Operation Override by ID.",
        "operationId": "Update Hours of Operation Override by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an Hours of Operation Override.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "An object representing the Hours of Operation Override to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperationOverride"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoursOfOperationOverride"
                }
              }
            }
          },
          "400": {
            "description": "<ul> <li>[WCO-127701] - The following collection cannot be empty: {listName}.</li> <li>[WCO-127702] - You must specify the following parameter: {paramName}.</li> <li>[WCO-127703] - The following parameter must be null: {paramName}.</li> <li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li> <li>[WCO-127705] - ID from path does not match ID from request payload.</li> <li>[WCO-127706] - The following object reference is invalid: {refName}.</li> <li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li> <li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> <li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li> <li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li> <li>[WCO-127712] - Request body is missing. Specify request parameters.</li> </ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          },
          "409": {
            "description": "This Hours of Operations Override has already been updated/deleted by some other user.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Hours of Operation Overrides"
        ],
        "summary": "Deletes an Hours of Operation Override.",
        "description": "This operation deletes an Hours of Operation Override by ID.",
        "operationId": "Delete Hours of Operation Override by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of a Hours of Operation Override.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.",
            "content": {}
          },
          "400": {
            "description": "<ul><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/hours_operation_override_assignments": {
      "get": {
        "tags": [
          "Hours of Operation Override Assignments"
        ],
        "summary": "Returns an hours of operation override assignment.",
        "description": "This operation returns an hours of operation override assignment for a single location.",
        "operationId": "Retrieve Hours of Operation Override Assignment",
        "parameters": [
          {
            "name": "location_id",
            "in": "query",
            "description": "The ID of a location.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "location_qualifier",
            "in": "query",
            "description": "The qualifier of a location, which is its full path in the business structure.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effective_date",
            "in": "query",
            "description": "The effective date of an override assignment in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationOverrideAssignment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Assign Hours of Operation with action VIEW.</li></ul>",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/hours_operation_override_assignments/multi_delete": {
      "post": {
        "tags": [
          "Hours of Operation Override Assignments"
        ],
        "summary": "Deletes hours of operation override assignments.",
        "description": "This operation deletes hours of operation override assignments for multiple locations.",
        "operationId": "Delete Hours of Operation Override Assignments",
        "requestBody": {
          "description": "The Delete Hours of Operation Override Assignments request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HoursOfOperationOverrideAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "All items are proceed successfully.",
            "content": {}
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127701] - The following collection cannot be empty: {listName}.</li><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li><li>[WCO-127706] - The following object reference is invalid: {refName}.</li><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li><li>[WCO-127714] - You cannot unassign an hours of operation override which is not assigned to a location.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Assign Hours of Operation with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation_override_assignments/multi_read": {
      "post": {
        "tags": [
          "Hours of Operation Override Assignments"
        ],
        "summary": "Returns hours of operation override assignments.",
        "description": "This operation returns hours of operation override assignments for multiple locations.",
        "operationId": "Retrieve Hours of Operation Override Assignments",
        "requestBody": {
          "description": "The Retrieve Hours of Operation Override Assignments request payload, which contains a list of locations and an effective date.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperationOverrideAssignmentSearchContext"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationOverrideAssignment"
                  }
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Assign Hours of Operation with action VIEW.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/hours_operation_override_assignments/multi_upsert": {
      "post": {
        "tags": [
          "Hours of Operation Override Assignments"
        ],
        "summary": "Creates or updates hours of operation override assignments.",
        "description": "This operation creates or updates hours of operation override assignments for multiple locations.",
        "operationId": "Create or Update Hours of Operation Override Assignments",
        "requestBody": {
          "description": "The Create or Update Hours of Operation Override Assignments request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HoursOfOperationOverrideAssignment"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationOverrideAssignment"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127701] - The following collection cannot be empty: {listName}.</li><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li><li>[WCO-127706] - The following object reference is invalid: {refName}.</li><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Assign Hours of Operation with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/known_ip_addresses": {
      "get": {
        "tags": [
          "Known IP Addresses"
        ],
        "summary": "Returns all Known IP Addresses.",
        "description": "<p>This operation returns all Known IP Addresses.</p><br /><p>The associated Access Control Point is SETUP.</p>",
        "operationId": "Retrieve Known IP Addresses",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of known IP addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnownIP"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Known IP Addresses"
        ],
        "summary": "Creates a Known IP Address.",
        "description": "<p>This operation creates a Known IP Address.</p><br /><p>The associated Access Control Point is SETUP.</p>",
        "operationId": "Create Known IP Address",
        "requestBody": {
          "description": "The Create Known IP Address request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnownIP"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnownIP"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created Known IP Address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnownIP"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul><li>Name must be unique. This name is already in use.</li><li>Name is required.</li><li>Name contains illegal characters.</li><li>Description contains illegal characters.</li><li>An invalid starting IP address: {IPADDRESS} was passed in {startingIPRange}. You must specify a valid IP address.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/known_ip_addresses/multi_upsert": {
      "post": {
        "tags": [
          "Known IP Addresses"
        ],
        "summary": "Creates or updates one or more Known IP Addresses.",
        "description": "<p>This operation creates or updates one or more Known IP Addresses.</p><br /><p>The associated Access Control Point is SETUP.</p>",
        "operationId": "Create or Update Known IP Addresses",
        "requestBody": {
          "description": "The Create or Update Known IP Addresses request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/KnownIP"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful updation/insertion of Known IP Addresses.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/KnownIP"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Partially updated/inserted Known IP Addresses.",
            "content": {}
          },
          "400": {
            "description": "Domain Event Navigation not found.",
            "content": {}
          },
          "403": {
            "description": "You are not authorized to perform this operation.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/known_ip_addresses/{id}": {
      "get": {
        "tags": [
          "Known IP Addresses"
        ],
        "summary": "Returns a Known IP Address by ID.",
        "description": "<p>This operation returns a Known IP Address by ID.</p><br /><p>The associated Access Control Point is SETUP.</p>",
        "operationId": "Retrieve Known IP Address by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of a Known IP Address.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the Known IP Address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnownIP"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          },
          "404": {
            "description": "A Known IP Address with that ID does not exist.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Known IP Addresses"
        ],
        "summary": "Updates a Known IP Address.",
        "description": "<p>This operation updates a Known IP Address by ID.</p><br /><p>The associated Access Control Point is SETUP.</p>",
        "operationId": "Update Known IP Address by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of a Known IP Address.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update Known IP Address by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KnownIP"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated Known IP Address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KnownIP"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul><li>Name must be unique. This name is already used.</li><li>Name is required.</li><li>Name contains illegal characters.</li><li>Description contains illegal characters.</li><li>An invalid starting IP address: {IPADDRESS} was passed in {startingIPRange}. You must specify a valid IP address</li></ul>",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          },
          "404": {
            "description": "A Known IP Address with that ID does not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Known IP Addresses"
        ],
        "summary": "Deletes a Known IP Address.",
        "description": "<p>This operation deletes a Known IP Address by ID.</p><br /><p>The associated Access Control Point is SETUP.</p>",
        "operationId": "Delete Known IP Address by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of a Known IP Address.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted Known IP Address.",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          },
          "404": {
            "description": "A Known IP Address with that ID does not exist.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/notifications": {
      "get": {
        "tags": [
          "Messaging Notifications"
        ],
        "summary": "Returns a list of notifications for the logged-in user. This operation is deprecated.",
        "description": "<p><strong>This operation is deprecated; instead use GET /v2/commons/notifications.</strong></p><p>This operation returns a list of all new or reviewed notifications according to the access privileges of the logged-in user. Notifications are further filtered according to the provided category for the selected timeframe or based on the person IDs contained in the specified Hyperfind.</p>",
        "operationId": "Retrieve Notifications (Deprecated)",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "The name of a category.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The acknowledgement status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hfId",
            "in": "query",
            "description": "The ID of a particular Hyperfind.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The start date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The end date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page_num",
            "in": "query",
            "description": "The page number of the resulting set.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of list of notifications for the logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notifications could not be loaded. Try again.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/notifications/config": {
      "get": {
        "tags": [
          "Messaging Notifications"
        ],
        "summary": "Returns the Control Center configuration.",
        "description": "This operation returns the Control Center configuration for the logged-in user. The configuration consists of the Control Center Access Point permission and the categories accessible to the logged-in user based on the Control Center Profile assigned through the Display Profile.",
        "operationId": "Retrieve Control Center Configuration",
        "responses": {
          "200": {
            "description": "Successful retrieval of control center configuration for the logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ControlCenter Configuration"
                }
              }
            }
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Control center configuration could not be loaded. Try again.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/notifications/count": {
      "get": {
        "tags": [
          "Messaging Notifications"
        ],
        "summary": "Returns a count of all notifications for a user.",
        "description": "This operation returns the category-based count along with the total count of new notifications for the logged-in user.",
        "operationId": "Retrieve Notification Count",
        "responses": {
          "200": {
            "description": "Successful retrieval of category wise count of notifications for the logged-in user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notification count could not be loaded. Try again.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/notifications/item": {
      "get": {
        "tags": [
          "Messaging Notifications"
        ],
        "summary": "Returns a list of notifications for a given item ID.",
        "description": "This operation returns a list of notifications associated with the provided item ID, which is the reference ID of the entity associated with the notification.",
        "operationId": "Retrieve Notifications by Item ID",
        "parameters": [
          {
            "name": "item_id",
            "in": "query",
            "description": "The ID of the item.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "category",
            "in": "query",
            "description": "Name of the category.",
            "schema": {
              "type": "string",
              "default": "REQUEST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of list of notifications for the logged in user.",
            "content": {}
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notifications could not be loaded. Try again.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/notifications/multi_delete": {
      "post": {
        "tags": [
          "Messaging Notifications"
        ],
        "summary": "Deletes a list of notifications.",
        "description": "This operation deletes notifications asynchronously based on the list of message UUIDs provided. Once deleted, notifications disappear from Control Center and the Preview Panel.",
        "operationId": "Delete Multiple Notifications",
        "requestBody": {
          "description": "A list of Notification Message UUIDs.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Generic request JSON"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of notifications successfully deleted for the logged in user.",
            "content": {}
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notifications could not be deleted. Try again.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/notifications/multi_read": {
      "post": {
        "tags": [
          "Messaging Notifications"
        ],
        "summary": "Returns a list of notifications for a list of item IDs.",
        "description": "This operation returns a list of all new and reviewed notifications associated with the list of item IDs provided.",
        "operationId": "Retrieve Notifications by Item IDs",
        "requestBody": {
          "description": "Name of the category.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Generic request JSON"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful retrieval of list of notifications for the logged in user.",
            "content": {}
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notifications could not be loaded. Try again.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/notifications/multi_review": {
      "post": {
        "tags": [
          "Messaging Notifications"
        ],
        "summary": "Reviews a list of notifications by ID.",
        "description": "This operation reviews and acknowledges notifications asynchronously based on the list of message UUIDs provided. Once reviewed and acknowledged, notifications disappear from the Control Center Preview Panel and are moved to the Reviewed folder in Control Center.",
        "operationId": "Review Notifications by ID",
        "requestBody": {
          "description": "A list of Notification Message UUIDs.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Generic request JSON"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "A list of notifications successfully reviewed for the logged in user.",
            "content": {}
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notifications could not be reviewed. Try again.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/notifications/{message_id}": {
      "get": {
        "tags": [
          "Messaging Notifications"
        ],
        "summary": "Returns notification details.",
        "description": "This operation returns details about a particular notification based on the provided message UUID.",
        "operationId": "Retrieve Notification Details",
        "parameters": [
          {
            "name": "message_id",
            "in": "path",
            "description": "UUID of the message.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of notification details for the logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notification detail could not be loaded. Try again.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/pay_period": {
      "get": {
        "tags": [
          "Pay Period Timespans"
        ],
        "summary": "Returns the start and end dates and times for a pay period.",
        "description": "<p>This resource returns a pay period timespan based on the pay period ID, pay rule ID, user, date, and period type. The system supports the following parameter combinations:</p><ul><li><b>pay_period_id</b> returns the pay period timespan for the specified pay period ID.</li><li><b>pay_rule_id</b> returns the pay period timespan for the specified pay rule ID.</li><li><b>user</b> returns the current pay period timespan for the specified user ID.</li><li><b>date</b> returns the pay period timespan for the specified date for the current logged-in user.</li><li><b>user</b> specified in conjunction with <b>date</b> returns the pay period timespan for the specified user and date.</li><li><b>period_type</b> can be specified as Previous, Current, or Next to return the appropriate pay period timespan.</li><li><b>period_type</b> can be specified in conjunction with <b>user_id</b>, <b>pay_period_id</b>, or <b>pay_rule_id</b>.</li><li>If <b>no parameter</b> is specified, this resource returns the current pay period for the current logged-in user.</li><li>If other parameter combinations are specified, the system considers the parameters in the following order:<ol><li><b>pay period id</b></li><li><b>pay rule id</b></li><li><b>user</b></li><li><b>date</b></li></ol></li></ul>",
        "operationId": "Retrieve Pay Period Timespans",
        "parameters": [
          {
            "name": "pay_period_id",
            "in": "query",
            "description": "The Pay Period ID associated with a pay period timespan request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pay_rule_id",
            "in": "query",
            "description": "The Pay Rule ID associated with a pay period timespan request.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employee_id",
            "in": "query",
            "description": "An ID that uniquely identifies an employee associated with a pay period timespan. This is not a person number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The date associated with a pay period timespan for the currently logged-in user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "period_type",
            "in": "query",
            "description": "The period type, specified as Previous, Current, or Next to return the appropriate pay period timespan.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad request:</p><ul> <li>[WCO-124000] - Invalid employee id {empId} </li> <li>[WCO-124001] - Invalid pay rule id {payRuleId} </li> <li>[WCO-124002] - Invalid date {date} </li> <li>[WCO-124003] - Invalid period type {periodType} </li> <li>[WCO-124004] - Pay period should fall under current year. </li> <li>[WTK-180150] - Pay Rule does not exist or accessed with a bad reference. </li> <li>[WTK-180151] - Unexpected exception occurs while fetching payrule data. </li> <li>[WTK-180152] - Data validation exception occurs due to bad input data while request processing. Please verify input data. </li> <li>commonbusiness.timeframe.error.timeframe5153 : Unable to find span details.Please check parameters are passed correctly. </li> <li>commonbusiness.timezone.error.timezone5100 : Some unexpectable error is occured. Please check System logs or contact System Administrator. </li> <li>commonbusiness.timezone.error.timezone5101 : Invalid API parameter/s are received. Please check passed parameters are valid. </li> <li>commonbusiness.timezone.error.timezone5103 : Null parameters are received. </li> <li>commonbusiness.timezone.error.timezone5119 : Unable to find current logged-in user. </li> </ul>",
            "content": {}
          },
          "500": {
            "description": "Unable to find the timespan because of a system error.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/payroll/export": {
      "post": {
        "tags": [
          "Payroll Export"
        ],
        "summary": "Exports small batch payroll as a stream and returns a report.",
        "description": "<p>This operation streams a small batch payroll response in CSV format. This operation is intended for small groups with an expected runtime of 5 minutes or less; if longer, use the asynchronous job. Refer to Docs > Guides > A Guide to Running Payroll > 03. Export Payroll for an example CSV response and for more information.</p>",
        "operationId": "Export Small Batch Payroll",
        "parameters": [
          {
            "name": "stream",
            "in": "query",
            "description": "A Boolean indicator of whether or not the response is streamed.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The Export Small Batch Payroll request payload.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "exportRequest"
      }
    },
    "/v1/commons/payroll/export/async": {
      "get": {
        "tags": [
          "Payroll Export"
        ],
        "summary": "Returns a summary of asynchronous payroll export jobs.",
        "description": "<p>This operation returns a summary of asynchronous payroll export jobs.</p><br /><p>The associated Access Control Point is WAGES.</p>",
        "operationId": "Retrieve Summary of Asynchronous Payroll Export Jobs",
        "parameters": [
          {
            "name": "index",
            "in": "query",
            "description": "The index.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The count.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportStatusListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Payroll Export"
        ],
        "summary": "Exports payroll asynchronously.",
        "description": "<p>This operation exports payroll asynchronously and returns an execution key.</p><br /><p>The associated Access Control Point is WAGES.</p>",
        "operationId": "Export Payroll Asynchronously",
        "requestBody": {
          "description": "Export request.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/ExportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSubmitResponse"
                }
              }
            }
          },
          "202": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportSubmitResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "exportRequest"
      }
    },
    "/v1/commons/payroll/export/async/{executionKey}/response": {
      "get": {
        "tags": [
          "Payroll Export"
        ],
        "summary": "Returns the response payload for an asynchronous operation.",
        "description": "<p>This operation streams the CSV response payload for an asynchronous operation by execution key.</p><p>Refer to <strong>Docs > Guides > A Guide to Running Payroll > 03. Export Payroll</strong> for an example of the CSV file response format and for more information.</p><br /><p>The associated Access Control Point is WAGES.</p>",
        "operationId": "Retrieve Payroll Export Asynchronous Response Payload by Key",
        "parameters": [
          {
            "name": "executionKey",
            "in": "path",
            "description": "The execution key of an asychronous payroll export job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stream",
            "in": "query",
            "description": "A Boolean indicator of whether or not the response is streamed.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/payroll/export/async/{executionKey}/status": {
      "get": {
        "tags": [
          "Payroll Export"
        ],
        "summary": "Returns the status of an asynchronous payroll export request.",
        "description": "<p>This operation returns the status of an asynchronous payroll export request by execution key.</p><br /><p>The associated Access Control Point is WAGES.</p>",
        "operationId": "Retrieve Payroll Export Asynchronous Request Status by Key",
        "parameters": [
          {
            "name": "executionKey",
            "in": "path",
            "description": "The execution key of an asychronous payroll export job.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportStatusResponse"
                }
              }
            }
          },
          "303": {
            "description": "Async job successful or failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/payroll/staging/async": {
      "post": {
        "tags": [
          "Payroll Staging"
        ],
        "summary": "Stages payroll asynchronously.",
        "description": "<p>This operation stages payroll asynchronously and returns a request ID.</p><br /><p>The associated Access Control Point is WAGES.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of parallel executions.</p><ul><li>The <strong>Number of Parallel Executions</strong> cannot exceed 3.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Stage Payroll Asynchronously",
        "requestBody": {
          "description": "The Execute Payroll Extraction Asynchronously request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InvokeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Payroll extract process invoke request successfully staged.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIException"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIException"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/payroll/staging/{requestId}/details": {
      "get": {
        "tags": [
          "Payroll Staging"
        ],
        "summary": "Returns the details for an asynchronous payroll staging operation.",
        "description": "<p>This operation returns the details for an asynchronous payroll staging operation by ID.</p><br /><p>The associated Access Control Point is WAGES.</p>",
        "operationId": "Retrieve Asynchronous Payroll Staging Details by ID",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of an asynchronous payroll extraction staging request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exportType",
            "in": "query",
            "description": "The export type of an asynchronous payroll extraction staging request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payroll extract staging details were returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payrollstagingdetailsdetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/payroll/staging/{requestId}/status": {
      "get": {
        "tags": [
          "Payroll Staging"
        ],
        "summary": "Returns the status of an asynchronous Stage Payroll request.",
        "description": "<p>This operation returns the status of an asynchronous Stage Payroll request by request ID.</p><br /><p>The associated Access Control Point is WAGES.</p>",
        "operationId": "Retrieve Payroll Staging Asynchronous Request Status by ID",
        "parameters": [
          {
            "name": "requestId",
            "in": "path",
            "description": "The ID of an asynchronous payroll extraction staging request.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "exportType",
            "in": "query",
            "description": "The export type of an asynchronous payroll extraction staging request.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Payroll extract staging status is returned successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payrollstagingresponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/payroll/tables": {
      "get": {
        "tags": [
          "Payroll Tables"
        ],
        "summary": "Returns all payroll tables in the system.",
        "description": "This operation returns reference information for all payroll tables in the system. Only <code>name</code> and <code>type</code> are returned for each payroll table. For environments with a large number of tables, the response may be paginated using <code>index</code> and <code>count</code> and filtered to return only custom tables.",
        "operationId": "Retrieve All Payroll Tables",
        "parameters": [
          {
            "name": "index",
            "in": "query",
            "description": "The pagination index of the Retrieve All Payroll Tables request. This parameter is optional.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "The pagination count of the Retrieve All Payroll Tables request. This parameter is optional.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "custom",
            "in": "query",
            "description": "A Boolean indicator of whether or not to only retrieve custom tables. This parameter is optional.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/payroll/tables/apply_create": {
      "post": {
        "tags": [
          "Payroll Tables"
        ],
        "summary": "Creates a payroll table by uploading custom files and schemas.",
        "description": "<p>This operation creates a payroll table by uploading custom files and schemas. The form-data encoding requires the key passed as <code>file</code> and the value as the desired CSV file. Local files are supported. You must upload a properly formatted file. Refer to <strong>Docs > Guides > A Guide to Running Payroll</strong> for an example of a properly formatted CSV file and for more information.</p>",
        "operationId": "Create Payroll Table",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The JSON or CSV file.",
                    "format": "binary"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/payroll/tables/apply_upsert": {
      "post": {
        "tags": [
          "Payroll Tables"
        ],
        "summary": "Creates or updates a payroll table.",
        "description": "<p>This operation creates or updates a payroll table. Refer to <strong>Docs > Guides > A Guide to Running Payroll</strong> for an example request and response and for more information.</p>",
        "operationId": "Create or Update Payroll Table",
        "requestBody": {
          "description": "The Create or Update Payroll Table request payload.",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/TableUpsertRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "tableUpsertRequest"
      }
    },
    "/v1/commons/payroll/tables/{name}": {
      "get": {
        "tags": [
          "Payroll Tables"
        ],
        "summary": "Returns a payroll table.",
        "description": "<p>This operation returns a payroll table by name. Unlike Retrieve All Payroll Tables (<code>GET /v1/commons/payroll/tables</code>), this operation returns the complete table object.</p><p><strong>Note:</strong> The <code>partitionConfig</code> object is only returned in the response when the table type is <code>CUSTOM</code> and the table contains a partition configuration.</p>",
        "operationId": "Retrieve Payroll Table by Name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of a payroll table.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Payroll Tables"
        ],
        "summary": "Deletes a payroll table.",
        "description": "This operation deletes a payroll table by name.",
        "operationId": "Delete Payroll Table by Name",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "The name of a payroll table.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation.",
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayrollExceptionResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/pge/setup/behaviors/configurations": {
      "get": {
        "tags": [
          "Proactively Guide Employees - Behaviors Configuration"
        ],
        "summary": "Returns all Proactively Guide Employees (PGE) setup behaviors configurations.",
        "description": "This operation returns all Proactively Guide Employees (PGE) setup behaviors configurations.",
        "operationId": "Retrieve All PGE Behaviors Configurations",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/pge/setup/behaviors/configurations/items": {
      "get": {
        "tags": [
          "Proactively Guide Employees - Behaviors Configuration Items"
        ],
        "summary": "Returns Proactively Guide Employees (PGE) setup behaviors configuration items.",
        "description": "This operation returns Proactively Guide Employees (PGE) setup behaviors configuration items.",
        "operationId": "Retrieve PGE Behaviors Configuration Items",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Proactively Guide Employees - Behaviors Configuration Items"
        ],
        "summary": "Creates a Proactively Guide Employees (PGE) setup behaviors configuration item.",
        "description": "This operation creates a Proactively Guide Employees (PGE) setup behaviors configuration item according to the data provided.",
        "operationId": "Create PGE Behaviors Configuration Item",
        "requestBody": {
          "description": "The Create PGE Behaviors Configuration Item request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PgeBehaviorConfigurationItemsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/pge/setup/behaviors/configurations/items/{id}": {
      "get": {
        "tags": [
          "Proactively Guide Employees - Behaviors Configuration Items"
        ],
        "summary": "Returns a Proactively Guide Employees (PGE) setup behaviors configuration item.",
        "description": "This operation returns a Proactively Guide Employees (PGE) setup behaviors configuration item by ID.",
        "operationId": "Retrieve PGE Behaviors Configuration Item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Proactively Guide Employees - Behaviors Configuration Items"
        ],
        "summary": "Updates a Proactively Guide Employees (PGE) setup behaviors configuration item.",
        "description": "This operation updates a Proactively Guide Employees (PGE) setup behaviors configuration item by ID.",
        "operationId": "Update PGE Behaviors Configuration Item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update PGE Behaviors Configuration Item by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PgeBehaviorConfigurationItemsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Proactively Guide Employees - Behaviors Configuration Items"
        ],
        "summary": "Deletes a Proactively Guide Employees (PGE) setup behaviors configuration item.",
        "description": "This operation deletes a Proactively Guide Employees (PGE) setup behaviors configuration item by ID.",
        "operationId": "Delete PGE Behaviors Configuration Item by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/pge/setup/behaviors/configurations/{id}": {
      "get": {
        "tags": [
          "Proactively Guide Employees - Behaviors Configuration"
        ],
        "summary": "Returns a Proactively Guide Employees (PGE) setup behaviors configuration.",
        "description": "This operation returns a Proactively Guide Employees (PGE) setup behaviors configuration by ID.",
        "operationId": "Retrieve PGE Behaviors Configuration by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Proactively Guide Employees - Behaviors Configuration"
        ],
        "summary": "Updates a Proactively Guide Employees (PGE) setup behaviors configuration.",
        "description": "This operation updates a Proactively Guide Employees (PGE) setup behaviors configuration by ID.",
        "operationId": "Update PGE Behaviors Configuration by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update PGE Behaviors Configuration by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PgeBehaviorConfigurationsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/reviewer_lists": {
      "get": {
        "tags": [
          "Reviewer Lists"
        ],
        "summary": "Returns a reviewer list by name, type, and active status.",
        "description": "<p>This operation returns a reviewer list by name, type, and active status.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Retrieve Reviewer List by Criteria",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of a reviewer list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of a reviewer list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "A Boolean indicator of whether or not a reviewer list is active.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved one or more reviewer lists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Reviewer Lists"
        ],
        "summary": "Creates a reviewer list.",
        "description": "<p>This operation creates a reviewer list.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Create Reviewer List",
        "requestBody": {
          "description": "The Create Reviewer List request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created a reviewer list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/reviewer_lists/multi_create": {
      "post": {
        "tags": [
          "Reviewer Lists"
        ],
        "summary": "Creates one or more reviewer lists.",
        "description": "<p>This operation creates one or more reviewer lists.</p></p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Create Reviewer Lists",
        "requestBody": {
          "description": "The Create Reviewer Lists request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "All reviewer list records created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Some of the reviwerlist records are created successfully.",
            "content": {}
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/reviewer_lists/multi_delete": {
      "post": {
        "tags": [
          "Reviewer Lists"
        ],
        "summary": "Deletes one or more reviewer lists.",
        "description": "<p>This operation deletes one or more reviewer lists.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Delete Reviewer Lists",
        "requestBody": {
          "description": "The Delete Reviewer Lists request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiReadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                }
              }
            }
          },
          "204": {
            "description": "Success",
            "content": {}
          },
          "207": {
            "description": "Some of the reviewer list records are deleted successfully.",
            "content": {}
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/reviewer_lists/multi_update": {
      "post": {
        "tags": [
          "Reviewer Lists"
        ],
        "summary": "Updates one or more reviewer lists.",
        "description": "<p>This operation updates one or more reviewer lists. The Reviewer List Type cannot be updated with this operation.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Update Reviewer Lists",
        "requestBody": {
          "description": "The Update Reviewer Lists request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "All reviewer list records updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Some of the reviwerlist records are created successfully.",
            "content": {}
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/reviewer_lists/reviewers": {
      "get": {
        "tags": [
          "Reviewer Lists"
        ],
        "summary": "Returns all reviewers for reviewer lists.",
        "description": "<p>This operation returns all reviewers for reviewer lists.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Retrieve Reviewers for Reviewer Lists",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of reviwers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/reviewer_lists/{id}": {
      "get": {
        "tags": [
          "Reviewer Lists"
        ],
        "summary": "Returns a reviewer list.",
        "description": "<p>This operation returns a reviewer list by ID.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Retrieve Reviewer List by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a reviewer list.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a reviewer list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: id, Value: {parameterValue}.",
            "content": {}
          },
          "404": {
            "description": "Reviewer List with reference {parameterName} cannot be {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Reviewer Lists"
        ],
        "summary": "Updates a reviewer list.",
        "description": "<p>This operation updates a reviewer list by ID. The Reviewer List Type cannot be updated with this operation.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Update Reviewer List by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a reviewer list.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update Reviewer List by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reviwer List record updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "404": {
            "description": "Reviewer List with reference {parameterName} cannot be {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Reviewer Lists"
        ],
        "summary": "Deletes a reviewer list.",
        "description": "<p>This operation deletes a reviewer list by ID.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Delete Reviewer List by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a reviewer list.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerListDTO"
                }
              }
            }
          },
          "204": {
            "description": "Reviwer List record deleted successfully.",
            "content": {}
          },
          "400": {
            "description": "Reviewer List with reference {parameterName} cannot be {parameterValue}.",
            "content": {}
          },
          "404": {
            "description": "Reviewer List with reference {parameterName} cannot be {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/reviewer_purpose": {
      "get": {
        "tags": [
          "Reviewer Purposes"
        ],
        "summary": "Returns all reviewer purposes or a particular reviewer purpose by name.",
        "description": "<p>This operation returns all reviewer purposes if no parameter is specified or a particular reviewer purpose if a name is provided.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Retrieve All Reviewer Purposes or by Name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of a reviewer purpose.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of a reviewer purpose.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reviewer Purpose record created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "404": {
            "description": "Reviewer Purpose with reference {parameterName} cannot be {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Reviewer Purposes"
        ],
        "summary": "Creates a reviewer purpose.",
        "description": "<p>This operation creates a reviewer purpose.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Create Reviewer Purpose",
        "requestBody": {
          "description": "The Create Reviewer Purpose request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reviewer Purpose record created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/reviewer_purpose/{id}": {
      "get": {
        "tags": [
          "Reviewer Purposes"
        ],
        "summary": "Returns a reviewer purpose.",
        "description": "<p>This operation returns a reviewer purpose by ID.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Retrieve Reviewer Purpose by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a reviewer purpose.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a reviewer purpose.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
                }
              }
            }
          },
          "404": {
            "description": "Reviewer Purpose with reference id cannot be {propertyValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Reviewer Purposes"
        ],
        "summary": "Updates a reviewer purpose.",
        "description": "<p>This operation updates a reviewer purpose by ID.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Update Reviewer Purpose by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a reviewer purpose.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update Reviewer Purpose by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reviewer Purpose record updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "404": {
            "description": "Reviewer Purpose with reference {parameterName} cannot be {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Reviewer Purposes"
        ],
        "summary": "Deletes a reviewer purpose.",
        "description": "<p>This operation deletes a reviewer purpose by ID.</p><br /><p>The associated Access Control Point is REQUEST_REVIEWERS.</p>",
        "operationId": "Delete Reviewer Purpose by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the reviewer purpose record.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reviewer Purpose record deleted successfully.",
            "content": {}
          },
          "404": {
            "description": "Reviewer Purpose with reference {parameterName} cannot be {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/setup/timezones": {
      "get": {
        "tags": [
          "Timezones"
        ],
        "summary": "Returns a timezone.",
        "description": "<p>This operation returns timezone details for the logged-in user or according to one of the following qualifiers:</p><ul><li>Timezone name</li><li>Employee ID</li><li>Person number</li><li>Location ID</li></ul>",
        "operationId": "Retrieve Timezone",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of a timezone.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employee_id",
            "in": "query",
            "description": "An ID that uniquely identifies an employee. This is not a person number.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "person_number",
            "in": "query",
            "description": "A unique identifier for a person. This is not an employee ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "location_id",
            "in": "query",
            "description": "The Location ID associated with a timezone.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The effective date for a location.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timezone"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/setup/timezones/{id}": {
      "get": {
        "tags": [
          "Timezones"
        ],
        "summary": "Returns a timezone.",
        "description": "<p>This operation returns a timezone by ID.</p><br /><p>The associated Access Control Point is TIME_ZONE.</p>",
        "operationId": "Retrieve Timezone by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a timezone.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status OK.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timezone"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/symbolic_purposes": {
      "get": {
        "tags": [
          "Symbolic Purposes"
        ],
        "summary": "Returns all symbolic purposes or a particular symbolic purpose by name.",
        "description": "This operation returns all symbolic purposes if no parameter is specified or a particular symbolic purpose if a name is provided.",
        "operationId": "Retrieve All Symbolic Purposes or by Name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of a symbolic purpose.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of a symbolic purpose.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Symbolic Purpose record created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "404": {
            "description": "Symbolic Purpose with reference {parameterName} cannot be {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Symbolic Purposes"
        ],
        "summary": "Creates a symbolic purpose.",
        "description": "This operation creates a symbolic purpose.",
        "operationId": "Create Symbolic Purpose",
        "requestBody": {
          "description": "The Create Symbolic Purpose request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Symbolic Purpose record created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/symbolic_purposes/{id}": {
      "get": {
        "tags": [
          "Symbolic Purposes"
        ],
        "summary": "Returns a symbolic purpose.",
        "description": "This operation returns a symbolic purpose by ID.",
        "operationId": "Retrieve Symbolic Purpose by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a symbolic purpose.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a symbolic purpose.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
                }
              }
            }
          },
          "404": {
            "description": "Symbolic Purpose with reference id cannot be {propertyValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Symbolic Purposes"
        ],
        "summary": "Updates a symbolic purpose.",
        "description": "This operation updates a symbolic purpose by ID.",
        "operationId": "Update Symbolic Purpose by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a symbolic purpose.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update Symbolic Purpose by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Symbolic Purpose record updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/request-reviewers-api_ReviewerPurposeDTO"
                }
              }
            }
          },
          "400": {
            "description": "The value is not valid for the parameter - Name: {parameterName}, Value: {parameterValue}.",
            "content": {}
          },
          "404": {
            "description": "Symbolic Purpose with reference {parameterName} cannot be {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Symbolic Purposes"
        ],
        "summary": "Deletes a symbolic purpose.",
        "description": "This operation deletes a symbolic purpose by ID.",
        "operationId": "Delete Symbolic Purpose by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the symbolic purpose record.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Symbolic Purpose record deleted successfully.",
            "content": {}
          },
          "404": {
            "description": "Symbolic Purpose with reference {parameterName} cannot be {parameterValue}.",
            "content": {}
          },
          "500": {
            "description": "Internal server error.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/symbolicperiod": {
      "get": {
        "tags": [
          "Symbolic Periods"
        ],
        "summary": "Returns all symbolic periods in the system.",
        "description": "This operation returns all symbolic periods in the system.",
        "operationId": "Retrieve Symbolic Periods",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SymbolicPeriod"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/symbolicperiod/multi_read": {
      "post": {
        "tags": [
          "Symbolic Periods"
        ],
        "summary": "Returns a map of date spans grouped by symbol type.",
        "description": "This operation returns a map of date spans grouped by symbol type. The data can include locationId, employee Id, person number, current user, and current tenant. You can specify the response returned.",
        "operationId": "Retrieve Date Span Grouped by Symbol Type",
        "requestBody": {
          "description": "The set of conditions used to return a map of date spans grouped by symbol type.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiSymbolicRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/LocalDateSpan"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/symbolicperiod/period_types": {
      "get": {
        "tags": [
          "Symbolic Periods"
        ],
        "summary": "Returns all period types in the system.",
        "description": "This operation returns all period types in the system.",
        "operationId": "Retrieve Symbolic Period Types",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PeriodType"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/symbolicperiod/read": {
      "post": {
        "tags": [
          "Symbolic Periods"
        ],
        "summary": "Returns a locale date span matching the search criteria.",
        "description": "This operation returns a locale date span, or symbolic period, according to the data provided. The data can include locationId, employee Id, person number, current user, and current tenant. You can specify the response returned.",
        "operationId": "Retrieve Locale Date Span",
        "requestBody": {
          "description": "The set of conditions used to return a locale date span (symbolic period).",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FindSymbolicRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocalDateSpan"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/symbolicperiod/types": {
      "post": {
        "tags": [
          "Symbolic Periods"
        ],
        "summary": "Returns a map of symbolic periods grouped by type for the requested period types list.",
        "description": "This operation returns a map of symbolic periods grouped by type for the requested period types list.",
        "operationId": "Retrieve Symbolic Periods Grouped by Type",
        "requestBody": {
          "description": "A list of IDs representing period types.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/SymbolicPeriod"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/symbolicperiod/{periodTypeId}": {
      "get": {
        "tags": [
          "Symbolic Periods"
        ],
        "summary": "Returns a list of symbolic periods for a given period type.",
        "description": "This operation returns a list of all symbolic periods for the period type specified by the provided ID.",
        "operationId": "Retrieve Symbolic Periods by Period Type ID",
        "parameters": [
          {
            "name": "periodTypeId",
            "in": "path",
            "description": "The ID of a period type.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SymbolicPeriod"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/teletime_ip/user_profiles": {
      "get": {
        "tags": [
          "TeleTime IP User Profiles"
        ],
        "summary": "Returns a list of all TeleTime IP User Profiles.",
        "description": "<p>This operation returns a list of all TeleTime IP User Profiles in the system.</p><br /><p>The associated Access Control Point is WIVR_PEOPLE.</p>",
        "operationId": "Retrieve TeleTime IP User Profiles",
        "responses": {
          "200": {
            "description": "Successfully Retrieved a list of TeleTime IP User Profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TTIP User Profile Model"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/timecard_approval_methods": {
      "get": {
        "tags": [
          "Timecard Approval Methods"
        ],
        "summary": "Returns a list of available timecard approval methods.",
        "description": "This operation returns a list of available timecard approval methods.",
        "operationId": "Retrieve Timecard Approval Methods",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of available timecard approval methods.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ObjectRef"
                  }
                }
              }
            }
          },
          "500": {
            "description": "An unknown error occurred. Please contact your system administrator.",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/timezones/apply_update": {
      "put": {
        "tags": [
          "Timezones"
        ],
        "summary": "Sets the timezone for a tenant.",
        "description": "This operation sets the timezone for a tenant.",
        "operationId": "Set Timezone",
        "requestBody": {
          "description": "The Set Timezone request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/timezoneApplyUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Timezone"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect Request Parameter/Invalid Request Body.",
            "content": {}
          },
          "409": {
            "description": "The name already exists.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/transaction_assistant/multi_read": {
      "post": {
        "tags": [
          "Transaction Assistant"
        ],
        "summary": "Returns transaction assistant records.",
        "description": "<p>This operation returns a list of all transaction assistant records. The list includes details such as start date and time, end date and time, source type, transaction type, and the integration specific attributes.</p><br /><p>The associated Access Control Point is FAILED_TRANSACTION_DATA_BEANS.</p><br/> <h2>Service limit</h2><p>A service limit constrains the number of days and the number of records in a single page that can be processed in a single request.</p><ul><li>The <strong>Number of Days</strong> cannot exceed 7.</li><li>The <strong>Number of Records</strong> cannot exceed 500.</li></ul>",
        "operationId": "Retrieve All Transaction Assistant Records",
        "requestBody": {
          "description": "The Retrieve All Transaction Assistant Records request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transaction-assistant-api_TAMultiReadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful retrieval of the list of all transaction assistant records.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction-assistant-api_TAResponseData"
                }
              }
            }
          },
          "400": {
            "description": "<p>Bad Request:</p> <ul><li>[WCO-105000] - The start or end date is not defined.</li><li>[WCO-105001] - The start date must be earlier than the end date.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "[WFP-90012] - User does not have access to Transaction Assistant Beans with action VIEW.",
            "content": {}
          },
          "413": {
            "description": "<p>Service Limit:</p><ul><li> [WCO-105002] - The date-range in the request exceeds the service-limit of {limit} days.</li><li>[WCO-105003] - The page size exceeds the service limit of {limit}.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/transfer_display_profiles": {
      "get": {
        "tags": [
          "Transfer Display Profiles"
        ],
        "summary": "Returns all transfer display profiles.",
        "description": "<p>This operation returns a list of all transfer display profiles.</p><br /><p>The associated Access Control Points are TRANSFER_DISPLAY_PROFILES and REST_API_SETUP.</p>",
        "operationId": "Retrieve All Transfer Display Profiles",
        "parameters": [
          {
            "name": "snapshot_date",
            "in": "query",
            "description": "A snapshot date that applies to valid organizational node types associated with each transfer display profile.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of transfer display profiles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transfer Display Model"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Authenticated user is not authorized to access transfer display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Transfer Display Profiles"
        ],
        "summary": "Creates a transfer display profile.",
        "description": "<p>This operation creates a transfer display profile.</p><br /><p>The associated Access Control Points are TRANSFER_DISPLAY_PROFILES and REST_API_SETUP.</p>",
        "operationId": "Create Transfer Display Profile",
        "requestBody": {
          "description": "The Create Transfer Display Profile request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transfer Display Model"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created the transfer display profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer Display Model"
                }
              }
            }
          },
          "400": {
            "description": "Caller provides an invalid representation of the transfer display profile resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          },
          "403": {
            "description": "Authenticated user is not authorized to access transfer display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          },
          "409": {
            "description": "Conflict due to concurrent modifications of the same transfer display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/transfer_display_profiles/{id}": {
      "get": {
        "tags": [
          "Transfer Display Profiles"
        ],
        "summary": "Returns a transfer display profile.",
        "description": "<p>This operation returns a transfer display profile by ID.</p><br /><p>The associated Access Control Points are TRANSFER_DISPLAY_PROFILES and REST_API_SETUP.</p>",
        "operationId": "Retrieve Transfer Display Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a transfer display profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "snapshot_date",
            "in": "query",
            "description": "A snapshot date that applies to valid organizational node types associated with each transfer display profile.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the transfer display profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer Display Model"
                }
              }
            }
          },
          "403": {
            "description": "Authenticated user is not authorized to access transfer display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          },
          "404": {
            "description": "No transfer display profile of the given ID exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Transfer Display Profiles"
        ],
        "summary": "Updates a transfer display profile.",
        "description": "<p>This operation updates a transfer display profile by ID.</p><br /><p>The associated Access Control Points are TRANSFER_DISPLAY_PROFILES and REST_API_SETUP.</p>",
        "operationId": "Update Transfer Display Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a transfer display profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update Transfer Display Profile by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transfer Display Model"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the transfer display profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transfer Display Model"
                }
              }
            }
          },
          "400": {
            "description": "Caller provides an invalid representation of the transfer display profile resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          },
          "403": {
            "description": "Authenticated user is not authorized to access transfer display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          },
          "404": {
            "description": "No transfer display profile of the given ID exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          },
          "405": {
            "description": "Caller provides an invalid representation of the transfer display profile call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          },
          "409": {
            "description": "Conflict due to concurrent modifications of the same transfer display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Transfer Display Profiles"
        ],
        "summary": "Deletes a transfer display profile.",
        "description": "<p>This operation deletes a transfer display profile by ID.</p><br /><p>The associated Access Control Points are TRANSFER_DISPLAY_PROFILES and REST_API_SETUP.</p>",
        "operationId": "Delete Transfer Display Profile by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a transfer display profile.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully delete the transfer display profile.",
            "content": {}
          },
          "403": {
            "description": "Authenticated user is not authorized to access transfer display profiles.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          },
          "404": {
            "description": "No transfer display profile of the given ID exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          },
          "405": {
            "description": "Caller provides an invalid representation of the transfer display profile call.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferDisplayException"
                }
              }
            }
          }
        }
      }
    },
    "/v1/commons/wifi_access_points": {
      "get": {
        "tags": [
          "WiFi Access Points"
        ],
        "summary": "Returns a list of WiFi Access Points.",
        "description": "This operation returns a list of WiFi Access Points.",
        "operationId": "Retrieve All WiFi Access Points",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of WiFi Access Points",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Wi-Fi Access Point"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "WiFi Access Points"
        ],
        "summary": "Creates a WiFi Access Point.",
        "description": "This operation creates a WiFi Access Point.",
        "operationId": "Create WiFi Access Point",
        "requestBody": {
          "description": "The Create WiFi Access Point request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wi-Fi Access Point"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created WiFi Access Point",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wi-Fi Access Point"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Name must be unique. This name is already in use.</li><li>Name contains illegal characters.</li><li>Name is required.</li><li>Name exceeds maximum number of characters.</li><li>Description contains illegal characters.</li><li>Description exceeds maximum number of characters.</li><li>BSSID is required</li><li>Invalid BSSID format.</li><li>Invalid BSSID content.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/wifi_access_points/multi_delete": {
      "post": {
        "tags": [
          "WiFi Access Points"
        ],
        "summary": "Deletes one or more WiFi Access Points.",
        "description": "This operation deletes one or more WiFi Access Points.",
        "operationId": "Delete WiFi Access Points",
        "requestBody": {
          "description": "The Delete WiFi Access Points request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WiFi Access Point Multi Delete Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully deleted WiFi Access Point(s)",
            "content": {}
          },
          "207": {
            "description": "Multi-delete operation resulted in at least one failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WiFi Access Point Multi Delete Response"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          },
          "404": {
            "description": "WiFi Access Points with the provided IDs do not exist",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/wifi_access_points/multi_upsert": {
      "post": {
        "tags": [
          "WiFi Access Points"
        ],
        "summary": "Creates or updates one or more WiFi Access Points.",
        "description": "This operation creates or updates one or more WiFi Access Points.",
        "operationId": "Create or Update WiFi Access Points",
        "requestBody": {
          "description": "The Create or Update WiFi Access Points request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Wi-Fi Access Point"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created (and/or updated) requested WiFi Access Points",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Wi-Fi Access Point"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Multi-upsert operation resulted in at least one failure",
            "content": {}
          },
          "400": {
            "description": "<ul><li>ID is required</li><li>Name must be unique. This name is already in use.</li><li>Name contains illegal characters.</li><li>Name is required.</li><li>Name exceeds maximum number of characters.</li><li>Description contains illegal characters.</li><li>Description exceeds maximum number of characters.</li><li>BSSID is required</li><li>Invalid BSSID format.</li><li>Invalid BSSID content.</li><li>Version is required.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/wifi_access_points/{id}": {
      "get": {
        "tags": [
          "WiFi Access Points"
        ],
        "summary": "Returns the specified WiFi Access Point.",
        "description": "This operation returns a WiFi Access Point by ID.",
        "operationId": "Retrieve WiFi Access Point by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a WiFi Access Point.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the WiFi Access Point",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wi-Fi Access Point"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          },
          "404": {
            "description": "A WiFi Access Point with that ID does not exist",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "WiFi Access Points"
        ],
        "summary": "Updates the specified WiFi Access Point.",
        "description": "This operation updates a WiFi Access Point by ID.",
        "operationId": "Update WiFi Access Point by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a WiFi Access Point.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update WiFi Access Point by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wi-Fi Access Point"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated WiFi Access Point",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wi-Fi Access Point"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>ID is required</li><li>Name must be unique. This name is already in use.</li><li>Name contains illegal characters.</li><li>Name is required.</li><li>Name exceeds maximum number of characters.</li><li>Description contains illegal characters.</li><li>Description exceeds maximum number of characters.</li><li>BSSID is required</li><li>Invalid BSSID format.</li><li>Invalid BSSID content.</li><li>Version is required.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          },
          "404": {
            "description": "A WiFi Access Point with the specified ID does not exist",
            "content": {}
          },
          "409": {
            "description": "The WiFi Access Point has been modified by another user. Please refresh your data, incorporate your changes, and save again.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "WiFi Access Points"
        ],
        "summary": "Deletes the specified WiFi Access Point.",
        "description": "This operation deletes a WiFi Access Point by ID.",
        "operationId": "Delete WiFi Access Point by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a WiFi Access Point.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "WiFi Access Point successfully deleted",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          },
          "404": {
            "description": "WiFi Access Point with specified ID not found",
            "content": {}
          }
        }
      }
    },
    "/v1/commons/wifi_networks": {
      "get": {
        "tags": [
          "WiFi Networks"
        ],
        "summary": "Returns a list of WiFi Networks.",
        "description": "This operation returns a list of WiFi Networks.",
        "operationId": "Retrieve All WiFi Networks",
        "responses": {
          "200": {
            "description": "Successfully retrieved a list of WiFi Networks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Wi-Fi Network"
                  }
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "WiFi Networks"
        ],
        "summary": "Creates a WiFi Network.",
        "description": "This operation creates a WiFi Network.",
        "operationId": "Create WiFi Network",
        "requestBody": {
          "description": "The Create WiFi Network request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wi-Fi Network"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created WiFi Network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wi-Fi Network"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Name must be unique. This name is already in use.</li><li>Name contains illegal characters.</li><li>Name is required.</li><li>Name exceeds maximum number of characters.</li><li>Description contains illegal characters.</li><li>Description exceeds maximum number of characters.</li><li>ESSID is required</li><li>ESSID contains illegal characters.</li><li>ESSID exceeds maximum number of characters.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/wifi_networks/multi_delete": {
      "post": {
        "tags": [
          "WiFi Networks"
        ],
        "summary": "Deletes one or more WiFi Networks.",
        "description": "This operation deletes one or more WiFi Networks.",
        "operationId": "Delete WiFi Networks",
        "requestBody": {
          "description": "The Delete WiFi Networks request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WiFi Network Multi Delete Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully deleted WiFi Network(s)",
            "content": {}
          },
          "207": {
            "description": "Multi-delete operation resulted in at least one failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WiFi Network Multi Delete Response"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          },
          "404": {
            "description": "WiFi Networks with the provided IDs do not exist.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/wifi_networks/multi_upsert": {
      "post": {
        "tags": [
          "WiFi Networks"
        ],
        "summary": "Creates or updates one or more WiFi Networks.",
        "description": "This operation creates or updates one or more WiFi Networks.",
        "operationId": "Create or Update WiFi Networks",
        "requestBody": {
          "description": "The Create or Update WiFi Networks request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Wi-Fi Network"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created (and/or updated) requested WiFi Networks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Wi-Fi Network"
                  }
                }
              }
            }
          },
          "207": {
            "description": "Multi-upsert operation resulted in at least one failure",
            "content": {}
          },
          "400": {
            "description": "<ul><li>Name must be unique. This name is already in use.</li><li>Name contains illegal characters.</li><li>Name is required.</li><li>Name exceeds maximum number of characters.</li><li>Description contains illegal characters.</li><li>Description exceeds maximum number of characters.</li><li>ESSID is required</li><li>ESSID contains illegal characters.</li><li>ESSID exceeds maximum number of characters.</li><li>Version is required.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/commons/wifi_networks/{id}": {
      "get": {
        "tags": [
          "WiFi Networks"
        ],
        "summary": "Returns the specified WiFi Network.",
        "description": "This operation returns a WiFi Network by ID.",
        "operationId": "Retrieve WiFi Network by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a WiFi Network.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the WiFi Network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wi-Fi Network"
                }
              }
            }
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          },
          "404": {
            "description": "A WiFi Network with that ID does not exist",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "WiFi Networks"
        ],
        "summary": "Updates the specified WiFi Network.",
        "description": "This operation updates a WiFi Network by ID.",
        "operationId": "Update WiFi Network by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a WiFi Network.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update WiFi Network by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Wi-Fi Network"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated WiFi Network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wi-Fi Network"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>Name must be unique. This name is already in use.</li><li>Name contains illegal characters.</li><li>Name is required.</li><li>Name exceeds maximum number of characters.</li><li>Description contains illegal characters.</li><li>Description exceeds maximum number of characters.</li><li>ESSID is required</li><li>ESSID contains illegal characters.</li><li>ESSID exceeds maximum number of characters.</li><li>Version is required.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          },
          "404": {
            "description": "A WiFi Network with the specified ID does not exist",
            "content": {}
          },
          "409": {
            "description": "The WiFi Network has been modified by another user. Please refresh your data, incorporate your changes, and save again",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "WiFi Networks"
        ],
        "summary": "Deletes a WiFi Network.",
        "description": "This operation deletes a WiFi Network by ID.",
        "operationId": "Delete WiFi Network by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of a WiFi Network.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "WiFi Network successfully deleted",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource",
            "content": {}
          },
          "404": {
            "description": "WiFi Network with specified ID not found",
            "content": {}
          }
        }
      }
    },
    "/v1/licensing/entitlement_history": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Returns the entitlement history details.",
        "description": "This operation returns list of entitlement-history (history details) for all license-packages.",
        "operationId": "Entitlement History",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/License history response"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request.",
            "content": {}
          }
        }
      }
    },
    "/v1/licensing/entitlement_summary": {
      "get": {
        "tags": [
          "Entitlements"
        ],
        "summary": "Returns the entitlements for all the license-packages.",
        "description": "This operation returns list of entitlement-summary for all license-packages.",
        "operationId": "Entitlement Summary",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/License summary response"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request.",
            "content": {}
          }
        }
      }
    },
    "/v2/commons/cost_centers": {
      "get": {
        "tags": [
          "Cost Centers"
        ],
        "summary": "Returns a list of all cost centers in the system.",
        "description": "<p>This operation returns a list of all cost centers in the system.</p><br /><p>The associated Access Control Point is COST_CENTERS.</p>",
        "operationId": "Retrieve All Cost Centers",
        "responses": {
          "200": {
            "description": "Successfully Retrieved a list of Cost Centers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Cost Center Model"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request: Unable to retrieve Cost Centers",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          }
        }
      }
    },
    "/v2/commons/cost_centers/{id}": {
      "get": {
        "tags": [
          "Cost Centers"
        ],
        "summary": "Returns the requested cost center.",
        "description": "<p>This operation returns a cost center by ID.</p><br /><p>The associated Access Control Point is COST_CENTERS.</p>",
        "operationId": "Retrieve Cost Center by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the cost center.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Retrieved the Cost Center",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cost Center Model"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request:  Unable to retrieve Cost Center",
            "content": {}
          },
          "403": {
            "description": "You do not have permission to access this resource.",
            "content": {}
          },
          "404": {
            "description": "Not Found: The cost center does not exist. Id: {Id}.",
            "content": {}
          }
        }
      }
    },
    "/v2/commons/hours_operation": {
      "get": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Returns all Hours of Operation or a particular Hours of Operation by name.",
        "description": "<p>This operation returns all Hours of Operation objects with effective versions if no parameter is specified or a particular Hours of Operation object if a name is provided.</p><br /><p>The associated Access Control Point is WFF_CREATE_REGULAR_HOURS.</p>",
        "operationId": "Retrieve All Hours of Operation or by Name",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "The name of Hours of Operation object.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationWithVersions"
                  }
                }
              }
            }
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action VIEW.</li></ul>",
            "content": {}
          },
          "404": {
            "description": "<ul><li>[WCO-127716] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li></ul>",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Creates and returns an Hours of Operation object.",
        "description": "<p>This operation creates and returns an Hours of Operation object with effective versions.</p><br /><p>The associated Access Control Point is WFF_CREATE_REGULAR_HOURS.</p>",
        "operationId": "Create Hours of Operation",
        "requestBody": {
          "description": "The Create Hours of Operation request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperationWithVersions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoursOfOperationWithVersions"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127701] - The following collection cannot be empty: {listName}.</li><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127703] - The following parameter must be null: {paramName}.</li><li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li><li>[WCO-127706] - The following object reference is invalid: {refName}.</li><li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li><li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li><li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li><li>[WFF-190003] - The given close time is equal to open time. The close time can not be equal to open time unless both open and close times are mid-night.</li><li>[WFF-190007] - Cannot have more than one hours of operation on the same day.</li><li>[WFF-190018] - An {entityName} with the same name: {name} already exists.</li><li>[WFF-190024] - StartDate for one effective version of Hours of operation should be Beginning of Time.</li><li>[WFF-190025] - One or more effective versions conflicts with another effective version. StartDate for effective version should be unique.</li><li>[WFF-190028] - You cannot save Regular Hours of Operation because open-close time period for {dayOfWeek} overlaps open-close time period for {overlappingDayOfWeek}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/commons/hours_operation/multi_create": {
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Creates one or more Hours of Operation objects.",
        "description": "<p>This operation creates one or more Hours of Operation objects with effective versions.</p><br /><p>The associated Access Control Point is WFF_CREATE_REGULAR_HOURS.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of hours of operation that can be processed in a single request.</p><ul><li>The <strong>Number of Hours of Operation</strong> cannot exceed 1,000.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Create Multiple Hours of Operation",
        "requestBody": {
          "description": "The Create Multiple Hours of Operation request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HoursOfOperationWithVersions"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationWithVersions"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul> <li>[WCO-127701] - The following collection cannot be empty: {listName}.</li> <li>[WCO-127702] - You must specify the following parameter: {paramName}.</li> <li>[WCO-127703] - The following parameter must be null: {paramName}.</li> <li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li> <li>[WCO-127706] - The following object reference is invalid: {refName}.</li> <li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li> <li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> <li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li> <li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li> <li>[WCO-127712] - Request body is missing. Specify request parameters.</li> <li>[WFF-190007] - Cannot have more than one hours of operation on the same day.</li> <li>[WFF-190018] - An {entityName} with the same name: {name} already exists.</li> <li>[WFF-190025] - One or more effective versions conflicts with another effective version. StartDate for effective version should be unique.</li> <li>[WFF-190028] - You cannot save Regular Hours of Operation because open-close time period for {dayOfWeek} overlaps open-close time period for {overlappingDayOfWeek}.</li> </ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          },
          "413": {
            "description": "[WCO-127718] - The specified number of Regular Hours of Operation exceeds the limit. Actual: {actualNumber}. Limit: {maxNumber}.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/commons/hours_operation/multi_delete": {
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Deletes one or more Hours of Operation objects.",
        "description": "<p>This operation deletes one or more Hours of Operation objects.</p><br /><p>The associated Access Control Point is WFF_CREATE_REGULAR_HOURS.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of hours of operation that can be processed in a single request.</p><ul><li>The <strong>Number of Hours of Operation</strong> cannot exceed 1,000.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Delete Multiple Hours of Operation",
        "requestBody": {
          "description": "The Delete Multiple Hours of Operation request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EffectiveHoursOfOperationMultiDeleteContext"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content.",
            "content": {}
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127716] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li><li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li><li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.",
            "content": {}
          },
          "413": {
            "description": "[WCO-127718] - The specified number of Regular Hours of Operation exceeds the limit. Actual: {actualNumber}. Limit: {maxNumber}.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/commons/hours_operation/multi_read": {
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Returns Hours of Operation with effective versions.",
        "description": "<p>This operation returns one or more Hours of Operation with effective versions by object references.</p><br /><p>The associated Access Control Point is WFF_CREATE_REGULAR_HOURS.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of hours of operation that can be processed in a single request.</p><ul><li>The <strong>Number of Hours of Operation</strong> cannot exceed 1,000.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Retrieve Multiple Hours of Operation",
        "requestBody": {
          "description": "The Retrieve Multiple Hours of Operation request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EffectiveHoursOfOperationMultiReadContext"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationWithVersions"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li><li>[WCO-127716] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "[WFP-90012] - User does not have access to Create Regular Hours with action VIEW.",
            "content": {}
          },
          "413": {
            "description": "[WCO-127718] - The specified number of Regular Hours of Operation exceeds the limit. Actual: {actualNumber}. Limit: {maxNumber}.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/commons/hours_operation/multi_update": {
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Updates one or more Hours of Operation objects.",
        "description": "<p>This operation updates one or more Hours of Operation objects with effective versions.</p><br /><p>The associated Access Control Point is WFF_CREATE_REGULAR_HOURS.</p><br /><h2>Service limit</h2><p>A service limit constrains the number of hours of operation that can be processed in a single request.</p><ul><li>The <strong>Number of Hours of Operation</strong> cannot exceed 1,000.</li></ul><p>Refer to the <strong>Docs > Service Limits</strong> topic for more information.</p>",
        "operationId": "Update Multiple Hours of Operation",
        "requestBody": {
          "description": "The Update Multiple Hours of Operation request payload.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/HoursOfOperationWithVersions"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HoursOfOperationWithVersions"
                  }
                }
              }
            }
          },
          "207": {
            "description": "[WCO-127713] - Completed with error(s). Detailed errors should be wrapped within this exception.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResponseForRest"
                }
              }
            }
          },
          "400": {
            "description": "<ul> <li>[WCO-127701] - The following collection cannot be empty: {listName}.</li> <li>[WCO-127702] - You must specify the following parameter: {paramName}.</li> <li>[WCO-127703] - The following parameter must be null: {paramName}.</li> <li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li> <li>[WCO-127706] - The following object reference is invalid: {refName}.</li> <li>[WCO-127707] - Entity or entities not found. Type: {object}. Name or names or ID or IDs: {qualifier/id}.</li> <li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li> <li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li> <li>[WCO-127710] - The following reference list cannot be empty: {paramName}.</li> <li>[WCO-127711] - At least one of the following parameters is mandatory: {paramNames}.</li> <li>[WCO-127712] - Request body is missing. Specify request parameters.</li> <li>[WCO-127716] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li> <li>[WFF-190007] - Cannot have more than one hours of operation on the same day.</li> <li>[WFF-190018] - An {entityName} with the same name: {name} already exists.</li> <li>[WFF-190025] - One or more effective versions conflicts with another effective version. StartDate for effective version should be unique.</li> <li>[WFF-190028] - You cannot save Regular Hours of Operation because open-close time period for {dayOfWeek} overlaps open-close time period for {overlappingDayOfWeek}.</li> </ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li><li>[WFF-270054] - The user is not authorized to edit following parameter. Parameter: unrestrictedEdit.</li></ul>",
            "content": {}
          },
          "409": {
            "description": "[WFF-190019] - The {entityName} {name} has already been updated/deleted by some other user. It cannot be updated.",
            "content": {}
          },
          "413": {
            "description": "[WCO-127718] - The specified number of Regular Hours of Operation exceeds the limit. Actual: {actualNumber}. Limit: {maxNumber}.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/commons/hours_operation/versions/apply_delete": {
      "post": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Deletes an Hours of Operation effective version.",
        "description": "<p>This operation deletes an Hours of Operation effective version by ID and effective date.</p><br /><p>The associated Access Control Point is WFF_CREATE_REGULAR_HOURS.</p>",
        "operationId": "Delete Hours of Operation Effective Version",
        "requestBody": {
          "description": "The Delete Hours of Operation Effective Version request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EffectiveHoursOfOperationDeleteWrapper"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoursOfOperationWithVersions"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127712] - Request body is missing. Specify request parameters.</li><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127707] - Entity or entities not found. Type: Hours of Operation. Name or names or ID or IDs: {qualifier/id}.</li><li>[WFF-190026] - The Beginning of Time version cannot be deleted.</li><li>[WFF-190027] - You cannot delete effective version {effectiveSpan} because it exists in the past.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v2/commons/hours_operation/{id}": {
      "get": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Returns an Hours of Operation object.",
        "description": "<p>This operation returns an Hours of Operation object with effective versions by ID.</p><br /><p>The associated Access Control Point is WFF_CREATE_REGULAR_HOURS.</p>",
        "operationId": "Retrieve Hours of Operation by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an Hours of Operation object.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoursOfOperationWithVersions"
                }
              }
            }
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action VIEW.</li></ul>",
            "content": {}
          },
          "404": {
            "description": "<ul><li>[WCO-127716] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li></ul>",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Updates an Hours of Operation object.",
        "description": "<p>This operation updates an Hours of Operation object with effective versions by ID.</p><br /><p>The associated Access Control Point is WFF_CREATE_REGULAR_HOURS.</p>",
        "operationId": "Update Hours of Operation by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an Hours of Operation object.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The Update Hours of Operation by ID request payload.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HoursOfOperationWithVersions"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoursOfOperationWithVersions"
                }
              }
            }
          },
          "400": {
            "description": "<ul><li>[WCO-127701] - The following collection cannot be empty: {listName}.</li><li>[WCO-127702] - You must specify the following parameter: {paramName}.</li><li>[WCO-127703] - The following parameter must be null: {paramName}.</li><li>[WCO-127704] - Invalid Date range. Start: {startDate} - End: {endDate}.</li><li>[WCO-127705] - ID from path does not match ID from request payload.</li><li>[WCO-127706] - The following object reference is invalid: {refName}.</li><li>[WCO-127708] - The following parameter cannot be empty: {paramName}.</li><li>[WCO-127709] - Your request includes two or more of the following parameters: ids, qualifiers, refs. These parameters are mutually exclusive.</li><li>[WCO-127712] - Request body is missing. Specify request parameters.</li><li>[WFF-190003] - The given close time is equal to open time. The close time can not be equal to open time unless both open and close times are mid-night.</li><li>[WFF-190007] - Cannot have more than one hours of operation on the same day.</li><li>[WFF-190018] - An {entityName} with the same name: {name} already exists.</li><li>[WFF-190025] - One or more effective versions conflicts with another effective version. StartDate for effective version should be unique.</li><li>[WFF-190028] - You cannot save Regular Hours of Operation because open-close time period for {dayOfWeek} overlaps open-close time period for {overlappingDayOfWeek}.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li><li>[WFF-270054] - The user is not authorized to edit following parameter. Parameter: unrestrictedEdit.</li></ul>",
            "content": {}
          },
          "404": {
            "description": "<ul><li>[WCO-127716] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li></ul>",
            "content": {}
          },
          "409": {
            "description": "[WFF-190019] - The {entityName} {name} has already been updated/deleted by some other user. It cannot be updated.",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "Hours of Operation"
        ],
        "summary": "Deletes an Hours of Operation object.",
        "description": "<p>This operation deletes an Hours of Operation object by ID.</p><br /><p>The associated Access Control Point is WFF_CREATE_REGULAR_HOURS.</p>",
        "operationId": "Delete Hours of Operation by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique ID of an Hours of Operation object.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success.",
            "content": {}
          },
          "400": {
            "description": "<ul><li>[WFF-190020] - The selected {entityName} is assigned.</li></ul>",
            "content": {}
          },
          "403": {
            "description": "<ul><li>[WFP-90012] - User does not have access to Create Regular Hours with action EDIT.</li></ul>",
            "content": {}
          },
          "404": {
            "description": "<ul><li>[WCO-127716] - Entity not found. Type: {object}. Name or ID: {qualifier/id}.</li></ul>",
            "content": {}
          }
        }
      }
    },
    "/v2/commons/notifications": {
      "get": {
        "tags": [
          "Messaging Notifications"
        ],
        "summary": "Returns a list of notifications for the logged-in user.",
        "description": "<p>This operation returns a list of all new or reviewed notifications according to the access privileges of the logged-in user. Notifications are further filtered according to the provided category for the selected timeframe or based on the person IDs contained in the specified Hyperfind.</p><br /><p>The associated Access Control Point is NOTIFICATION_API_V2.</p>",
        "operationId": "Retrieve Notifications",
        "parameters": [
          {
            "name": "category",
            "in": "query",
            "description": "The name of a category.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "The acknowledgement status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hfId",
            "in": "query",
            "description": "The ID of a particular Hyperfind.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The start date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The end date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "all_employees",
            "in": "query",
            "description": "A Boolean indicator of whether or not to return all employees to which the currently logged-in user has access.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "max_results",
            "in": "query",
            "description": "The maximum number of requests that the caller wants in the response.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "start_date_time",
            "in": "query",
            "description": "The start date/time of a date range in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddTHH:MM:SS).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "end_date_time",
            "in": "query",
            "description": "The end date/time of a date range in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddTHH:MM:SS).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "start_sequence_number",
            "in": "query",
            "description": "The lowest sequence number to be retrieved in the query.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "end_sequence_number",
            "in": "query",
            "description": "The highest sequence number to be retrieved in the query.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number within the data set that the caller wishes to fetch.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "types",
            "in": "query",
            "description": "A comma-separated list of types by which to filter the results.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "request_tag",
            "in": "query",
            "description": "The pointer to the cached data set from the original query.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of list of notifications for the logged in user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification Response"
                }
              }
            }
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notifications could not be loaded. Try again.",
            "content": {}
          }
        }
      }
    },
    "/v2/commons/notifications/cache/{cacheKey}": {
      "delete": {
        "tags": [
          "Messaging Notifications"
        ],
        "summary": "Deletes cached notifications.",
        "description": "<p>This operation deletes a list of cached notifications associated with the provided cache key from Redis.</p><br /><p>The associated Access Control Point is NOTIFICATION_API_V2.</p>",
        "operationId": "Delete Notifications by Cache Key",
        "parameters": [
          {
            "name": "cacheKey",
            "in": "path",
            "description": "A key associated with a set of cached notifications.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notifications successfully deleted for the logged-in user.",
            "content": {}
          },
          "400": {
            "description": "[CONTROL_CENTER-10001]-Notifications cache could not be deleted.",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Access Control Point": {
        "required": [
          "id",
          "key",
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of an access control point."
          },
          "id": {
            "type": "integer",
            "description": "The ID of an access control point.",
            "format": "int32"
          },
          "key": {
            "type": "string",
            "description": "The key of an access control point."
          },
          "name": {
            "type": "string",
            "description": "The name of an access control point."
          },
          "permissionType": {
            "type": "array",
            "description": "The permission associated with an access control point.",
            "items": {
              "$ref": "#/components/schemas/Permission Type"
            }
          },
          "subControlPoints": {
            "type": "array",
            "description": "The subcontrol points of an access control point.",
            "items": {
              "$ref": "#/components/schemas/Access Control Point"
            }
          }
        },
        "description": "Access Control Point model."
      },
      "Access Method Profile": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "accessMethodConditions": {
            "type": "array",
            "description": "An array of access method conditions.",
            "items": {
              "$ref": "#/components/schemas/Access Method Condition"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of an access method profile."
          },
          "displayDescription": {
            "type": "string",
            "description": "The displayed description of an access method profile."
          },
          "displayName": {
            "type": "string",
            "description": "The displayed name of an access method profile."
          },
          "id": {
            "type": "integer",
            "description": "The ID of an access method profile.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of an access method profile."
          }
        },
        "description": "The Access Method Profile object model."
      },
      "AccessMethodDetails": {
        "type": "object",
        "properties": {
          "accessMethodType": {
            "type": "string"
          },
          "accessMethodValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        }
      },
      "MultiOperationRequest": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/MultiOperationWhere"
          }
        }
      },
      "AveragePayRateSet": {
        "required": [
          "defaultRates",
          "location"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an average pay rate set is active."
          },
          "defaultRates": {
            "type": "array",
            "description": "The default rates of an average pay rate set.",
            "items": {
              "$ref": "#/components/schemas/AveragePayRate"
            }
          },
          "deptRates": {
            "type": "array",
            "description": "The department rates of an average pay rate set.",
            "items": {
              "$ref": "#/components/schemas/AveragePayRate"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of an average pay rate set."
          },
          "effectiveDate": {
            "type": "string",
            "description": "The effective date of an average pay rate set.",
            "format": "date"
          },
          "id": {
            "type": "integer",
            "description": "The ID of an average pay rate set.",
            "format": "int64"
          },
          "jobRates": {
            "type": "array",
            "description": "The job rates of an average pay rate set.",
            "items": {
              "$ref": "#/components/schemas/AveragePayRate"
            }
          },
          "location": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "name": {
            "type": "string",
            "description": "The name of an average pay rate set."
          },
          "version": {
            "type": "integer",
            "description": "The version of an average pay rate set.",
            "format": "int64"
          }
        },
        "description": "Model context for an average pay rate set."
      },
      "AverageReadContext": {
        "required": [
          "effectiveDate",
          "location"
        ],
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "description": "The effective date of an average read context in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "location": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        },
        "description": "Model context for an average read context."
      },
      "AvgPayRateResponse": {
        "required": [
          "details",
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/AvgPayRateResponseDetailsObject"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code associated with an average pay rate response."
          },
          "message": {
            "type": "string",
            "description": "The message associated with an average pay rate response."
          }
        },
        "description": "Model describing the average pay rate response."
      },
      "AveragePayRateSets": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/AveragePayRateSetWhere"
          }
        },
        "description": "Model context for an average pay rate set references."
      },
      "AveragePayRate": {
        "required": [
          "effectiveDate",
          "rate"
        ],
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "description": "The effective date of an average pay rate in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "The end date of an average pay rate in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "location": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "rate": {
            "type": "number",
            "description": "The rate of an average pay rate."
          }
        },
        "description": "Model context for an average pay rate."
      },
      "Comment": {
        "required": [
          "categories"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a Comment is active. The default value is TRUE."
          },
          "categories": {
            "type": "array",
            "description": "A list of the categories assigned to a Comment. At least one category is required when creating a new Comment.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "codeNumber": {
            "type": "integer",
            "description": "The code number of a Comment.",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a Comment.",
            "format": "int64"
          },
          "text": {
            "type": "string",
            "description": "The text of a Comment. The text of each Comment can have up to 256 characters and must be unique. You cannot use reserved characters."
          }
        },
        "description": "Information necessary for using Comments."
      },
      "Control Center Profile JSON": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "description": "A list of categories in a Control Center profile.",
            "items": {
              "$ref": "#/components/schemas/Control Center Category JSON"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of a Control Center profile."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a Control Center profile.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a Control Center profile."
          }
        },
        "description": "Control Center Profile",
        "xml": {
          "name": "profile"
        }
      },
      "MultiReadRequest": {
        "type": "object",
        "properties": {
          "exclusiveObjectRefList": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "where": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        },
        "description": "Model for Locale Policy multi-read requests."
      },
      "Cost Center Model": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of a cost center."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a cost center.",
            "format": "int64"
          },
          "inactive": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a cost center is inactive."
          },
          "ivrNum": {
            "type": "string",
            "description": "The TeleTime IP alias."
          },
          "name": {
            "type": "string",
            "description": "The name of a cost center."
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of a cost center."
          },
          "version": {
            "type": "integer",
            "description": "The current version of the entity. This is used to ensure that an entity is not updated with stale data.",
            "format": "int64"
          }
        },
        "description": "Entity containing necessary data to fetch and update a cost center."
      },
      "costCenterPaginationSortFilterRestParameters": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The pagination count, which represents the number of entities to return per page. This parameter has no upper limit.",
            "format": "int32"
          },
          "index": {
            "type": "integer",
            "description": "The pagination index, which represents the particular page of entities to return in the response.",
            "format": "int32"
          },
          "sortBy": {
            "$ref": "#/components/schemas/costCenterSortCriteria"
          },
          "where": {
            "$ref": "#/components/schemas/costCenterWhereCondition"
          }
        },
        "description": "Entity containing parameters for sorting, filtering and selected page"
      },
      "Pagination Response for Cost Centers": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "description": "The collection of entries for one page.",
            "items": {
              "$ref": "#/components/schemas/Cost Center Model"
            }
          },
          "totalRecords": {
            "type": "integer",
            "description": "The total count of entries which match the filter.",
            "format": "int32"
          }
        },
        "description": "Model describing the details of pagination response of a work unit Hyperfind Profile."
      },
      "Labor Category Object Reference Setup Model": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a labor category object reference.",
            "format": "int64"
          },
          "ivrNum": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of a labor category object reference."
          },
          "qualifier": {
            "type": "string",
            "description": "The name of a labor category object reference."
          },
          "resolvedByWildcard": {
            "type": "boolean"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "An entity representing a reference to an entity in the Labor Category domain."
      },
      "CostCenterSearchCriteria": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/CostCenterWhereCriteria"
          }
        }
      },
      "Custom Tile Resource": {
        "required": [
          "configuration",
          "labels",
          "name"
        ],
        "type": "object",
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/Custom Tile Configuration"
          },
          "height": {
            "type": "string",
            "description": "The height of the custom tile. Valid values include: SHORT, MEDIUM, and TALL."
          },
          "id": {
            "type": "integer",
            "description": "The ID of the custom tile.",
            "format": "int64"
          },
          "labels": {
            "type": "array",
            "description": "The list of labels in differnt locales used as tile headers.",
            "items": {
              "$ref": "#/components/schemas/Custom Tile Labels"
            }
          },
          "licenses": {
            "type": "array",
            "description": "A list of the license building blocks required to control tile access.",
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of the custom tile."
          },
          "permissions": {
            "type": "array",
            "description": "A list of the access control points required to control tile access.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Custom tile contains the set of properties which are required for creating a custom tile."
      },
      "Custom Tile Reference": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The name of a custom tile."
          },
          "name": {
            "type": "string",
            "description": "The name of a custom tile."
          }
        },
        "description": "Custom tile reference"
      },
      "DelegateProfileRecordDTO": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "description": "A list of delegate profile records.",
            "items": {
              "$ref": "#/components/schemas/DelegateProfileResponseDTO"
            }
          },
          "totalElements": {
            "type": "integer",
            "description": "A list of delegate profile records.",
            "format": "int32"
          }
        },
        "description": "Model containing information for a delegate profile record."
      },
      "DelegateProfileDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "delegates": {
            "type": "array",
            "description": "A list of delegates to add to a delegate profile.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of a delegate profile."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a delegate profile.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a delegate profile."
          }
        },
        "description": "Model containing information for a delegate profile detailed message."
      },
      "DelegateProfileResponseDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "delegates": {
            "type": "array",
            "description": "A list of delegates associated with a delegate profile.",
            "items": {
              "$ref": "#/components/schemas/DelegateDTO"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of a delegate profile."
          },
          "id": {
            "type": "integer",
            "description": "Id of delegate profile.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a delegate profile."
          }
        },
        "description": "Model containing information for a delegate profile."
      },
      "DelegateProfileApplyDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "addRefs": {
            "type": "array",
            "description": "A list of delegates to add to a delegate profile.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of a delegate profile."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a delegate profile.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a delegate profile."
          },
          "removeRefs": {
            "type": "array",
            "description": "A list of delegates to remove from a delegate profile.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        },
        "description": "Model containing information for a delegate profile detailed message."
      },
      "JobSummaryResponse": {
        "type": "object",
        "properties": {
          "completed": {
            "type": "string",
            "description": "The completed date of a download request."
          },
          "details": {
            "$ref": "#/components/schemas/JobSummaryDetails"
          },
          "executionKey": {
            "type": "integer",
            "description": "The request ID returned as response in location header of bulk download request.",
            "format": "int64"
          },
          "expiresAt": {
            "type": "string",
            "description": "The date and time a tracking ID representing a job expires in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss)."
          },
          "format": {
            "type": "string",
            "description": "The format of file containing summary details, such as csv."
          },
          "jobId": {
            "type": "integer",
            "description": "The request ID returned as response in location header of bulk download request.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The unique name of a download request. This name is appended to the output filename."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of a bulk download request."
          },
          "submitted": {
            "type": "string",
            "description": "The submitted date of a download request."
          },
          "type": {
            "type": "string",
            "description": "The type of a request, such as DATAVIEW."
          }
        }
      },
      "DelegateProfileJobStatus": {
        "type": "object",
        "properties": {
          "executionKey": {
            "type": "integer",
            "description": "The job ID returned in asynchronous operation's response.",
            "format": "int64"
          },
          "expiresAt": {
            "type": "string",
            "description": "The date and time a submitted Job expires in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss)."
          },
          "message": {
            "type": "string",
            "description": "The detailed description of the status of a request, such as PENDING, FAILED and SUCCESSFUL."
          },
          "nextPing": {
            "type": "string",
            "description": "The time duration in seconds of the next status call ping of an in-progress Job."
          },
          "status": {
            "type": "string",
            "description": "The status of a delegate profile asynchronous request job."
          }
        },
        "description": "The Retrieve Summary of Asynchronous Delegate Profile Jobs response model."
      },
      "Device Group Model": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of a device group.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a device group."
          }
        },
        "description": "Entity containing the necessary data to fetch a device group."
      },
      "Display Profile Setup Model": {
        "required": [
          "description",
          "homePage",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "alertProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "controlCenterProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "dataViewProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "defaultProfile": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not this model is the default display profile."
          },
          "description": {
            "type": "string",
            "description": "A description of the display profile."
          },
          "displayDayDurationInHours": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to display day duration in hours. If false, day duration is displayed in minutes."
          },
          "displayDurationInHours": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not duration is displayed in hours. If false, duration is displayed in decimal form."
          },
          "displayLocationQueries": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to display location queries."
          },
          "displayShiftLabels": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a shift's start and stop times are displayed. If false, shift labels are displayed."
          },
          "employeeHourlyTimecardSetting": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "employeeProjectTimecardSetting": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "employeeSummaryTimeframe": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "employeeTransferDisplayProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "essCalendarProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "exceptionTile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "forecastPlannerProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "hidePunchTileMobile": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to hide the punch tile on mobile devices."
          },
          "homePage": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "hyperfindProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "id": {
            "type": "integer",
            "description": "The ID of a display profile.",
            "format": "int64"
          },
          "managerGlanceDataviewSetting": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "managerGlanceTimecardSetting": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "managerHourlyTimecardSetting": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "managerProjectTimecardSetting": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "managerTimecardsTimeframe": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "managerTransferDisplayProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "name": {
            "type": "string",
            "description": "The name of a display profile."
          },
          "peopleInformationProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "schedulePeriod": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "schedulePlannerProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "staffingProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "timecardMenuSelection": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "workUnitHyperfindProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "workloadPlannerProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        },
        "description": "Display Profile model."
      },
      "APIExceptionDetailResult": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/APIException"
          },
          "success": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "ObjectRefList": {
        "type": "object",
        "properties": {
          "ids": {
            "uniqueItems": true,
            "type": "array",
            "description": "The list of references by ID.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "qualifiers": {
            "uniqueItems": true,
            "type": "array",
            "description": "The qualifier of the object reference, such as name.",
            "items": {
              "type": "string"
            }
          },
          "refs": {
            "type": "array",
            "description": "The object references.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        },
        "description": "Model describing a collection of object references."
      },
      "ObjectRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID associated with an object reference.",
            "format": "int64",
            "readOnly": true
          },
          "qualifier": {
            "type": "string",
            "description": "The qualifier associated with an object reference.",
            "readOnly": true
          }
        },
        "description": "The HCA object reference object model."
      },
      "Employee Group Model": {
        "type": "object",
        "properties": {
          "costCenterPattern": {
            "type": "string",
            "description": "The cost center pattern."
          },
          "id": {
            "type": "integer",
            "description": "The ID of an employee group.",
            "format": "int64"
          },
          "laborCategoryProfileRef": {
            "$ref": "#/components/schemas/EmployeeGroupObjectRef"
          },
          "name": {
            "type": "string",
            "description": "The name of an employee group."
          },
          "orgMapGroupRef": {
            "$ref": "#/components/schemas/EmployeeGroupObjectRef"
          },
          "persistentId": {
            "type": "string",
            "description": "The persistent ID of the employee group."
          },
          "updateDtm": {
            "type": "string",
            "description": "The date and time the object was last updated."
          },
          "version": {
            "type": "integer",
            "description": "The current version of the entity. This parameter ensures an entity is not updated with stale data.",
            "format": "int64"
          }
        },
        "description": "Entity containing necessary data to fetch and update an employee group."
      },
      "Multi Read Request for employee Groups": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/Multi Read Criteria for employee groups fetching"
          }
        },
        "description": "The Retrieve Employee Groups request payload's where model."
      },
      "DomainEventCategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of a domain event category.",
            "format": "int64"
          },
          "label": {
            "type": "string",
            "description": "The label of a domain event category."
          },
          "name": {
            "type": "string",
            "description": "The name of a domain event category."
          },
          "removeDuplicate": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to remove duplicates for a domain event category."
          }
        },
        "description": "This resource allows you to create, retrieve, and update domain event categories, which consist of system messages, leaves of absence, Timekeeping, myrequest, and so on."
      },
      "WhereEntityReference": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/DomainEventEntityReference"
          }
        }
      },
      "DomainEventNavigation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of a domain event navigation.",
            "format": "int64"
          },
          "label": {
            "type": "string",
            "description": "The label of a domain event navigation."
          },
          "name": {
            "type": "string",
            "description": "The name of a domain event navigation."
          },
          "navigationType": {
            "type": "string"
          },
          "navigationUrl": {
            "type": "string"
          }
        },
        "description": "This resource provides a set of operations that allow you to retrieve and manipulate domain event navigations."
      },
      "DoaminEventNotification Mapping": {
        "required": [
          "domainEvent",
          "id",
          "name",
          "navigation",
          "notification"
        ],
        "type": "object",
        "properties": {
          "domainEvent": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "iconClass": {
            "type": "string",
            "description": "The icon class associated with a domain event notification.",
            "enum": [
              "icon-k-timekeeping, icon-k-activity-time, icon-k-schedule, icon-k-schedule-engines, icon-k-holiday, icon-k-org-normal, icon-k-view-schedule-outline, icon-k-enter-time-off, icon-k-add-paycode, icon-k-calendar-request, icon-k-ess-request, icon-k-open-shift-not-filled, icon-k-open-shift-period-opens, icon-k-open-shift-visibility-open, icon-k-single-home-empresover, icon-k-time-categories, icon-k-tax-withholding, icon-k-timeoff-request-period-open, icon-k-wfa_ee_leave, icon-k-case-notifications, icon-k-accrual-amount-pattern, icon-k-menu-punch, icon-k-add-punch, icon-k-override-timestamp, icon-k-leave,icon-k-quick-actions-swap, icon-k-hm-manage-open-shifts"
            ]
          },
          "id": {
            "type": "integer",
            "description": "The ID of a domain event notification.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "The name of a domain event notification."
          },
          "navigation": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "notification": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "systemEvent": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a domain event notification represents a system event."
          }
        },
        "description": "The Domain Event Notification model."
      },
      "Notif DomainEvent Request": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/Domain Event Mapping Where Object"
          }
        },
        "description": "The Domain Event Request for bulk operations model."
      },
      "External Notification Message": {
        "required": [
          "domain",
          "event",
          "externalID"
        ],
        "type": "object",
        "properties": {
          "additionalEmailAddresses": {
            "type": "array",
            "description": "Additional receipient email addresses to which a notification is sent.",
            "items": {
              "type": "string"
            }
          },
          "creationDate": {
            "type": "string",
            "description": "The date and time a notification is created in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss). This is an optional field with default being the current system time."
          },
          "domain": {
            "type": "string",
            "description": "The domain which generated the event."
          },
          "employee": {
            "$ref": "#/components/schemas/External Notification Message"
          },
          "event": {
            "type": "string",
            "description": "The event for which a notification is sent."
          },
          "eventData": {
            "type": "array",
            "description": "Each event has a separate set of event-specific data which can be sent in the form of customtag-value pairs. These customtag-value pairs can be used to create the subject and body of the notification by replacing the tags with the same name with the corresponsing values in the pre-configured templates for subject and body.",
            "items": {
              "$ref": "#/components/schemas/EventData"
            }
          },
          "externalID": {
            "type": "string",
            "description": "A unique identifier used to query a notification."
          },
          "hideEmployee": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not employee information is visible in the control center panel for this notification."
          },
          "recipient": {
            "$ref": "#/components/schemas/External Notification Message"
          },
          "reviewed": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to create the notification in the Reviewed state. This is an optional field that defaults to <code>false</code>."
          },
          "senderEmail": {
            "type": "string",
            "description": "The email address from which a notification is sent."
          },
          "skipMail": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to skip the email destination for a notification."
          }
        },
        "description": "Notification data for sending notifications for a given event.",
        "xml": {
          "name": "externalNotificationMessage"
        }
      },
      "Domain Event": {
        "required": [
          "category",
          "domain",
          "domainLabel",
          "eventLabel",
          "id",
          "name",
          "navigations"
        ],
        "type": "object",
        "properties": {
          "actions": {
            "uniqueItems": true,
            "type": "array",
            "description": "A list of actions associated with a domain event.",
            "items": {
              "$ref": "#/components/schemas/ControlCenterEventAction"
            }
          },
          "category": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "domain": {
            "$ref": "#/components/schemas/Domain DTO"
          },
          "domainLabel": {
            "type": "string",
            "description": "The domain label associated with a domain event."
          },
          "eventLabel": {
            "type": "string",
            "description": "The event label associated with a domain event."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a domain event.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The event name of a domain event."
          },
          "navigations": {
            "uniqueItems": true,
            "type": "array",
            "description": "A list of navigation values associated with a domain event.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        },
        "description": "The Domain Event model."
      },
      "Domain Event Request": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/Domain Event Where Object"
          }
        },
        "description": "The Domain Event Request for bulk operations model."
      },
      "DownloadRequest": {
        "type": "object",
        "properties": {
          "executionId": {
            "type": "integer",
            "description": "The execution ID of a download request.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The unique name of a download request. This name is appended to the output filename."
          },
          "payLoad": {
            "type": "object",
            "properties": {}
          },
          "type": {
            "type": "string",
            "description": "The type of a request, such as DATAVIEW."
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DownloadJobStatus": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/DownloadError"
          },
          "executionKey": {
            "type": "integer",
            "description": "The request ID returned as response in location header of bulk download request.",
            "format": "int64"
          },
          "expiresAt": {
            "type": "string",
            "description": "The date and time a submitted Job expires in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss)."
          },
          "message": {
            "type": "string",
            "description": "The detailed description of the status of a request, such as PENDING, FAILED, SUCCESSFUL, or PARTIAL."
          },
          "nextPing": {
            "type": "string",
            "description": "The time duration in seconds of the next status call ping of an in-progress Job."
          },
          "status": {
            "type": "string",
            "description": "Returns the status of a bulk download request."
          }
        }
      },
      "DeleteJobRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "The list of job IDs to delete.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "Response": {
        "type": "object",
        "properties": {
          "allowedMethods": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "cookies": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/NewCookie"
            }
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "entity": {
            "type": "object",
            "properties": {}
          },
          "entityTag": {
            "$ref": "#/components/schemas/EntityTag"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "language": {
            "$ref": "#/components/schemas/Locale"
          },
          "lastModified": {
            "type": "string",
            "format": "date-time"
          },
          "length": {
            "type": "integer",
            "format": "int32"
          },
          "links": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "location": {
            "type": "string",
            "format": "uri"
          },
          "mediaType": {
            "$ref": "#/components/schemas/MediaType"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "statusInfo": {
            "$ref": "#/components/schemas/StatusType"
          },
          "stringHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "Combination Feature Toggle Request": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/FeatureSwitchWhereRequest"
          }
        },
        "description": "The Feature Switch request model."
      },
      "WFCFeatureSwitch": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of a feature switch."
          },
          "enabled": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a feature switch is enabled."
          },
          "name": {
            "type": "string",
            "description": "The name of a feature switch."
          },
          "ref": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        },
        "description": "The Feature Switch model."
      },
      "FiscalYearDTO": {
        "type": "object",
        "properties": {
          "fiscalCalendar": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FiscalCalendarDTO"
            }
          },
          "fiscalYear": {
            "type": "string"
          }
        }
      },
      "FiscalYears": {
        "required": [
          "fiscal_years"
        ],
        "type": "object",
        "properties": {
          "fiscal_years": {
            "type": "array",
            "description": "list of fiscal years",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Model holding fiscal years for deletion."
      },
      "Function Access Profile": {
        "required": [
          "description",
          "id",
          "name",
          "permissionTypes"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of a function access profile."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a function access profile.",
            "format": "int64"
          },
          "isDefault": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a function access profile is the default."
          },
          "name": {
            "type": "string",
            "description": "The name of a function access profile."
          },
          "permissionTypes": {
            "type": "array",
            "description": "An array of Permissions Types objects.",
            "items": {
              "$ref": "#/components/schemas/Permissions Types"
            }
          }
        },
        "description": "Function Access Profile model."
      },
      "GenericDataAccessprofilesDTO": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "addItems": {
            "type": "array",
            "description": "The List of Setup Items which will be add in Generic Data Access Profiles.",
            "items": {
              "$ref": "#/components/schemas/DagItemDTO"
            }
          },
          "description": {
            "type": "string",
            "description": "The name of a Generic Data Access Profiles."
          },
          "id": {
            "type": "integer",
            "description": "The id of a Generic Data Access Profiles.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a Generic Data Access Profiles."
          },
          "removeItems": {
            "type": "array",
            "description": "The List of Setup Items which will be reoved in Generic Data Access Profiles.",
            "items": {
              "$ref": "#/components/schemas/DagItemDTO"
            }
          }
        },
        "description": "Model containing information for a Retrieve Generic Data Access Profiles."
      },
      "GenericDataAccessprofilesResponseDTO": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description returned in Generic Data Access Profiles response model."
          },
          "id": {
            "type": "integer",
            "description": "The id of a Generic Data Access Profiles.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a Generic Data Access Profiles."
          },
          "setupItems": {
            "type": "array",
            "description": "The Setup Items returned in Generic Data Access Profiles response model.",
            "items": {
              "$ref": "#/components/schemas/DagItemDTO"
            }
          }
        },
        "description": "The Retrieve of Generic Data Access Profiles response model."
      },
      "Generic Data Access Profiles": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/Generic Data Access Profiles"
          }
        },
        "description": "Generic Data Access Profiles request model."
      },
      "GdapAvailableItemsResponseDTO": {
        "type": "object",
        "properties": {
          "setupCategories": {
            "type": "array",
            "description": "SetupItem categories for the Generic Data Access Profiles.",
            "items": {
              "$ref": "#/components/schemas/SetupCategoryDTO"
            }
          }
        },
        "description": "Generic Data Access Profiles Available Item Response."
      },
      "Generic Notification": {
        "required": [
          "name",
          "notificationId",
          "priority",
          "resendTypes"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of a generic notification."
          },
          "emailRecipients": {
            "type": "string",
            "description": "The email recipients of a generic notification."
          },
          "labelTemplate1": {
            "type": "string",
            "description": "The Label Template 1 of a generic notification."
          },
          "labelTemplate2": {
            "type": "string",
            "description": "The Label Template 2 of a generic notification."
          },
          "labelTemplate3": {
            "type": "string",
            "description": "The Label Template 3 of a generic notification."
          },
          "labelTemplate4": {
            "type": "string",
            "description": "The Label Template 4 of a generic notification."
          },
          "labelTemplate5": {
            "type": "string",
            "description": "The Label Template 5 of a generic notification."
          },
          "longMessage": {
            "type": "string",
            "description": "The long message of a generic notification."
          },
          "name": {
            "type": "string",
            "description": "The name of a generic notification."
          },
          "notificationId": {
            "type": "integer",
            "description": "The ID of a generic notification.",
            "format": "int64"
          },
          "oneClickOnlyNavigation": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a generic notification uses one-click navigation."
          },
          "priority": {
            "type": "string",
            "description": "The priority of a generic notification.",
            "enum": [
              "Low,Medium,High"
            ]
          },
          "recipientListWillBeSuppliedAtRuntime": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not the recipient list is supplied at runtime."
          },
          "resendTime": {
            "type": "string",
            "description": "The resend time of a generic notification."
          },
          "resendTypes": {
            "type": "string",
            "description": "The resend types of a generic notification.",
            "enum": [
              "Resend each day,Resend every,Do not suppress duplicates"
            ]
          },
          "sendToEmployee": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to send a generic notification to employees."
          },
          "sendToEmployeesAttendanceAdministrator": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to send a generic notification to employees' Attendance administrator."
          },
          "sendToEmployeesLeaveAdministrator": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to send a generic notification to employees' Leave administrator."
          },
          "sendToEmployeesManager": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to send a generic notification to the employees' manager."
          },
          "shortMessage": {
            "type": "string",
            "description": "The short message of a generic notification."
          },
          "subject": {
            "type": "string",
            "description": "The subject of a generic notification."
          },
          "valueTemplate1": {
            "type": "string",
            "description": "The Value Template 1 of a generic notification."
          },
          "valueTemplate2": {
            "type": "string",
            "description": "The Value Template 2 of a generic notification."
          },
          "valueTemplate3": {
            "type": "string",
            "description": "The Value Template 3 of a generic notification."
          },
          "valueTemplate4": {
            "type": "string",
            "description": "The Value Template 4 of a generic notification."
          },
          "valueTemplate5": {
            "type": "string",
            "description": "The Value Template 5 of a generic notification."
          }
        },
        "description": "The Generic Notification model."
      },
      "GenericNotificationRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/GenericNotificationWhere"
          }
        },
        "description": "Generic Notification Request for bulk operations."
      },
      "HoursOfOperation": {
        "required": [
          "active",
          "description",
          "items",
          "name",
          "unrestrictedEdit"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an hours of operation object is active."
          },
          "description": {
            "type": "string",
            "description": "The description of an hours of operation object."
          },
          "id": {
            "type": "integer",
            "description": "The ID of an hours of operation object.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "A list of hours of operation items.",
            "items": {
              "$ref": "#/components/schemas/HoursOfOperationItem"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of an hours of operation object."
          },
          "unrestrictedEdit": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an unrestricted edit is associated with an hours of operation."
          },
          "version": {
            "type": "integer",
            "description": "The version of an hours of operation object.",
            "format": "int64"
          }
        },
        "description": "Context for an hours of operation."
      },
      "BatchResponseForRest": {
        "required": [
          "details",
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/BatchResponseDetailsForRest"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code associated with a batch response."
          },
          "message": {
            "type": "string",
            "description": "The message associated with a batch response."
          }
        },
        "description": "Model describing the batch response."
      },
      "HoursOfOperationRefs": {
        "required": [
          "hoursOfOperation"
        ],
        "type": "object",
        "properties": {
          "hoursOfOperation": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        },
        "description": "Context for Hours of Operation references."
      },
      "HoursOfOperationAssignment": {
        "required": [
          "dateSpan",
          "hoursOfOperation",
          "location"
        ],
        "type": "object",
        "properties": {
          "allowOverlappingOverride": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to replace the existing assignment of the Hours of Operation when the existing assignment overlaps with the date span provided in the request. Optional. True by default."
          },
          "dateSpan": {
            "$ref": "#/components/schemas/LocalDateSpan"
          },
          "hoursOfOperation": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "inherited": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not hours of operation is inherited."
          },
          "location": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        },
        "description": "The Hours Of Operation Assignment model."
      },
      "HoursOfOperationAssignmentMultiReadContext": {
        "required": [
          "effectiveDate",
          "locations"
        ],
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "description": "The date associated with locations in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "locations": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        },
        "description": "Request Context for searching Hours of Operation Assignments."
      },
      "HoursOfOperationOverride": {
        "required": [
          "active",
          "description",
          "id",
          "items",
          "name",
          "unrestrictedEdit",
          "version"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an hours of operation override object is active."
          },
          "description": {
            "type": "string",
            "description": "The description of an hours of operation override object."
          },
          "id": {
            "type": "integer",
            "description": "The ID of an hours of operation override object.",
            "format": "int64"
          },
          "items": {
            "type": "array",
            "description": "A list of hours of operation override items.",
            "items": {
              "$ref": "#/components/schemas/HoursOfOperationOverrideItem"
            }
          },
          "name": {
            "type": "string",
            "description": "The name of an hours of operation override object."
          },
          "unrestrictedEdit": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an unrestricted edit is associated with an hours of operation override."
          },
          "version": {
            "type": "integer",
            "description": "The version of an hours of operation override object.",
            "format": "int64"
          }
        },
        "description": "Context for an hours of operation override."
      },
      "HoursOfOperationOverrideRefs": {
        "required": [
          "hoursOfOperationOverride"
        ],
        "type": "object",
        "properties": {
          "hoursOfOperationOverride": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        },
        "description": "Context for hours of operation override references."
      },
      "HoursOfOperationOverrideAssignment": {
        "required": [
          "hoursOfOperationOverride",
          "location"
        ],
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "description": "The date associated with an effective-dated location object in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "hoursOfOperationOverride": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "isInherited": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an hours of operation override is inherited."
          },
          "location": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        },
        "description": "Model for Hours Of Operation Assignment."
      },
      "HoursOfOperationOverrideAssignmentSearchContext": {
        "required": [
          "effectiveDate",
          "locations"
        ],
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "description": "The date associated with locations in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "locations": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        },
        "description": "Request Context for searching Hours of Operation Override Assignments."
      },
      "KnownIP": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "endingIPRange": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "protocolVersion": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "sdmKey": {
            "type": "string",
            "format": "uuid"
          },
          "startingIPRange": {
            "type": "string"
          }
        }
      },
      "Notification": {
        "type": "object",
        "properties": {
          "body": {
            "type": "string",
            "description": "The localized message body of a notification message."
          },
          "category": {
            "type": "string",
            "description": "The category name to which a notification message belongs. This parameter is associated with the category of its associated event type."
          },
          "createDateMS": {
            "type": "integer",
            "description": "the time at which the notification record was inserted into the WFD database in Unix Time format (milliseconds since 1/1/70 12:00am GMT).",
            "format": "int64"
          },
          "creationDate": {
            "type": "string",
            "description": "The date on which a notification message was generated."
          },
          "creatorName": {
            "type": "string",
            "description": "The name of the person generating a notification."
          },
          "employeeId": {
            "type": "string",
            "description": "The reference ID of the employee for whom a notification message was generated. This parameter contains the reference ID of the creator of the notification message if it was not generated for an employee. This is not a person number."
          },
          "employeeJob": {
            "type": "string",
            "description": "The job of the employee for whom a notification message was generated."
          },
          "employeeLocation": {
            "type": "string",
            "description": "The location of the employee for whom a notification message was generated."
          },
          "employeeName": {
            "type": "string",
            "description": "The name of the employee for whom a notification message was generated. It contains the name of the creator of the notification message if it was not generated for an employee."
          },
          "employeeNumber": {
            "type": "string",
            "description": "The person number of the employee for whom a notification message was generated. This is not an employee ID."
          },
          "employeePhotoId": {
            "type": "string",
            "description": "The reference ID of the photograph of the employee for whom a notification message was generated."
          },
          "eventTypeId": {
            "type": "string",
            "description": "The reference ID of the event type associated with a notification message."
          },
          "expirationDate": {
            "type": "string",
            "description": "The date on which a notification message expires."
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of the destination page."
          },
          "externalURL": {
            "type": "string",
            "description": "The URL of the destination page external to the application linked from a notification."
          },
          "goldDataTypeId": {
            "type": "integer",
            "description": "An Integer indicator of whether or not an event is a legacy event.",
            "format": "int32"
          },
          "hideEmployee": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to hide an employee from notifications."
          },
          "iconclass": {
            "type": "string",
            "description": "The name of the CSS class of the icon displayed on the Control Center."
          },
          "index": {
            "type": "integer",
            "description": "The item's position in the overall result set.",
            "format": "int32"
          },
          "isGenericNotification": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not the notification is a generic notification."
          },
          "itemId": {
            "type": "string",
            "description": "The reference ID of the entity associated with the notification message. For example, the reference ID of the request associated with a request notification."
          },
          "labelTemplate1": {
            "type": "string",
            "description": "The label of a custom field configured in the generic notification."
          },
          "labelTemplate2": {
            "type": "string",
            "description": "The label of a custom field configured in the generic notification."
          },
          "labelTemplate3": {
            "type": "string",
            "description": "The label of a custom field configured in the generic notification."
          },
          "labelTemplate4": {
            "type": "string",
            "description": "The label of a custom field configured in the generic notification."
          },
          "labelTemplate5": {
            "type": "string",
            "description": "The label of a custom field configured in the generic notification."
          },
          "navigationContext": {
            "$ref": "#/components/schemas/Notification Context"
          },
          "navigationKey": {
            "type": "string",
            "description": "The name of a destination page linked from a notification."
          },
          "navigationType": {
            "type": "string",
            "description": "The navigation type of the destination page."
          },
          "navigationURL": {
            "type": "string",
            "description": "The URL of a destination page internal to the application linked from a notification."
          },
          "notificationActions": {
            "type": "array",
            "description": "The object containing a list of actions displayed with notifications.",
            "items": {
              "$ref": "#/components/schemas/actionDetails"
            }
          },
          "notificationName": {
            "type": "string",
            "description": "The name of a generic notification."
          },
          "priority": {
            "type": "string",
            "description": "The priority assigned to a notification message."
          },
          "receiverId": {
            "type": "integer",
            "description": "The id of the person that will receive the notification.",
            "format": "int64"
          },
          "reviewed": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a notification message has been acknowledged."
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "The sequence number of the record in the WFM database.",
            "format": "int32"
          },
          "shortMessage": {
            "type": "string",
            "description": "The localized SMS message body of a SMS notification."
          },
          "status": {
            "type": "string",
            "description": "The status of the entity associated with a notification message at the time the notification was generated."
          },
          "subject": {
            "type": "string",
            "description": "The localized subject of a notification message."
          },
          "todo": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a notification message has an associated action item or items."
          },
          "type": {
            "type": "string",
            "description": "The type of a notification message. This parameter contains the event type for generic notifications."
          },
          "typeLabel": {
            "type": "string",
            "description": "The localized type label of a notification message."
          },
          "urgent": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a notification message is urgent. The notification message is marked urgent if its priority is high."
          },
          "uuid": {
            "type": "string",
            "description": "The unique identifier for a notification message."
          },
          "valueTemplate1": {
            "type": "string",
            "description": "The value of a custom field configured in the generic notification."
          },
          "valueTemplate2": {
            "type": "string",
            "description": "The value of a custom field configured in the generic notification."
          },
          "valueTemplate3": {
            "type": "string",
            "description": "The value of a custom field configured in the generic notification."
          },
          "valueTemplate4": {
            "type": "string",
            "description": "The value of a custom field configured in the generic notification."
          },
          "valueTemplate5": {
            "type": "string",
            "description": "The value of a custom field configured in the generic notification."
          }
        },
        "description": "Notification details.",
        "xml": {
          "name": "notification"
        }
      },
      "ControlCenter Configuration": {
        "type": "object",
        "properties": {
          "accessPermission": {
            "type": "boolean",
            "description": "Defines Control Center access point permission for the logged-in user."
          },
          "categories": {
            "type": "array",
            "description": "A list of categories accessible to the logged-in user in Control Center. This list is determined by the Control Center Profile assigned to the user.",
            "items": {
              "$ref": "#/components/schemas/Generic Component"
            }
          },
          "myActionsAccessPermission": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to allow access to My Actions."
          },
          "paginationBatchSize": {
            "type": "string",
            "description": "The batch size of paginated notification retrieval requests. The batches are executed in parallel."
          },
          "useDefaultTimeframeFilter": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to control the default timeframe filter value in the control center page."
          }
        },
        "description": "Control center configuration data",
        "xml": {
          "name": "ControlCenter Configuration"
        }
      },
      "Generic request JSON": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "The category name to which the notification message belongs. The category name is associated with the category through the event type to which it belongs."
          },
          "externalIds": {
            "type": "array",
            "description": "An list of external IDs.",
            "items": {
              "type": "string"
            }
          },
          "interactive": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to review or delete notifications interactively."
          },
          "itemIds": {
            "type": "array",
            "description": "A list of reference IDs of the entity associated with the notification message. This is also the reference ID of the request for a request notification.",
            "items": {
              "type": "string"
            }
          },
          "messageIds": {
            "type": "array",
            "description": "A list of unique IDs for a notification message, such as UUIDs.",
            "items": {
              "type": "string"
            }
          },
          "personIds": {
            "type": "string",
            "description": "A list of reference IDs of persons."
          },
          "reviewForAll": {
            "type": "boolean",
            "description": "A deprecated Boolean that no longer performs any function."
          }
        },
        "description": "The Generic Request model.",
        "xml": {
          "name": "GenericRequest"
        }
      },
      "ExportRequest": {
        "type": "object",
        "properties": {
          "exportConfig": {
            "$ref": "#/components/schemas/ExportConfig"
          },
          "footers": {
            "type": "array",
            "description": "The payroll export footers.",
            "items": {
              "$ref": "#/components/schemas/Section"
            }
          },
          "headers": {
            "type": "array",
            "description": "The payroll export headers.",
            "items": {
              "$ref": "#/components/schemas/Section"
            }
          },
          "query": {
            "type": "string",
            "description": "The SQL query for the payroll export request.",
            "example": ""
          },
          "requestId": {
            "type": "string",
            "description": "The payroll export request ID.",
            "example": "requestId"
          }
        },
        "description": "The payroll export request model."
      },
      "PayrollExceptionResponse": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The error code associated with a payroll exception response.",
            "example": "PE-005007"
          },
          "message": {
            "type": "string",
            "description": "The message associated with a payroll exception response.",
            "example": "Tenant provisioning error"
          }
        },
        "description": "The payroll exception response model."
      },
      "ExportStatusListResponse": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "description": "The list of short version export status responses.",
            "items": {
              "$ref": "#/components/schemas/ExportStatusShortResponse"
            }
          },
          "totalElements": {
            "type": "integer",
            "description": "The total number of elements in the response.",
            "example": 4
          }
        },
        "description": "The export status list response model."
      },
      "ExportSubmitResponse": {
        "type": "object",
        "properties": {
          "executionKey": {
            "type": "string",
            "description": "The execution key of the export submit response.",
            "example": "1"
          },
          "expiresAt": {
            "type": "string",
            "description": "The expiration date and time of export submit response in ISO_LOCAL_DATE_TIME format (yyyy-MM-dd'T'HH:mm:ss.SSSXXX).",
            "example": "2000-10-31T01:30:00.000-05:00"
          },
          "message": {
            "type": "string",
            "description": "The message describing current status of export submit response.",
            "example": "Export request being processed"
          },
          "nextPing": {
            "type": "integer",
            "description": "The time ping interval.",
            "example": 1
          },
          "state": {
            "type": "string",
            "description": "The state of export submit response.",
            "enum": [
              "PENDING",
              "SUCCESSFUL",
              "FAILED"
            ]
          }
        },
        "description": "The export submit response model."
      },
      "ExportStatusResponse": {
        "type": "object",
        "properties": {
          "executionKey": {
            "type": "string",
            "description": "The execution key of an asynchronous payroll export job.",
            "example": "1"
          },
          "expiresAt": {
            "type": "string",
            "description": "The expiration date and time of an asynchronous export payroll job in ISO_LOCAL_DATE_TIME format (yyyy-MM-dd'T'HH:mm:ss.SSSXXX).",
            "example": "2000-10-31T01:30:00.000-05:00"
          },
          "message": {
            "type": "string",
            "description": "The message describing the current status of an asynchronous export payroll job.",
            "example": "message"
          },
          "nextPing": {
            "type": "integer",
            "description": "The interval between status pings (in seconds) of an asynchronous export payroll job.",
            "example": 1
          },
          "state": {
            "type": "string",
            "description": "The state of an asynchronous export payroll job.",
            "enum": [
              "PENDING",
              "SUCCESSFUL",
              "FAILED"
            ]
          }
        },
        "description": "The full export status response model."
      },
      "InvokeRequest": {
        "required": [
          "dateRange",
          "employees",
          "excludePayCodes",
          "executionId",
          "exportType",
          "historicalCorrections",
          "includePayCodes",
          "payCodeMappingTable",
          "processTerminatedEmployeesOnly",
          "where"
        ],
        "type": "object",
        "properties": {
          "customParameter1": {
            "type": "string",
            "description": "The first custom parameter."
          },
          "customParameter2": {
            "type": "string",
            "description": "The second custom parameter."
          },
          "dateRange": {
            "$ref": "#/components/schemas/DateRange"
          },
          "employees": {
            "$ref": "#/components/schemas/Employees"
          },
          "excludePayCodes": {
            "type": "array",
            "description": "A reference to the exclude pay codes.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "executionId": {
            "type": "string",
            "description": "The execution ID of a payroll staging request."
          },
          "exportType": {
            "type": "string",
            "description": "The export type.",
            "enum": [
              "Payroll,Accrual,Both"
            ]
          },
          "historicalCorrections": {
            "type": "string",
            "description": "A property that determines how to handle historical corrections.",
            "enum": [
              "Included in totals,Excluded in totals,Correction only"
            ]
          },
          "ignoreSignOff": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to ignore sign off."
          },
          "includePayCodes": {
            "type": "array",
            "description": "A reference to the include pay codes.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "payCodeMappingTable": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "processBasedOn": {
            "$ref": "#/components/schemas/ProcessBasedOnDTO"
          },
          "processTerminatedEmployeesOnly": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to only process terminated employees."
          },
          "where": {
            "$ref": "#/components/schemas/EmployeeFilter"
          }
        },
        "description": "The payroll staging request model."
      },
      "AsyncResponse": {
        "required": [
          "message",
          "nextPing",
          "requestId",
          "status"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message"
          },
          "nextPing": {
            "type": "integer",
            "description": "Next ping",
            "format": "int64"
          },
          "requestId": {
            "type": "string",
            "description": "Request ID"
          },
          "status": {
            "type": "string",
            "description": "Status of request"
          }
        },
        "description": "Model for async response sent back for invoking request"
      },
      "APIException": {
        "type": "object",
        "properties": {
          "argsDetail": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "cause": {
            "$ref": "#/components/schemas/Throwable"
          },
          "errorCode": {
            "type": "string"
          },
          "errorsDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "extraDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "inputDetail": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "limitsDetail": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "localizedMessage": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "properties": {}
          },
          "multiOpsResults": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "overridable": {
            "type": "boolean"
          },
          "overrideHTTPStatusCode": {
            "type": "string",
            "enum": [
              "OK",
              "CREATED",
              "ACCEPTED",
              "NO_CONTENT",
              "RESET_CONTENT",
              "PARTIAL_CONTENT",
              "MOVED_PERMANENTLY",
              "FOUND",
              "SEE_OTHER",
              "NOT_MODIFIED",
              "USE_PROXY",
              "TEMPORARY_REDIRECT",
              "BAD_REQUEST",
              "UNAUTHORIZED",
              "PAYMENT_REQUIRED",
              "FORBIDDEN",
              "NOT_FOUND",
              "METHOD_NOT_ALLOWED",
              "NOT_ACCEPTABLE",
              "PROXY_AUTHENTICATION_REQUIRED",
              "REQUEST_TIMEOUT",
              "CONFLICT",
              "GONE",
              "LENGTH_REQUIRED",
              "PRECONDITION_FAILED",
              "REQUEST_ENTITY_TOO_LARGE",
              "REQUEST_URI_TOO_LONG",
              "UNSUPPORTED_MEDIA_TYPE",
              "REQUESTED_RANGE_NOT_SATISFIABLE",
              "EXPECTATION_FAILED",
              "INTERNAL_SERVER_ERROR",
              "NOT_IMPLEMENTED",
              "BAD_GATEWAY",
              "SERVICE_UNAVAILABLE",
              "GATEWAY_TIMEOUT",
              "HTTP_VERSION_NOT_SUPPORTED"
            ]
          },
          "overrideMessage": {
            "type": "string"
          },
          "reportingAttribute": {
            "type": "string"
          },
          "reportingValue": {
            "type": "string"
          },
          "results": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StackTraceElement"
            }
          },
          "suppressed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Throwable"
            }
          },
          "userParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "payrollstagingdetailsdetails": {
        "required": [
          "errorOffsets",
          "results"
        ],
        "type": "object",
        "properties": {
          "errorOffsets": {
            "type": "array",
            "description": "The error offsets associated with a payroll extraction details request.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "results": {
            "$ref": "#/components/schemas/payrollstagingdetailsresults"
          }
        },
        "description": "The payroll extraction staging details response model."
      },
      "payrollstagingresponse": {
        "required": [
          "message",
          "nextPing",
          "requestId",
          "status"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message"
          },
          "nextPing": {
            "type": "integer",
            "description": "Next ping",
            "format": "int64"
          },
          "requestId": {
            "type": "string",
            "description": "Request Id"
          },
          "status": {
            "type": "string",
            "description": "Status"
          }
        },
        "description": "Model of response sent back for staging status request"
      },
      "TableListResponse": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "description": "An array of table references, including <code>name</code> and <code>type</code>.",
            "items": {
              "$ref": "#/components/schemas/TableShortInfo"
            }
          },
          "totalElements": {
            "type": "integer",
            "description": "The total number of elements in the response.",
            "example": 4
          }
        },
        "description": "The Retrieve All Payroll Tables response model."
      },
      "UploadFileResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/Error"
          },
          "inputName": {
            "type": "string",
            "description": "The name of the input file.",
            "example": "fileName"
          },
          "inputSize": {
            "type": "integer",
            "description": "The file size in bytes.",
            "example": 1024
          },
          "inputType": {
            "type": "string",
            "description": "The input type for a file upload.",
            "example": "JSON"
          },
          "outputName": {
            "type": "string",
            "description": "The Big Query table name (for csv/table) or GCS blob name (for json/schema).",
            "example": "BQTableName"
          },
          "outputType": {
            "type": "string",
            "description": "The output type.",
            "example": "table"
          }
        },
        "description": "The upload file response model."
      },
      "TableUpsertRequest": {
        "type": "object",
        "properties": {
          "exportId": {
            "type": "string",
            "description": "The payroll table upsert request export ID.",
            "example": ""
          },
          "partitionConfig": {
            "$ref": "#/components/schemas/PartitionConfig"
          },
          "query": {
            "type": "string",
            "description": "The SQL query for a payroll table upsert request.",
            "example": ""
          },
          "tableName": {
            "type": "string",
            "description": "The name of a payroll table.",
            "example": "tableName"
          }
        },
        "description": "The table upsert request model."
      },
      "CollectResult": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "integer",
            "description": "The number of collected rows.",
            "example": 1
          },
          "status": {
            "type": "string",
            "description": "The collection result status. If the operation creates a new table, the status returned is <code>CREATED</code>. If the operation modifies an existing table, the status returned is <code>APPENDED</code>.",
            "enum": [
              "APPENDED",
              "CREATED"
            ]
          }
        },
        "description": "The collection result model."
      },
      "TableInfo": {
        "type": "object",
        "properties": {
          "creationTime": {
            "type": "string",
            "description": "The date and time a table was created in ISO_LOCAL_DATE_TIME format (yyyy-MM-dd'T'HH:mm:ss.SSSXXX).",
            "example": "2000-10-31T01:30:00.000-05:00"
          },
          "name": {
            "type": "string",
            "description": "The name of a payroll table.",
            "example": "name"
          },
          "partitionConfig": {
            "$ref": "#/components/schemas/PartitionConfig"
          },
          "rows": {
            "type": "integer",
            "description": "The number of rows in a payroll table.",
            "example": 1
          },
          "schema": {
            "type": "array",
            "description": "The list of payroll table schema columns.",
            "items": {
              "$ref": "#/components/schemas/TableSchemaColumn"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of a payroll table.",
            "enum": [
              "CUSTOM",
              "STAGE"
            ]
          }
        },
        "description": "The payroll table model."
      },
      "PgeBehaviorConfigurationItemsDTO": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "behaviorConfiguration": {
            "$ref": "#/components/schemas/PgeBehaviorConfigurationsDTO"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationDTO"
            }
          },
          "name": {
            "type": "string"
          },
          "notification": {
            "$ref": "#/components/schemas/NotificationDTO"
          },
          "qualifier": {
            "type": "string"
          }
        }
      },
      "PgeBehaviorConfigurationsDTO": {
        "type": "object",
        "properties": {
          "behavior": {
            "$ref": "#/components/schemas/BehaviorDTO"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationTypeDTO"
          },
          "name": {
            "type": "string"
          },
          "qualifier": {
            "type": "string"
          },
          "threshold": {
            "$ref": "#/components/schemas/ThresholdDTO"
          }
        }
      },
      "request-reviewers-api_ReviewerListDTO": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a reviewer list is active."
          },
          "description": {
            "type": "string",
            "description": "The description of a reviewer list. The reviewer list type cannot be updated."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a reviewer list.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a reviewer list."
          },
          "notifiers": {
            "type": "array",
            "description": "The list of recipients to be notified.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "reviewSteps": {
            "type": "array",
            "description": "The reviewer step list.",
            "items": {
              "$ref": "#/components/schemas/request-reviewers-api_ReviewStepDTO"
            }
          },
          "symbolicNotifiers": {
            "type": "array",
            "description": "The list of symbolic recipients to be notified.",
            "items": {
              "$ref": "#/components/schemas/request-reviewers-api_SymbolicReviewerDTO"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of a reviewer list."
          }
        },
        "description": "Model describing the details of the reviewer list definition."
      },
      "request-reviewers-api_ReviewerPurposeDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a reviewer purpose is active."
          },
          "description": {
            "type": "string",
            "description": "The description of a reviewer purpose."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a reviewer purpose.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a reviewer purpose."
          },
          "type": {
            "type": "string",
            "description": "The type of a reviewer purpose."
          }
        },
        "description": "Model describing the details of the reviewer purpose definition."
      },
      "Timezone": {
        "required": [
          "displayName",
          "fullDisplayName",
          "name",
          "offsetMinutes"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of a timezone."
          },
          "effectiveDatedTimeZoneList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeZoneEntry"
            }
          },
          "fullDisplayName": {
            "type": "string",
            "description": "The full display name of a timezone."
          },
          "guid": {
            "type": "string",
            "description": "The GUID of a timezone.",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "The ID of a timezone.",
            "format": "int64",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "The name of a timezone."
          },
          "offsetMinutes": {
            "type": "integer",
            "description": "The offset of a timezone expressed in minutes.",
            "format": "int32"
          },
          "tenantDefault": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a timezone is the default timezone of a tenant.",
            "readOnly": true
          },
          "zoneId": {
            "$ref": "#/components/schemas/ZoneId"
          }
        },
        "description": "A model containing data about timezones."
      },
      "SymbolicPeriod": {
        "type": "object",
        "properties": {
          "dateSpan": {
            "$ref": "#/components/schemas/SchedulingLocalDateSpan"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "sortOrder": {
            "type": "integer",
            "format": "int32"
          },
          "symbolicId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "TIMEKEEPING",
              "SCHEDULING",
              "COMMON",
              "CUSTOM"
            ]
          },
          "typeSortOrder": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MultiSymbolicRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/MultiSymbolicWhere"
          }
        },
        "description": "Model for a multi Symbolic Period."
      },
      "LocalDateSpan": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string",
            "description": "The end date of a date span.",
            "format": "date"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of a date span.",
            "format": "date"
          }
        },
        "description": "DateSpan details."
      },
      "PeriodType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "FindSymbolicRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/FindSymbolicWhere"
          }
        },
        "description": "Model for a Symbolic Period."
      },
      "TTIP User Profile Model": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of a TeleTime IP user profile.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a TeleTime IP user profile."
          }
        },
        "description": "Entity containing the necessary data to fetch a TeleTime IP user profile."
      },
      "timezoneApplyUpdateRequest": {
        "required": [
          "tenantDefault"
        ],
        "type": "object",
        "properties": {
          "tenantDefault": {
            "$ref": "#/components/schemas/TimezoneTenantDefaultRequest"
          }
        },
        "description": "Model for a Locale Policy apply update."
      },
      "transaction-assistant-api_TAMultiReadRequest": {
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/transaction-assistant-api_TAMultiReadRequestBean"
          }
        },
        "description": "Request to fetch details for transaction errors."
      },
      "transaction-assistant-api_TAResponseData": {
        "type": "object",
        "properties": {
          "records": {
            "type": "array",
            "description": "Detailed list of transaction assistant data.",
            "items": {
              "$ref": "#/components/schemas/transaction-assistant-api_TAResponseDataBean"
            }
          },
          "totalElements": {
            "type": "integer",
            "description": "Total number of transaction assistant records.",
            "format": "int64"
          }
        },
        "description": "Response to show details for transaction assistant data."
      },
      "Transfer Display Model": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of a transfer display profile.",
            "readOnly": true
          },
          "expiredOrgNodeTypes": {
            "type": "array",
            "description": "A list of references to expired <code>orgNodeType</code> objects, which are nodes on the Business Structure.",
            "items": {
              "$ref": "#/components/schemas/TransferObjectRef"
            }
          },
          "id": {
            "type": "integer",
            "description": "The ID of a transfer display profile.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a transfer display profile."
          },
          "orgNodeTypes": {
            "type": "array",
            "description": "A list of references to <code>orgNodeType</code> objects, which are nodes on the Business Structure.",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/TransferObjectRef"
            }
          },
          "panelDisplayType": {
            "type": "string",
            "description": "The panel display type of a transfer display profile. Valid values include BOTH(0), JOB(1), and LOCATION(2).",
            "readOnly": true,
            "enum": [
              "BOTH",
              "JOB",
              "LOCATION"
            ]
          }
        },
        "description": "The Transfer Display Model object model."
      },
      "TransferDisplayException": {
        "type": "object",
        "properties": {
          "cause": {
            "$ref": "#/components/schemas/Throwable"
          },
          "errorCode": {
            "type": "string"
          },
          "exceptionType": {
            "type": "string",
            "enum": [
              "SECURITY_ACCESS_VIOLATION",
              "DATA_ACCESS_VIOLATION",
              "BUSINESS_VALIDATION_VIOLATION",
              "INVALID_PARAMETERS",
              "DATABASE_FAILURE",
              "NOT_FOUND",
              "ITEM_IN_USE",
              "UNSPECIFIED"
            ]
          },
          "localizedMessage": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StackTraceElement"
            }
          },
          "suppressed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Throwable"
            }
          }
        }
      },
      "Wi-Fi Access Point": {
        "required": [
          "bssid",
          "id",
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "bssid": {
            "type": "string",
            "description": "The BSSID of a WiFi Access Point."
          },
          "description": {
            "type": "string",
            "description": "The description of a WiFi Access Point."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a WiFi Access Point.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a WiFi Access Point."
          },
          "qualifier": {
            "type": "string",
            "description": "The qualifier (optional) of a WiFi Access Point."
          },
          "version": {
            "type": "integer",
            "description": "The version of a WiFi Access Point (internal).",
            "format": "int32"
          }
        },
        "description": "WiFi Access Point model."
      },
      "WiFi Access Point Multi Delete Request": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/WiFi Access Point Multi Delete Request Where"
          }
        },
        "description": "The Delete WiFi Access Points request payload model."
      },
      "WiFi Access Point Multi Delete Response": {
        "type": "object",
        "description": "The Delete WiFi Access Points response model."
      },
      "Wi-Fi Network": {
        "required": [
          "essid",
          "id",
          "name",
          "version"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of a WiFi Network."
          },
          "essid": {
            "type": "string",
            "description": "The ESSID of a WiFi Network."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a WiFi Network.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a WiFi Network."
          },
          "qualifier": {
            "type": "string",
            "description": "The qualifier of a WiFi Network (optional)."
          },
          "version": {
            "type": "integer",
            "description": "The version of a WiFi Network (internal).",
            "format": "int32"
          },
          "wifiAccessPoints": {
            "type": "array",
            "description": "The WiFi Access Points assigned to the WiFi Network.",
            "items": {
              "$ref": "#/components/schemas/Wi-Fi Access Point"
            }
          }
        },
        "description": "WiFi Network model."
      },
      "WiFi Network Multi Delete Request": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/WiFi Network Multi Delete Request Where"
          }
        },
        "description": "WiFi Networks Multi Delete Request model."
      },
      "WiFi Network Multi Delete Response": {
        "type": "object",
        "description": "WiFi Network Multi-Delete Response object model, which contains an empty response body."
      },
      "License history response": {
        "required": [
          "creationDate",
          "creationTime",
          "endDate",
          "entitlementCode",
          "id",
          "name",
          "orderNumber",
          "seats",
          "solutionId",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "The creation date associated with an entitlement history.",
            "format": "date-time"
          },
          "creationTime": {
            "type": "string",
            "description": "The creation time associated with an entitlement history."
          },
          "endDate": {
            "type": "string",
            "description": "The end date associated with an entitlement history.",
            "format": "date-time"
          },
          "entitlementCode": {
            "type": "string",
            "description": "The entitlement code associated with an entitlement history."
          },
          "id": {
            "type": "integer",
            "description": "The ID of an entitlement history.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The package name associated with an entitlement history."
          },
          "orderNumber": {
            "type": "string",
            "description": "The order number associated with an entitlement history."
          },
          "seats": {
            "type": "integer",
            "description": "The seats associated with an entitlement history.",
            "format": "int64"
          },
          "solutionId": {
            "type": "string",
            "description": "The solution ID associated with an entitlement history."
          },
          "startDate": {
            "type": "string",
            "description": "The start date associated with an entitlement history.",
            "format": "date-time"
          }
        },
        "description": "Entitlement History"
      },
      "License summary response": {
        "required": [
          "assignedSeats",
          "currentDate",
          "id",
          "name",
          "remSeats",
          "seats",
          "solutionId"
        ],
        "type": "object",
        "properties": {
          "assignedSeats": {
            "type": "integer",
            "description": "The assigned seats associated with an entitlement summary.",
            "format": "int64"
          },
          "currentDate": {
            "type": "string",
            "description": "The current date associated with an entitlement summary."
          },
          "id": {
            "type": "integer",
            "description": "The ID of an entitlement summary.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The package name associated with an entitlement summary."
          },
          "remSeats": {
            "type": "integer",
            "description": "The remaining seats associated with an entitlement summary.",
            "format": "int64"
          },
          "seats": {
            "type": "integer",
            "description": "The seats associated with an entitlement summary.",
            "format": "int64"
          },
          "solutionId": {
            "type": "string",
            "description": "The solution ID associated with an entitlement summary."
          }
        },
        "description": "Entitlement Summary"
      },
      "HoursOfOperationWithVersions": {
        "required": [
          "active",
          "effectiveVersions",
          "name"
        ],
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not Hours of Operation object is active."
          },
          "description": {
            "type": "string",
            "description": "The description of Hours of Operation object."
          },
          "effectiveVersions": {
            "type": "array",
            "description": "The list of effective versions of Hours of Operation object.",
            "items": {
              "$ref": "#/components/schemas/EffectiveHoursOfOperation"
            }
          },
          "id": {
            "type": "integer",
            "description": "The ID of Hours of Operation object.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of Hours of Operation object."
          },
          "version": {
            "type": "integer",
            "description": "The version of Hours of Operation object.",
            "format": "int64"
          }
        },
        "description": "Context for Hours of Operation."
      },
      "EffectiveHoursOfOperationMultiDeleteContext": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/EffectiveHoursOfOperationMultiDelete"
          }
        },
        "description": "Model for wrapping multi-delete context"
      },
      "EffectiveHoursOfOperationMultiReadContext": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/EffectiveHoursOfOperationMultiRead"
          }
        },
        "description": "Model for Retrieve Hours of Operation Effective Versions retrieval criteria."
      },
      "EffectiveHoursOfOperationDeleteWrapper": {
        "required": [
          "hoursOfOperation"
        ],
        "type": "object",
        "properties": {
          "hoursOfOperation": {
            "$ref": "#/components/schemas/EffectiveHoursOfOperationDelete"
          }
        },
        "description": "Request model to delete effective version of Hours of Operation."
      },
      "Notification Response": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "nextPage": {
            "type": "string",
            "description": "The URL that instructs the caller how to retrieve the next page of data."
          },
          "records": {
            "type": "array",
            "description": "The list of notifications is wrapped in an array object named records.",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          }
        },
        "description": "Response body.",
        "xml": {
          "name": "notificationResponse"
        }
      },
      "Permission Type": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "description": "The action name for an access control point."
          },
          "scopeName": {
            "type": "string",
            "description": "The scope name for an access control point."
          }
        },
        "description": "Permission Type model."
      },
      "Access Method Condition": {
        "required": [
          "accessMethodDetails",
          "id",
          "priority",
          "roleProfile"
        ],
        "type": "object",
        "properties": {
          "accessMethodDetails": {
            "$ref": "#/components/schemas/Access Method Detail"
          },
          "id": {
            "type": "integer",
            "description": "The ID of an access method condition.",
            "format": "int64"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of an access method condition.",
            "format": "int32"
          },
          "roleProfile": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        },
        "description": "The Access Method Condition object model."
      },
      "MultiOperationWhere": {
        "type": "object",
        "properties": {
          "accessMethodProfiles": {
            "$ref": "#/components/schemas/MultiOperationWhereRefs"
          }
        }
      },
      "AvgPayRateResponseDetailsObject": {
        "required": [
          "error-offsets",
          "results"
        ],
        "type": "object",
        "properties": {
          "error-offsets": {
            "type": "array",
            "description": "A collection of error indexes.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "results": {
            "type": "array",
            "description": "A collection of average pay rate results.",
            "items": {
              "$ref": "#/components/schemas/AvgPayRatePartialResultObject"
            }
          }
        },
        "description": "Model describing the base average pay rate response details."
      },
      "AveragePayRateSetWhere": {
        "required": [
          "averagePayRateSet"
        ],
        "type": "object",
        "properties": {
          "averagePayRateSet": {
            "$ref": "#/components/schemas/AveragePayRateSetIds"
          }
        },
        "description": "Model context for an average pay rate set where."
      },
      "Control Center Category JSON": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of a Control Center category.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a Control Center category."
          }
        },
        "description": "Control Center Category"
      },
      "costCenterSortCriteria": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "sortDirection": {
            "type": "string",
            "enum": [
              "ascending",
              "descending"
            ]
          }
        },
        "description": "The parameters that define sorting behavior."
      },
      "costCenterWhereCondition": {
        "type": "object",
        "properties": {
          "filterCriteria": {
            "$ref": "#/components/schemas/laborCategoryEntryFilterCriteria"
          }
        },
        "description": "The where clause of a set of sorting, filtering, and selecting parameters in which the actual criteria for retrieving the parameters is specified."
      },
      "CostCenterWhereCriteria": {
        "type": "object",
        "properties": {
          "costCenters": {
            "$ref": "#/components/schemas/LaborCategoryObjectRefs"
          }
        }
      },
      "Custom Tile Configuration": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "cardType": {
            "type": "string",
            "description": "The type of custom tile.",
            "enum": [
              "EMBED",
              "EXTERNAL",
              "MVOVERTIME",
              "MVABSENCE",
              "MVMYACCRUAL",
              "MVANALYTIC",
              "MVHCANALYTIC",
              "INTERNAL"
            ]
          },
          "chartType": {
            "type": "string",
            "description": "The chart type associated with a custom tile.",
            "enum": [
              "JOB",
              "TREND"
            ]
          },
          "components": {
            "type": "array",
            "description": "The components to construct custom tile.",
            "items": {
              "$ref": "#/components/schemas/Component"
            }
          },
          "icon": {
            "type": "string",
            "description": "The icon class used to display the tile icon."
          },
          "linkDescription": {
            "type": "string",
            "description": "The description of the URL link in the external custom tile."
          },
          "navigation": {
            "$ref": "#/components/schemas/Custom Tile Navigation Information"
          },
          "serviceIdentifier": {
            "type": "string",
            "description": "The ID of the content provider which is used to derive the host URL."
          },
          "type": {
            "type": "string",
            "description": "The type of a tile.",
            "enum": [
              "GENERIC",
              "CHART",
              "APPLICATION",
              "CUSTOM"
            ]
          },
          "url": {
            "type": "string",
            "description": "The URL used to open the tile within the iframe."
          },
          "urlText": {
            "type": "string",
            "description": "The hypertext of the URL link in the external custom tile."
          }
        },
        "description": "Custom tile configuration data."
      },
      "Custom Tile Labels": {
        "required": [
          "locale",
          "value"
        ],
        "type": "object",
        "properties": {
          "locale": {
            "type": "string",
            "description": "The locale in which a label is shown."
          },
          "value": {
            "type": "string",
            "description": "The label in a particular locale."
          }
        },
        "description": "Label consisting of value in a particular locale."
      },
      "DelegateDTO": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "description": "The full name of a delegate."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a delegate profile.",
            "format": "int64"
          },
          "qualifier": {
            "type": "string",
            "description": "The qualifier of a delegate."
          }
        },
        "description": "Model containing information for a delegate profile detailed message."
      },
      "JobSummaryDetails": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "string",
            "description": "The employee or location set depending on the request submitted."
          },
          "timeframe": {
            "type": "string",
            "description": "The timeframe for the data."
          }
        }
      },
      "EmployeeGroupObjectRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "qualifier": {
            "type": "string"
          }
        }
      },
      "Multi Read Criteria for employee groups fetching": {
        "type": "object",
        "properties": {
          "allDetails": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not the response returns all of the details of each Hyperfind query."
          },
          "employeeGroups": {
            "$ref": "#/components/schemas/Multi Read References which contains actual criterias"
          }
        },
        "description": "The Retrieve Employee Groups request payload model."
      },
      "DomainEventEntityReference": {
        "type": "object",
        "properties": {
          "eventCategories": {
            "$ref": "#/components/schemas/EntityReference"
          },
          "eventNavigations": {
            "$ref": "#/components/schemas/EntityReference"
          }
        }
      },
      "Domain Event Mapping Where Object": {
        "type": "object",
        "properties": {
          "eventNotifications": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        },
        "description": "Domain Event Mapping Where object model."
      },
      "EventData": {
        "type": "object",
        "properties": {
          "customTag": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "ControlCenterEventAction": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of event action.",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "previewPanelAction": {
            "type": "boolean",
            "description": "Preview panel action associated with event action"
          },
          "urlType": {
            "type": "string"
          }
        },
        "description": "Action Event model."
      },
      "Domain DTO": {
        "required": [
          "label"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID associated with an object reference.",
            "format": "int64",
            "readOnly": true
          },
          "label": {
            "type": "string",
            "description": "The label of a domain."
          },
          "qualifier": {
            "type": "string",
            "description": "The qualifier associated with an object reference.",
            "readOnly": true
          }
        },
        "description": "The Domain model."
      },
      "Domain Event Where Object": {
        "required": [
          "eventTypes"
        ],
        "type": "object",
        "properties": {
          "eventTypes": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        },
        "description": "The Domain Event Where object model."
      },
      "DownloadError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "detail": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "message": {
            "type": "string"
          }
        }
      },
      "NewCookie": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "expiry": {
            "type": "string",
            "format": "date-time"
          },
          "httpOnly": {
            "type": "boolean"
          },
          "maxAge": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "value": {
            "type": "string"
          },
          "version": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "EntityTag": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "weak": {
            "type": "boolean"
          }
        }
      },
      "Locale": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "displayCountry": {
            "type": "string"
          },
          "displayLanguage": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "displayScript": {
            "type": "string"
          },
          "displayVariant": {
            "type": "string"
          },
          "extensionKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "iso3Country": {
            "type": "string"
          },
          "iso3Language": {
            "type": "string"
          },
          "language": {
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "unicodeLocaleAttributes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "unicodeLocaleKeys": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "variant": {
            "type": "string"
          }
        }
      },
      "Link": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "rel": {
            "type": "string"
          },
          "rels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "uri": {
            "type": "string",
            "format": "uri"
          },
          "uriBuilder": {
            "$ref": "#/components/schemas/UriBuilder"
          }
        }
      },
      "MediaType": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "subtype": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "wildcardSubtype": {
            "type": "boolean"
          },
          "wildcardType": {
            "type": "boolean"
          }
        }
      },
      "StatusType": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "enum": [
              "INFORMATIONAL",
              "SUCCESSFUL",
              "REDIRECTION",
              "CLIENT_ERROR",
              "SERVER_ERROR",
              "OTHER"
            ]
          },
          "reasonPhrase": {
            "type": "string"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FeatureSwitchWhereRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "A list of feature switch IDs.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "qualifiers": {
            "type": "array",
            "description": "A list of feature switch qualifiers.",
            "items": {
              "type": "string"
            }
          },
          "refs": {
            "type": "array",
            "description": "A list of feature switch references.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        },
        "description": "Model for a Batch Job Where DTO."
      },
      "FiscalCalendarDTO": {
        "type": "object",
        "properties": {
          "fiscalEndDate": {
            "type": "string"
          },
          "fiscalIndex": {
            "type": "string"
          },
          "fiscalStartDate": {
            "type": "string"
          },
          "generatedId": {
            "type": "string",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "periodName": {
            "type": "string"
          },
          "periodType": {
            "type": "string"
          }
        }
      },
      "Permissions Types": {
        "required": [
          "actionName",
          "controlPointKey",
          "scopeName"
        ],
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "description": "The action name of a permissions type.",
            "enum": [
              "ADD,EDIT,DELETE,VIEW,ALLOWED."
            ]
          },
          "controlPointKey": {
            "type": "string",
            "description": "The controlpointkey of a permissions type."
          },
          "scopeName": {
            "type": "string",
            "description": "The scope name of a permissions type.",
            "enum": [
              "ALL,ALL_BUT_SELF,ONLY_SELF,NONE."
            ]
          }
        },
        "description": "Permissions Types Profile model."
      },
      "DagItemDTO": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "The category of a Setup Item."
          },
          "id": {
            "type": "integer",
            "description": "The ID of a Setup Item.",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The name of a Setup Item."
          },
          "type": {
            "type": "string",
            "description": "The type of a Setup Item."
          }
        },
        "description": "Model containing information for a Setup Item."
      },
      "SetupCategoryDTO": {
        "required": [
          "setupCategory"
        ],
        "type": "object",
        "properties": {
          "setupCategory": {
            "type": "string",
            "description": "Setup Category for Generic Data Access Profiles."
          },
          "setupItems": {
            "type": "array",
            "description": "Setup items for Generic Data Access Profiles.",
            "items": {
              "$ref": "#/components/schemas/SetupItemDTO"
            }
          }
        },
        "description": "Setup Category for Generic Data Access Profiles."
      },
      "GenericNotificationWhere": {
        "required": [
          "genericNotifications"
        ],
        "type": "object",
        "properties": {
          "genericNotifications": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        },
        "description": "The Generic Notification model for the where property."
      },
      "HoursOfOperationItem": {
        "required": [
          "closeTime",
          "closed",
          "holiday",
          "id",
          "openTime",
          "weekDay"
        ],
        "type": "object",
        "properties": {
          "closeTime": {
            "type": "string",
            "description": "The closing time associated with an hours of operation item in ISO_LOCAL_TIME format (HH:mm:ss.SSS)."
          },
          "closed": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an hours of operation item is closed."
          },
          "holiday": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an hours of operation item represents a holiday."
          },
          "id": {
            "type": "integer",
            "description": "The ID of an hours of operation item.",
            "format": "int64"
          },
          "openTime": {
            "type": "string",
            "description": "The opening time associated with an hours of operation item in ISO_LOCAL_TIME format (HH:mm:ss.SSS)."
          },
          "weekDay": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        },
        "description": "Model context for an hours of operation item."
      },
      "BatchResponseDetailsForRest": {
        "required": [
          "error-offsets",
          "results"
        ],
        "type": "object",
        "properties": {
          "error-offsets": {
            "type": "array",
            "description": "A collection of error indexes.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "results": {
            "type": "array",
            "description": "A collection of batch results.",
            "items": {
              "$ref": "#/components/schemas/HooPartialResultForRest"
            }
          }
        },
        "description": "Model describing the base batch response details."
      },
      "HoursOfOperationOverrideItem": {
        "required": [
          "closeTime",
          "endDate",
          "id",
          "openTime",
          "reason",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "closeTime": {
            "type": "string",
            "description": "The closing time associated with an hours of operation override item."
          },
          "closed": {
            "type": "boolean"
          },
          "endDate": {
            "type": "string",
            "description": "The end date associated with an hours of operation override item in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          },
          "id": {
            "type": "integer",
            "description": "The ID of an hours of operation override item.",
            "format": "int64"
          },
          "openTime": {
            "type": "string",
            "description": "The opening time associated with an hours of operation override item."
          },
          "reason": {
            "type": "string",
            "description": "The reason for an hours of operation override item."
          },
          "startDate": {
            "type": "string",
            "description": "The start date associated with an hours of operation override item in ISO_LOCAL_DATE format (YYYY-MM-DD).",
            "format": "date"
          }
        },
        "description": "Model context for an hours of operation override item."
      },
      "Notification Context": {
        "type": "object",
        "properties": {
          "dateSpan": {
            "$ref": "#/components/schemas/DateRange"
          },
          "hyperfind": {
            "type": "string",
            "description": "The Hyperfind ID associated with a notification."
          },
          "otherContext": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Any additional context associated with a notification."
          },
          "peopleIdList": {
            "type": "array",
            "description": "The list of reference IDs of the persons passed as context while navigating to a destination page from the notification message.",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "timeframeId": {
            "type": "integer",
            "description": "The reference ID of the timeframe passed as context while navigating to a destination page from the notification message.",
            "format": "int32"
          }
        },
        "description": "Notification context",
        "xml": {
          "name": "context"
        }
      },
      "actionDetails": {
        "type": "object",
        "properties": {
          "actionName": {
            "type": "string",
            "description": "The name of an action, which is used to display that action in the UI."
          },
          "showInPreview": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not to display event actions in the Control Center preview panel."
          }
        },
        "description": "Event Action Details."
      },
      "Generic Component": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier.",
            "xml": {
              "attribute": true
            }
          },
          "key": {
            "type": "string",
            "description": "The key of an entity.",
            "xml": {
              "attribute": true
            }
          },
          "label": {
            "type": "string",
            "description": "Label of model.",
            "xml": {
              "attribute": true
            }
          },
          "name": {
            "type": "string",
            "description": "Unique name.",
            "xml": {
              "attribute": true
            }
          }
        },
        "description": "Generic Component model.",
        "xml": {
          "name": "Generic Component"
        }
      },
      "ExportConfig": {
        "type": "object",
        "properties": {
          "delimiter": {
            "type": "string",
            "description": "The delimiter, such as a comma (,).",
            "example": ","
          },
          "fileName": {
            "type": "string",
            "description": "The file name.",
            "example": "fileName"
          },
          "format": {
            "type": "string",
            "description": "The data format.",
            "enum": [
              "CSV",
              "JSON"
            ]
          }
        },
        "description": "The export configuration model."
      },
      "Section": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string",
            "description": "The section prefix.",
            "example": "prefix"
          },
          "queries": {
            "type": "array",
            "description": "The list of queries for the section.",
            "items": {
              "type": "string",
              "example": "query"
            }
          }
        },
        "description": "The section model."
      },
      "ExportStatusShortResponse": {
        "type": "object",
        "properties": {
          "executionKey": {
            "type": "string",
            "description": "The execution key of an asynchronous payroll export job.",
            "example": ""
          },
          "expiresAt": {
            "type": "string",
            "description": "The expiration date and time of an asynchronous export payroll job in ISO_LOCAL_DATE_TIME format (yyyy-MM-dd'T'HH:mm:ss.SSSXXX).",
            "example": "2000-10-31T01:30:00.000-05:00"
          },
          "state": {
            "type": "string",
            "description": "The state of an asynchronous export payroll job.",
            "enum": [
              "PENDING",
              "SUCCESSFUL",
              "FAILED"
            ]
          }
        },
        "description": "The short version of an export status response model."
      },
      "DateRange": {
        "type": "object",
        "properties": {
          "endDateTime": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string"
          }
        }
      },
      "Employees": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "A list of employee IDs.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "qualifiers": {
            "type": "array",
            "description": "A list of employee qualifiers.",
            "items": {
              "type": "string"
            }
          },
          "refs": {
            "type": "array",
            "description": "A list of employee references.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        },
        "description": "The pay group employees model."
      },
      "ProcessBasedOnDTO": {
        "type": "object",
        "properties": {
          "filterBy": {
            "type": "string",
            "description": "<p>The conditions by which payroll processing is filtered. This property is only needed if the type is <code>WORKED</code> or <code>POSITION_ASSIGNMENT</code>. The default value is <code>JOB</code> and valid values include:</p><ul><li>JOB</li><li>LABOR_CATEGORY</li><li>COST_CENTER</li><li>POSITION_CUSTOM_FIELD</li></ul>"
          },
          "type": {
            "type": "string",
            "description": "<p>The type on which the payroll staging process is based.</p><p>Possible values include:</p><ul><li>PRIMARY</li><li>WORKED</li><li>POSITION_ASSIGNMENT</li></ul>"
          }
        },
        "description": "The payroll process-based-on model."
      },
      "EmployeeFilter": {
        "required": [
          "employeeIn"
        ],
        "type": "object",
        "properties": {
          "employeeIn": {
            "type": "array",
            "description": "Paygroup criteria to filter employee.",
            "items": {
              "$ref": "#/components/schemas/PayGroupCriteria"
            }
          }
        },
        "description": "Model for employee filter used in payroll extract invoking request."
      },
      "Throwable": {
        "type": "object",
        "properties": {
          "cause": {
            "$ref": "#/components/schemas/Throwable"
          },
          "localizedMessage": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "stackTrace": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StackTraceElement"
            }
          },
          "suppressed": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Throwable"
            }
          }
        }
      },
      "StackTraceElement": {
        "type": "object",
        "properties": {
          "className": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "lineNumber": {
            "type": "integer",
            "format": "int32"
          },
          "methodName": {
            "type": "string"
          },
          "nativeMethod": {
            "type": "boolean"
          }
        }
      },
      "payrollstagingdetailsresults": {
        "required": [
          "error",
          "success"
        ],
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/payrollstagingdetailserror"
          },
          "success": {
            "$ref": "#/components/schemas/payrollstagingdetailssuccess"
          }
        },
        "description": "The payroll extraction staging details results model."
      },
      "TableShortInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of a payroll table.",
            "example": "name"
          },
          "type": {
            "type": "string",
            "description": "The type of a payroll table.",
            "enum": [
              "CUSTOM",
              "STAGE"
            ]
          }
        },
        "description": "The payroll table records model."
      },
      "Error": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "description": "The error code associated with an error result.",
            "example": "PE-005001"
          },
          "message": {
            "type": "string",
            "description": "The message associated with an error result.",
            "example": "An error occurred while loading the file."
          }
        },
        "description": "The error result model."
      },
      "PartitionConfig": {
        "type": "object",
        "properties": {
          "column": {
            "type": "string",
            "description": "The name of the partitioning column. In the table schema, this column must be a TIMESTAMP, DATETIME, or DATE type.",
            "example": "DATE"
          },
          "expirationHours": {
            "type": "integer",
            "description": "The expiration time for the table's partitions in hours.",
            "example": 2160
          },
          "granularity": {
            "type": "string",
            "description": "The partitioning granularity.",
            "enum": [
              "DAY",
              "HOUR",
              "MONTH",
              "YEAR"
            ]
          }
        },
        "description": "The partition configuration model."
      },
      "TableSchemaColumn": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "The table schema column mode.",
            "example": ""
          },
          "name": {
            "type": "string",
            "description": "The table schema column name.",
            "example": ""
          },
          "type": {
            "type": "string",
            "description": "The table schema column type.",
            "example": ""
          }
        },
        "description": "The table schema column model."
      },
      "LocationDTO": {
        "type": "object",
        "properties": {
          "fullPath": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "qualifier": {
            "type": "string"
          }
        }
      },
      "NotificationDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "qualifier": {
            "type": "string"
          }
        }
      },
      "BehaviorDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "qualifier": {
            "type": "string"
          }
        }
      },
      "LocationTypeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "qualifier": {
            "type": "string"
          }
        }
      },
      "ThresholdDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "percentile": {
            "type": "number"
          },
          "qualifier": {
            "type": "string"
          }
        }
      },
      "request-reviewers-api_ReviewStepDTO": {
        "type": "object",
        "properties": {
          "reviewers": {
            "type": "array",
            "description": "The list of reviewers that can review this step.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "stepNumber": {
            "type": "integer",
            "description": "The step number.",
            "format": "int32"
          },
          "symbolicReviewers": {
            "type": "array",
            "description": "The list of symbolic reviewers that can review this step.",
            "items": {
              "$ref": "#/components/schemas/request-reviewers-api_SymbolicReviewerDTO"
            }
          }
        },
        "description": "Model describing the details of the reviewer step definition."
      },
      "request-reviewers-api_SymbolicReviewerDTO": {
        "type": "object",
        "properties": {
          "filterType": {
            "type": "string",
            "description": "The type of filter used to filter symbolic reviewers."
          },
          "symbolicReviewer": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        },
        "description": "Model containing information for a symbolic reviewer."
      },
      "TimeZoneEntry": {
        "type": "object",
        "properties": {
          "dstEnd": {
            "type": "string"
          },
          "dstStart": {
            "type": "string"
          },
          "endDateTime": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string"
          },
          "timezone": {
            "$ref": "#/components/schemas/SimpleTimeZoneBean"
          }
        }
      },
      "ZoneId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rules": {
            "$ref": "#/components/schemas/ZoneRules"
          }
        }
      },
      "SchedulingLocalDateSpan": {
        "allOf": [
          {
            "$ref": "#/components/schemas/SchedulingAbstractSpan"
          },
          {
            "type": "object",
            "properties": {
              "end": {
                "type": "string",
                "description": "The end of the span.",
                "format": "date"
              },
              "start": {
                "type": "string",
                "description": "The start of the span.",
                "format": "date"
              }
            },
            "description": "A local date span object, with start and end in ISO_LOCAL_DATE format (YYYY-MM-DD)."
          }
        ]
      },
      "MultiSymbolicWhere": {
        "type": "object",
        "properties": {
          "currentTenant": {
            "type": "boolean",
            "description": "Is it a current tenant used for searching."
          },
          "currentUser": {
            "type": "boolean",
            "description": "Is it a current user used for searching."
          },
          "employeeId": {
            "type": "integer",
            "description": "The employee Id to be used for searching.",
            "format": "int64"
          },
          "locationId": {
            "type": "integer",
            "description": "The locationId to be used for searching.",
            "format": "int64"
          },
          "personNumber": {
            "type": "string",
            "description": "The personNumber to be used for searching."
          },
          "symbolicPeriodIds": {
            "type": "array",
            "description": "The symbolicPeriodId to be used for searching.",
            "items": {
              "type": "string"
            }
          },
          "symbolicRequestParams": {
            "type": "array",
            "description": "The smbolicRequestParams to be used for searching.",
            "items": {
              "$ref": "#/components/schemas/PayPeriodRequest"
            }
          }
        },
        "description": "Model holding conditions related to either employeeId, personNumber, locationId , symbolicPeriodId, symbolicPeriodIds, CurrentUser, CurrentTenant to be used in an symbolicPeriod read request. "
      },
      "FindSymbolicWhere": {
        "type": "object",
        "properties": {
          "currentTenant": {
            "type": "boolean",
            "description": "Is it a current tenant used for searching."
          },
          "currentUser": {
            "type": "boolean",
            "description": "Is it a current user used for searching."
          },
          "employeeId": {
            "type": "integer",
            "description": "The employee Id to be used for searching.",
            "format": "int64"
          },
          "locationId": {
            "type": "integer",
            "description": "The locationId to be used for searching.",
            "format": "int64"
          },
          "payPeriodRequest": {
            "$ref": "#/components/schemas/PayPeriodRequest"
          },
          "personNumber": {
            "type": "string",
            "description": "The personNumber to be used for searching."
          },
          "symbolicPeriodId": {
            "type": "string",
            "description": "The symbolicPeriodId to be used for searching."
          }
        },
        "description": "Model holding conditions related to either employeeId, personNumber, locationId , symbolicPeriodId, symbolicPeriodIds, CurrentUser, CurrentTenant to be used in an symbolicPeriod read request. "
      },
      "TimezoneTenantDefaultRequest": {
        "required": [
          "where"
        ],
        "type": "object",
        "properties": {
          "where": {
            "$ref": "#/components/schemas/TimezoneTenantDefaultWhere"
          }
        },
        "description": "Model for Locale Policy tenant default locale policy update requests."
      },
      "transaction-assistant-api_TAMultiReadRequestBean": {
        "type": "object",
        "properties": {
          "apiEndPoint": {
            "type": "string",
            "description": "The API end point for the transaction."
          },
          "count": {
            "type": "integer",
            "description": "Number of records returned per page.",
            "format": "int64"
          },
          "dataSourceId": {
            "type": "integer",
            "description": "ID belongs to the failed transaction error details.",
            "format": "int64"
          },
          "errorCodes": {
            "type": "array",
            "description": "Error codes corresponding to failed transactions.",
            "items": {
              "type": "string"
            }
          },
          "errorDescription": {
            "type": "string",
            "description": "Description belongs to failed transactions."
          },
          "errorTransactionId": {
            "type": "integer",
            "description": "Unique transaction for failed records.",
            "format": "int64"
          },
          "index": {
            "type": "integer",
            "description": "Representing page number from a paginated result with 0 denoting as page 1.",
            "format": "int64"
          },
          "integrationExecutionId": {
            "type": "integer",
            "description": "Unique ID for the integration run.",
            "format": "int64"
          },
          "integrationName": {
            "type": "string",
            "description": "Name of the installed integration that is the basis of this integration run."
          },
          "integrationRunName": {
            "type": "string",
            "description": "A unique integration run name to make it easier to identify the run of that integration."
          },
          "propertyValues": {
            "type": "array",
            "description": "Key identifier from the source causing the error.",
            "items": {
              "type": "string"
            }
          },
          "requestDateRange": {
            "$ref": "#/components/schemas/TARequestDateRange"
          },
          "sourceType": {
            "type": "string",
            "description": "Source of execution like SDM, UDM or Ihub.",
            "enum": [
              "IHUB",
              "SDM",
              "UDM"
            ]
          },
          "transactionType": {
            "type": "string",
            "description": "The type of transactions run."
          }
        },
        "description": "Request to fetch details for transaction assistant data."
      },
      "transaction-assistant-api_TAResponseDataBean": {
        "type": "object",
        "properties": {
          "apiEndPoint": {
            "type": "string",
            "description": "The API end point for the transaction."
          },
          "dataSourceId": {
            "type": "integer",
            "description": "ID belongs to the failed transaction error details.",
            "format": "int64"
          },
          "endDateTime": {
            "type": "string",
            "description": "The ending date time of a date range."
          },
          "errorCode": {
            "type": "string",
            "description": "Error codes corresponding to failed transactions."
          },
          "errorDateTime": {
            "type": "string",
            "description": "Date time of transaction error."
          },
          "errorDescription": {
            "type": "string",
            "description": "Description belongs to failed transactions."
          },
          "errorTransactionId": {
            "type": "integer",
            "description": "Unique transaction for failed records.",
            "format": "int64"
          },
          "integrationExecutionId": {
            "type": "integer",
            "description": "Unique ID for the integration run.",
            "format": "int64"
          },
          "integrationName": {
            "type": "string",
            "description": "Name of the installed integration that is the basis of this integration run."
          },
          "integrationRunName": {
            "type": "string",
            "description": "A unique integration run name to make it easier to identify the run of that integration."
          },
          "propertyName": {
            "type": "string",
            "description": "Key identifier from the source causing the error."
          },
          "propertyValue": {
            "type": "string",
            "description": "Key identifier from the source causing the error."
          },
          "requestBody": {
            "type": "object",
            "properties": {},
            "description": "Request body."
          },
          "requestBodySize": {
            "type": "integer",
            "description": "Request body size.",
            "format": "int64"
          },
          "requestHeader": {
            "type": "string",
            "description": "Request header."
          },
          "requestKey": {
            "type": "integer",
            "description": "Request key.",
            "format": "int64"
          },
          "retrySourceType": {
            "type": "string",
            "description": "The retry source type."
          },
          "sourceDetails": {
            "type": "string",
            "description": "Source of the transaction error."
          },
          "sourceType": {
            "type": "string",
            "description": "Source of execution like SDM, UDM or Ihub."
          },
          "startDateTime": {
            "type": "string",
            "description": "The starting date time of a date range."
          },
          "transactionType": {
            "type": "string",
            "description": "The type of transactions run."
          }
        },
        "description": "Response object represent details of transaction assistant data."
      },
      "TransferObjectRef": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "qualifier": {
            "type": "string"
          }
        }
      },
      "WiFi Access Point Multi Delete Request Where": {
        "type": "object",
        "properties": {
          "wifiAccessPoints": {
            "$ref": "#/components/schemas/Wifi Access Point Id List"
          }
        },
        "description": "WiFi Access Point Multi Delete Request Where object encapsulates WiFi Access Point ID List for deletion."
      },
      "WiFi Network Multi Delete Request Where": {
        "required": [
          "wifiNetworks"
        ],
        "type": "object",
        "properties": {
          "wifiNetworks": {
            "$ref": "#/components/schemas/Wifi Network Id List"
          }
        },
        "description": "The where clause of a Delete WiFi Networks request in which the criteria for deleting WiFi Networks is specified."
      },
      "EffectiveHoursOfOperation": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "effectiveSpan": {
            "$ref": "#/components/schemas/LocalDateSpan"
          },
          "items": {
            "type": "array",
            "description": "A list of Hours of Operation items.",
            "items": {
              "$ref": "#/components/schemas/HoursOfOperationItem"
            }
          },
          "unrestrictedEdit": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not an unrestricted edit is associated with Hours of Operation. Defaults to false."
          }
        },
        "description": "Model context for effective version of Hours of Operation."
      },
      "EffectiveHoursOfOperationMultiDelete": {
        "required": [
          "hoursOfOperation"
        ],
        "type": "object",
        "properties": {
          "hoursOfOperation": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        },
        "description": "Model for multi delete Hours Of Operation with effective versions"
      },
      "EffectiveHoursOfOperationMultiRead": {
        "required": [
          "hoursOfOperation"
        ],
        "type": "object",
        "properties": {
          "hoursOfOperation": {
            "$ref": "#/components/schemas/ObjectRefList"
          }
        },
        "description": "Model for the Retrieve Hours Of Operation Effective Versions operation."
      },
      "EffectiveHoursOfOperationDelete": {
        "required": [
          "effectiveVersion",
          "id"
        ],
        "type": "object",
        "properties": {
          "effectiveVersion": {
            "$ref": "#/components/schemas/HoursOfOperationEffectiveVersion"
          },
          "id": {
            "type": "integer",
            "description": "The ID of an Hours Of Operation effective version.",
            "format": "int64"
          }
        },
        "description": "Context for delete effective version of hours of operation."
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "description": "The category of a data element - EMPLOYEE_SUMMARY, TIMEKEEPING, SCHEDULING, ATTENDANCE, KPI, LEAVE, GROUP_EDIT_RESULT, AUDIT, LOCATION and MOCK_DATA.",
            "items": {
              "type": "string",
              "enum": [
                "EMPLOYEE_SUMMARY",
                "KPI",
                "GROUP_EDIT_RESULT",
                "LOCATION",
                "MOCK_DATA",
                "AUDIT",
                "COST_CENTER",
                "EMPLOYEE",
                "TIMEKEEPING",
                "ATTENDANCE_ACTIONS",
                "ATTENDANCE",
                "ATTENDANCE_BALANCE_RESET",
                "ATTENDANCE_BALANCE_UPDATE",
                "ATTENDANCE_DAILY_SUMMARY",
                "ATTENDANCE_DAILY",
                "ATTENDANCE_DISCIPLINE_LEVEL",
                "ATTENDANCE_EVENTS",
                "ATTENDANCE_EXPIRING_POINTS",
                "PERFECT_ATTENDANCE_AWARDS",
                "PERFECT_ATTENDANCE_DEDUCTIONS",
                "PERFECT_ATTENDANCE_DISQUALIFICATION",
                "ATTENDANCE_PERIOD_SUMMARY",
                "ATTENDANCE_PROFILE",
                "LICENSES",
                "GROUP_EDIT",
                "DATA_STATUS",
                "ABSENTEEISM",
                "ACTUAL_VS_SCHEDULE",
                "EXCEPTIONS",
                "NON_PRODUCTIVE",
                "OVERTIME",
                "PRODUCTIVE",
                "REGULAR",
                "ROUNDING_RULES",
                "TRAINING",
                "ACTUAL_TOTALS",
                "APPROVALS",
                "PROJECTED_TOTALS",
                "SCHEDULED_TOTALS",
                "LEAVE",
                "BUSINESS_STRUCTURE",
                "SCHEDULING",
                "SCHEDULE_GROUP",
                "TIMECARD",
                "ACCRUALS",
                "AUDIT_PUNCH",
                "AUDIT_PUNCH_COMMENT",
                "EMPLOYEE_HCM",
                "CALENDAR",
                "STATUTORY_REPORTING",
                "TARGET",
                "MOBILE_APP",
                "FORECASTING",
                "PAID",
                "WORK_AUDIT_ACTIVITY_SEGMENT",
                "WORK_AUDIT_RESULT",
                "WORK_TOTALS",
                "WORK_RAW_INPUT",
                "WORK_RAW_RESULTS",
                "WORK_ACTIVITY_SEGMENT",
                "WORK_RESULT",
                "WORK_ACTIVITY_DEFINITION",
                "WORK_EFFICIENCY",
                "REQUESTS",
                "KIOSK",
                "HEALTHCARE_ANALYTICS",
                "ASSIGNMENT",
                "AUDITOR",
                "UNSUPPORTED",
                "WAGE_WORKRULE_OVERRIDE",
                "ACTIVITY_TEAM",
                "ACTIVITY_TEAM_SEGMENT",
                "ACTIVITY_TEAM_RESULT"
              ]
            }
          },
          "dataProviders": {
            "type": "array",
            "description": "The domain from which a set of data originates. The following are supported domain values - TK, SCH, ATTENDANCE, PEOPLE, KPI, LEAVE, LOCATION, MOCK_ORG, GROUP_EDIT_RESULT, AUDIT, MOCK_DATA and CORE_ENTITY.",
            "items": {
              "type": "string",
              "enum": [
                "TK",
                "SCH",
                "ATTENDANCE",
                "PEOPLE",
                "KPI",
                "LEAVE",
                "LOCATION",
                "MOCK_ORG",
                "GROUP_EDIT_RESULT",
                "AUDIT",
                "MOCK_DATA",
                "CORE_ENTITY",
                "DATAVIEW",
                "SCH_ZSA",
                "SCH_WORKLOAD_COVERAGE_DETAILS",
                "POST_UNPOST_SCH",
                "SCH_VOLUME",
                "SCH_SWAP_SHIFT",
                "SCH_AVAILABILITY_REQUEST",
                "SCH_AUDIT",
                "FOR_AUDIT",
                "THIRD_PARTY",
                "MOBILE_APP",
                "INTERNAL_API",
                "SCH_INCOMING_TORS_COUNT",
                "HCA",
                "ENTITIES_STATIC_PROPERTY_PROVIDER",
                "UNSUPPORTED"
              ]
            }
          },
          "dataTypes": {
            "type": "array",
            "description": "A list of supported data types. They are STRING, DATE, DATETIME, TIME, LONG, BOOLEAN, NUMBER ad ENUM.",
            "items": {
              "type": "string",
              "enum": [
                "STRING",
                "DATE",
                "DATETIME",
                "TIME",
                "BOOLEAN",
                "NUMBER",
                "ENUM",
                "UNSUPPORTED"
              ]
            }
          },
          "empTSEntityDefinitions": {
            "uniqueItems": true,
            "type": "array",
            "description": "A list of references to employee TS entity definitions.",
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            }
          },
          "entityDefinitions": {
            "uniqueItems": true,
            "type": "array",
            "description": "The entity definition for a data element.",
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            }
          },
          "formattingPolicies": {
            "type": "array",
            "description": "A set of policies for applying formats to a set of data. Supported formatting policies are - DEFAULT, CURRENCY, PERCENTAGE, TIMEDURATION, DAYDURATION, LONGDATE, BALANCE_AMOUNT. For NUMBER and LONG data type the supported policies are - DEFAULT, CURRENCY, PERCENTAGE, TIMEDURATION, DAYDURATION. For DATE the supported policies are DEFAULT, LONGDATE, SHORTDATE and DAYMONTH.",
            "items": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "CURRENCY",
                "PERCENTAGE",
                "TIMEDURATION",
                "LONGDATE",
                "SHORTDATE",
                "DAYMONTH",
                "BALANCE_AMOUNT",
                "TIMEINCREMENT",
                "UNSUPPORTED"
              ]
            }
          },
          "licenses": {
            "type": "array",
            "description": "The license types for a data element. Currently, only DEFAULT is supported. Other licenses will be supported in future releases.",
            "items": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "UNSUPPORTED"
              ]
            }
          },
          "orgEntityDefinitions": {
            "uniqueItems": true,
            "type": "array",
            "description": "The Organization Entity definition for a data element.",
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            }
          },
          "orgTSEntityDefinitions": {
            "uniqueItems": true,
            "type": "array",
            "description": "A list of references to organization TS entity definitions.",
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            }
          },
          "providerDataUnits": {
            "type": "array",
            "description": "The Provider Data Unit for a data element - HOURS or MILLISECONDS.",
            "items": {
              "type": "string",
              "enum": [
                "HOURS",
                "MINUTES",
                "SECONDS",
                "MILLISECONDS",
                "UNSUPPORTED"
              ]
            }
          },
          "roundingPolicies": {
            "type": "array",
            "description": "The supported rounding policies. Only applicable for NUMBER data type. Supported rounding policies are - ROUND_HALF_EVEN (6), ROUND_UP (0), ROUND_DOWN (1), ROUND_CEILING (2), ROUND_FLOOR (3), ROUND_HALF_UP (5) and ROUND_UNNECESSARY (7). If none specified ROUND_HALF_EVEN is applied by default.",
            "items": {
              "type": "string",
              "enum": [
                "6",
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "7"
              ]
            }
          },
          "sortPolicies": {
            "type": "array",
            "description": "A sorting policies that can be applied for a data element. The supported policies are DEFAULT, STRING_SORT and NUMBER_SORT. User shall select NUMER_SORT for NUMBER and LONG data type. STRING_SORT for BOOLEAN, STRING data type and leave it to default if not sure.",
            "items": {
              "type": "string",
              "enum": [
                "DEFAULT",
                "STRING_SORT",
                "NUMBER_SORT",
                "UNSUPPORTED"
              ]
            }
          },
          "views": {
            "type": "array",
            "description": "The view in which data is rendered. Supported views are EMPLOYEE, ORGANIZATION, EMPLOYEE TIMESERIES, or ORGANIZATION TIMESERIES, enumerated as 0-EMP , 1-ORG , 2-EMP_TIME_SERIES and 3-ORGANIZATION_TIME_SERIES.",
            "items": {
              "type": "string",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5"
              ]
            }
          },
          "workunitEntityDefinitions": {
            "uniqueItems": true,
            "type": "array",
            "description": "A list of work unit entity definitions.",
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            }
          },
          "workunitTSEntityDefinitions": {
            "uniqueItems": true,
            "type": "array",
            "description": "A list of work unit TS entity definitions.",
            "items": {
              "$ref": "#/components/schemas/IEntityDefinition"
            }
          }
        },
        "description": "Metadata that describes a data element. Metadata would include dataType, views (Data Sources), sortPolicies, roundingPolicies, formattingPolicies, categories, licenses, dataProviders and entityDefinitions"
      },
      "Access Method Detail": {
        "type": "object",
        "properties": {
          "accessMethodType": {
            "type": "string",
            "description": "The access method type."
          },
          "accessMethodValue": {
            "$ref": "#/components/schemas/ObjectRef"
          }
        },
        "description": "The Access Method Detail object model."
      },
      "MultiOperationWhereRefs": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "qualifiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        }
      },
      "AvgPayRatePartialResultObject": {
        "required": [
          "error",
          "success"
        ],
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/AvgPayRateErrorResultObject"
          },
          "success": {
            "type": "object",
            "properties": {},
            "description": "A success body associated with partial response details."
          }
        },
        "description": "Context for partial response details."
      },
      "AveragePayRateSetIds": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "A list of average pay rate set IDs.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "description": "Model context for a list of average pay rate set IDs."
      },
      "laborCategoryEntryFilterCriteria": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of an entity."
          },
          "inactive": {
            "type": "boolean",
            "description": "A Boolean indicator of whether or not a labor category entry is inactive."
          },
          "ivrNum": {
            "type": "string",
            "description": "Labor category entry ivr number."
          },
          "name": {
            "type": "string",
            "description": "The name of an entity."
          },
          "supportPartialStringMatch": {
            "type": "boolean",
            "description": "The Boolean indicator of whether to enable or disable partial matching. Default value is true."
          }
        },
        "description": "An entity containing parameters for filtering."
      },
      "LaborCategoryObjectRefs": {
        "type": "object",
        "properties": {
          "ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "persistentIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "qualifiers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refs": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Labor Category Object Reference Setup Model"
            }
          }
        }
      },
      "Component": {
        "type": "object",
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {}
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "CONTEXT",
              "INFOMETRIC",
              "CHART",
              "DATASTORY",
              "COLLECTIONS",
              "UNSUPPORTED"
            ]
          }
        }
      },
      "Custom Tile Navigation Information": {
        "required": [
          "labels",
          "menuId",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "label": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "description": "The label to show with a navigation link.",
            "items": {
              "$ref": "#/components/schemas/Custom Tile Labels"
            }
          },
          "menuId": {
            "type": "string",
            "description": "The ID of the menu."
          },
          "type": {
            "type": "string",
            "description": "The type of navigation used. This parameter determines whether to open the destination page in the same tab or a new tab."
          },
          "url": {
            "type": "string",
            "description": "The URL of the destination page as a FQDN or a relative URL."
          }
        },
        "description": "Custom tile navigation data. The navigation information is used for navigating to other pages from the current tile."
      },
      "Multi Read References which contains actual criterias": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "An array of employee group IDs. Employee groups are retrieved for valid identifiers specified in this array.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "persistentIds": {
            "type": "array",
            "description": "An array of persistent IDs of Hyperfind queries.",
            "items": {
              "type": "string"
            }
          },
          "qualifiers": {
            "type": "array",
            "description": "An array of employee group names. Employee groups are retrieved for valid names specified in this array.",
            "items": {
              "type": "string"
            }
          },
          "refs": {
            "type": "array",
            "description": "An array of references to employee group objects. Employee groups are retrieved for valid IDs or names specified in this array of object references.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef Entity"
            }
          }
        },
        "description": "The multi_read references which contain the actual criteria for retrieving employee groups."
      },
      "EntityReference": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "qualifiers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        }
      },
      "UriBuilder": {
        "type": "object"
      },
      "SetupItemDTO": {
        "type": "object",
        "properties": {
          "availableItems": {
            "type": "array",
            "description": "Model containing information for available items of generic data access profiles.",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "setupItem": {
            "type": "string",
            "description": "Model containing information for a generic data access profiles setup item."
          }
        },
        "description": "Model containing information for a generic data access profiles setup item."
      },
      "HooPartialResultForRest": {
        "required": [
          "error",
          "success"
        ],
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/HooErrorResultForRest"
          },
          "success": {
            "type": "object",
            "properties": {},
            "description": "The success details associated with the response."
          }
        },
        "description": "Model describing the result of the REST processing request."
      },
      "PayGroupCriteria": {
        "required": [
          "payGroup"
        ],
        "type": "object",
        "properties": {
          "payGroup": {
            "$ref": "#/components/schemas/PayGroup"
          }
        },
        "description": "Paygroup criterion to filter employee."
      },
      "payrollstagingdetailserror": {
        "required": [
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "employeeIds": {
            "type": "array",
            "description": "A list of employee IDs associated with a payroll extraction request.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "employeeQualifiers": {
            "type": "array",
            "description": "A list of employee qualifiers associated with a payroll extraction request.",
            "items": {
              "type": "string"
            }
          },
          "errorCode": {
            "type": "string",
            "description": "An error code associated with a payroll extraction request."
          },
          "message": {
            "type": "string",
            "description": "An error message associated with a payroll extraction request."
          }
        },
        "description": "The payroll extraction error model."
      },
      "payrollstagingdetailssuccess": {
        "type": "object",
        "properties": {
          "employeeIds": {
            "type": "array",
            "description": "A list of employee IDs associated with a successful payroll extraction.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "employeeQualifiers": {
            "type": "array",
            "description": "A list of employee qualifiers associated with a successful payroll extraction. The employee qualifier is the person number, which is a unique identifier for a person. The person number is not the same as an employee ID.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The payroll extraction staging details success model."
      },
      "SimpleTimeZoneBean": {
        "type": "object",
        "properties": {
          "endDay": {
            "type": "integer",
            "format": "int32"
          },
          "endDayOfWeek": {
            "type": "integer",
            "format": "int32"
          },
          "endMonth": {
            "type": "integer",
            "format": "int32"
          },
          "endTime": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "string"
          },
          "rawOffset": {
            "type": "integer",
            "format": "int32"
          },
          "startDay": {
            "type": "integer",
            "format": "int32"
          },
          "startDayOfWeek": {
            "type": "integer",
            "format": "int32"
          },
          "startMonth": {
            "type": "integer",
            "format": "int32"
          },
          "startTime": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ZoneRules": {
        "type": "object",
        "properties": {
          "fixedOffset": {
            "type": "boolean"
          },
          "transitionRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneOffsetTransitionRule"
            }
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ZoneOffsetTransition"
            }
          }
        }
      },
      "SchedulingAbstractSpan": {
        "type": "object",
        "properties": {
          "end": {
            "$ref": "#/components/schemas/Comparable"
          },
          "start": {
            "$ref": "#/components/schemas/Comparable"
          }
        },
        "discriminator": {
          "propertyName": "start"
        }
      },
      "PayPeriodRequest": {
        "required": [
          "symbolicPeriod"
        ],
        "type": "object",
        "properties": {
          "refDate": {
            "type": "string",
            "description": "The refDate to be used for searching."
          },
          "symbolicPeriod": {
            "$ref": "#/components/schemas/SymbolicRequest"
          },
          "workunit": {
            "$ref": "#/components/schemas/WorkUnitDTO"
          }
        }
      },
      "TimezoneTenantDefaultWhere": {
        "required": [
          "timezoneId"
        ],
        "type": "object",
        "properties": {
          "timezoneId": {
            "type": "integer",
            "description": "The ID of a timezone.",
            "format": "int64"
          }
        },
        "description": "Model for criteria related to LocalePolicy apply update request."
      },
      "TARequestDateRange": {
        "type": "object",
        "properties": {
          "endDateTime": {
            "type": "string",
            "description": "The ending date time of a date range."
          },
          "startDateTime": {
            "type": "string",
            "description": "The starting date time of a date range."
          }
        }
      },
      "Wifi Access Point Id List": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "A list of WiFi Access Point IDs.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "description": "WiFi Access Point ID List model."
      },
      "Wifi Network Id List": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "A list of WiFi Network IDs.",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "description": "WiFi Network ID List model."
      },
      "HoursOfOperationEffectiveVersion": {
        "required": [
          "effectiveDate"
        ],
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "string",
            "description": "An Hours Of Operation effective version.",
            "format": "date"
          }
        },
        "description": "Model for Hours Of Operation effective version."
      },
      "IEntityDefinition": {
        "type": "object",
        "properties": {
          "children": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/IEntityDefinition"
              }
            }
          },
          "chunk": {
            "$ref": "#/components/schemas/ChunkDefinition"
          },
          "coreEntityKey": {
            "$ref": "#/components/schemas/BitSet"
          },
          "dataSource": {
            "type": "string"
          },
          "dataSourceId": {
            "type": "string"
          },
          "entity": {
            "$ref": "#/components/schemas/Entity"
          },
          "joinCondition": {
            "type": "string",
            "enum": [
              "CORE_ENTITY_MATCH",
              "SAME_ENTITY_GRAPH_ID_MATCH",
              "CORE_ENTITY_ORG_JOB_MATCH",
              "UNSUPPORTED"
            ]
          },
          "oneToMany": {
            "type": "boolean"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationDefinition"
          },
          "parent": {
            "$ref": "#/components/schemas/IEntityDefinition"
          },
          "root": {
            "$ref": "#/components/schemas/IEntityDefinition"
          },
          "serviceLimitProperty": {
            "type": "string"
          }
        }
      },
      "AvgPayRateErrorResultObject": {
        "required": [
          "details",
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/AvgPayRateErrorDetailsObject"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code associated with an error result."
          },
          "message": {
            "type": "string",
            "description": "The message associated with an error result."
          }
        },
        "description": "Model context for an error result."
      },
      "ObjectRef Entity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Object Ref Id",
            "format": "int64"
          },
          "qualifier": {
            "type": "string",
            "description": "Object Ref Unique qualifier"
          }
        },
        "description": "ObjectRef contains an id and qualifier and either field should be able to uniquely identify an Object"
      },
      "HooErrorResultForRest": {
        "required": [
          "details",
          "errorCode",
          "message"
        ],
        "type": "object",
        "properties": {
          "details": {
            "$ref": "#/components/schemas/ErrorDetailsForRest"
          },
          "errorCode": {
            "type": "string",
            "description": "The error code associated with an error response."
          },
          "message": {
            "type": "string",
            "description": "The message associated with an error response."
          }
        },
        "description": "Model describing the error processing request."
      },
      "PayGroup": {
        "type": "object",
        "properties": {
          "costCenter": {
            "type": "array",
            "description": "A list of references to cost centers.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "customField": {
            "type": "array",
            "description": "A list of custom fields.",
            "items": {
              "$ref": "#/components/schemas/PayrollExtractCustomField"
            }
          },
          "laborCategoryEntry": {
            "type": "array",
            "description": "A list of references to labor category entries.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "orgPath": {
            "type": "array",
            "description": "A list of references to org path nodes, which are locations on the Business Structure.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "payRule": {
            "type": "array",
            "description": "A list of references to pay rules.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "positionCustomField": {
            "type": "array",
            "description": "A list of position custom fields.",
            "items": {
              "$ref": "#/components/schemas/PayrollExtractPositionCustomField"
            }
          },
          "workerType": {
            "type": "array",
            "description": "A list of references to worker types.",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        },
        "description": "The pay group employees model."
      },
      "ZoneOffsetTransitionRule": {
        "type": "object",
        "properties": {
          "dayOfMonthIndicator": {
            "type": "integer",
            "format": "int32"
          },
          "dayOfWeek": {
            "type": "string",
            "enum": [
              "MONDAY",
              "TUESDAY",
              "WEDNESDAY",
              "THURSDAY",
              "FRIDAY",
              "SATURDAY",
              "SUNDAY"
            ]
          },
          "localTime": {
            "type": "string"
          },
          "midnightEndOfDay": {
            "type": "boolean"
          },
          "month": {
            "type": "string",
            "enum": [
              "JANUARY",
              "FEBRUARY",
              "MARCH",
              "APRIL",
              "MAY",
              "JUNE",
              "JULY",
              "AUGUST",
              "SEPTEMBER",
              "OCTOBER",
              "NOVEMBER",
              "DECEMBER"
            ]
          },
          "offsetAfter": {
            "$ref": "#/components/schemas/ZoneOffset"
          },
          "offsetBefore": {
            "$ref": "#/components/schemas/ZoneOffset"
          },
          "standardOffset": {
            "$ref": "#/components/schemas/ZoneOffset"
          },
          "timeDefinition": {
            "type": "string",
            "enum": [
              "UTC",
              "WALL",
              "STANDARD"
            ]
          }
        }
      },
      "ZoneOffsetTransition": {
        "type": "object",
        "properties": {
          "dateTimeAfter": {
            "type": "string"
          },
          "dateTimeBefore": {
            "type": "string"
          },
          "duration": {
            "$ref": "#/components/schemas/Duration"
          },
          "gap": {
            "type": "boolean"
          },
          "instant": {
            "type": "integer",
            "format": "int64"
          },
          "offsetAfter": {
            "$ref": "#/components/schemas/ZoneOffset"
          },
          "offsetBefore": {
            "$ref": "#/components/schemas/ZoneOffset"
          },
          "overlap": {
            "type": "boolean"
          }
        }
      },
      "Comparable": {
        "type": "object"
      },
      "SymbolicRequest": {
        "required": [
          "qualifier"
        ],
        "type": "object",
        "properties": {
          "qualifier": {
            "type": "string",
            "description": "The Symbolic qualifier to be used for searching."
          }
        }
      },
      "WorkUnitDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The workunitId to be used for searching.",
            "format": "int64"
          },
          "qualifier": {
            "type": "string",
            "description": "The workunitCode to be used for searching."
          }
        }
      },
      "ChunkDefinition": {
        "type": "object",
        "properties": {
          "chunkProperty": {
            "type": "string"
          },
          "chunkServiceLimitProperty": {
            "type": "string"
          }
        }
      },
      "BitSet": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          }
        }
      },
      "Entity": {
        "type": "object",
        "properties": {
          "composed": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PaginationDefinition": {
        "type": "object",
        "properties": {
          "pageSizeProperty": {
            "type": "string"
          },
          "paginationProperty": {
            "type": "string"
          },
          "paginationServiceLimitProperty": {
            "type": "string"
          }
        }
      },
      "AvgPayRateErrorDetailsObject": {
        "required": [
          "input"
        ],
        "type": "object",
        "properties": {
          "input": {
            "type": "object",
            "properties": {},
            "description": "The input associated with error details."
          }
        },
        "description": "Model context for error details."
      },
      "ErrorDetailsForRest": {
        "required": [
          "input"
        ],
        "type": "object",
        "properties": {
          "input": {
            "type": "object",
            "properties": {},
            "description": "The input associated with error details."
          }
        },
        "description": "Model context for error details."
      },
      "PayrollExtractCustomField": {
        "required": [
          "label",
          "values"
        ],
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "values": {
            "type": "array",
            "description": "The string values in a custom field.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The payroll export custom field model."
      },
      "PayrollExtractPositionCustomField": {
        "required": [
          "label",
          "values"
        ],
        "type": "object",
        "properties": {
          "label": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "values": {
            "type": "array",
            "description": "The values associated with a position custom field.",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "The Position Custom field model."
      },
      "ZoneOffset": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rules": {
            "$ref": "#/components/schemas/ZoneRules"
          },
          "totalSeconds": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Duration": {
        "type": "object",
        "properties": {
          "nano": {
            "type": "integer",
            "format": "int32"
          },
          "negative": {
            "type": "boolean"
          },
          "seconds": {
            "type": "integer",
            "format": "int64"
          },
          "units": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemporalUnit"
            }
          },
          "zero": {
            "type": "boolean"
          }
        }
      },
      "TemporalUnit": {
        "type": "object",
        "properties": {
          "dateBased": {
            "type": "boolean"
          },
          "duration": {
            "$ref": "#/components/schemas/Duration"
          },
          "durationEstimated": {
            "type": "boolean"
          },
          "timeBased": {
            "type": "boolean"
          }
        }
      }
    }
  }
}