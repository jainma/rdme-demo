{
    "openapi": "3.0.0",
    "info": {
        "description": "Timekeeping",
        "title": "Timekeeping",
        "version": "1.0"
    },
    "tags": [
        {
            "description": "<p markdown=\"1\">From here you may browse our library of API resources, organized hierarchically by domain, or major functional area, logical subgroup, API resource, and all available operations against that resource. For more information about the concepts and technology behind our API, refer to the [Getting started](C:636f581c-50a8-41a7-af43-e5057f9c20bd) documentation.</p><p>Our platform provides a powerful application programming interface and documentation to help you develop secure, scalable, and high-performance applications that leverage the full breadth of capabilities offered by our backend services.</p><p markdown=\"1\">The Workforce Management suite's API is founded on a pragmatic implementation of the [representational state transfer](http://en.wikipedia.org/wiki/Representational_State_Transfer) architectural style and allows access to your organization's workforce management data using common HTTP methods and the [JSON](http://www.json.org) interchange format.</p>",
            "name": "API"
        },
        {
            "description": "This resource allows you to retrieve and modify absence spans. Absence spans begin with the first day of an absence and end on the very last day prior to the next worked day.",
            "name": "Absence Spans",
            "x-parent": "Timekeeping"
        },
        {
            "description": "<p>This resource allows you to move one or more accrual balances for multiple employees. The associated Function Access Control Point is API.Accrual.</p><p>Accruals normally represent entitlements, such as Vacation, Sick Leave, Bereavement and others, that are calculated by the system based on data entries from the Timecard, the API, or other entry points. Each accrual balance is associated with an accrual code, which is similar to a pay code. Each employee can have a unique set of accrual balances which are managed through an Accrual Profile.</p>",
            "name": "Accrual Move Balances",
            "x-parent": "Accruals"
        },
        {
            "description": "<p>Accruals normally represent entitlements, such as Vacation, Sick Leave, Bereavement and others, that are calculated by the system based on data entries from the Timecard, the API, or other entry points. Accruals operations are either transactions or balance inquiries/adjustments. Each accrual balance is associated with an accrual code, which is similar to a pay code. Each employee can have a unique set of accrual balances which are managed through an Accrual Profile.</p>",
            "name": "Accruals",
            "x-parent": "Timekeeping"
        },
        {
            "description": "<p>This resource allows you to perform bulk resets, payouts, and suspensions or reinstatements of accruals.</p>",
            "name": "Accruals Bulk Transactions",
            "x-parent": "Accruals"
        },
        {
            "description": "<p>This resource allows you to perform bulk updates of accruals.</p>",
            "name": "Accruals Bulk Update",
            "x-parent": "Accruals"
        },
        {
            "description": "<p>The Accruals resource allows you to manage one or more accrual balances or transactions within the system for one to many employees, including various accrual actions such as resets and updates. The operations on this resource support identifying child objects for ShiftTotals by Pay Code, Accrual Summaries, and bulk operations. The associated Function Access Control Point is API.Accrual.</p><p>Accruals normally represent entitlements, such as Vacation, Sick Leave, Bereavement and others, that are calculated by the system based on data entries from the Timecard, the API, or other entry points. Accruals operations are either transactions or balance inquiries/adjustments. Each accrual balance is associated with an accrual code, which is similar to a pay code. Each employee can have a unique set of accrual balances which are managed through an Accrual Profile.</p>",
            "name": "Accruals from Paycodes",
            "x-parent": "Accruals"
        },
        {
            "description": "This resource allows you to get Labor Category entries, Work Rules and Cost Centers in a single API call based on employee's transfer permissions",
            "name": "Aggregated Transfer Data",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to retrieve and manipulate Attestation answers.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Answers",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to create, read, update, and delete Attestation assignments.</p><p>Attestation assignments store a set of selected buttons, conditions, and workflows.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Assignments",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to create, read, update, and delete Attestation buttons.</p><p>Attestation buttons are used to initiate Attestation workflows and ask questions when corresponding conditions are met.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Buttons",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to create, read, update, and delete Attestation conditions.</p><p>Assigned Attestation workflows are triggered based on conditions passed by Attestation buttons.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Conditions",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to retrieve Attestation daily details.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Daily Details",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to create Attestation Display and Submit forms. Attestation forms allow devices and systems to display and record Attestation questions and answers.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Display and Submit Forms",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to retrieve a list of Attestation buttons associated with the logged-in user's Attestation profile.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Profile Buttons",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to create, read, update, and delete Attestation profiles. An Attestation profile is assigned to people and contains assignments with a set of selected buttons, conditions, and workflows.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Profiles",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to retrieve and manipulate Attestation questions.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Questions",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to read timecard data for unapproved days.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Unapproved Timecard Data",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to set Attestation workflow attributes.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Workflow Attributes",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to retrieve Attestation workflows.</p><p markdown=\"1\">Refer to the following topic for example calls and tutorials: [A Guide to Attestations](C:ac67ee79-7306-4f22-992d-ca6470b6ae79).</p>",
            "name": "Attestation Workflows",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>Attestation is the act of confirming or <em>attesting</em> that something is true. For example, when punching out, employees may need to attest that they took their meal breaks. Attestation functionality is a type of API-based business process used by timestamp, quick timestamp, and data collection devices. To use the attestation functionality, you must create or edit a workflow template, define the workflow properties, define attestation conditions, assign attestation buttons, create an attestation assignment consisting of a button, condition, and workflow combination, create an Attestation Profile, and assign that Attestation Profile to employees in People Information.</p>",
            "name": "Attestations",
            "x-parent": "Timekeeping"
        },
        {
            "description": "<p>This resource allows you to complete an Attestation process.</p>",
            "name": "Complete Attestation Process",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to complete a Manual Time Entry Attestation process.</p>",
            "name": "Complete Manual Time Entry Attestation Process",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to retrieve and manipulate exception categories.</p><p>Exception categories allow different exceptions to be grouped together into a bucket.</p>",
            "name": "Exception Categories",
            "x-parent": "Timekeeping"
        },
        {
            "description": "<p>This resource allows you to retrieve and manipulate exception tiles.</p><p>The exception tile provides an easy way for managers to review and manage exceptions across many employees before approving their timecards.</p>",
            "name": "Exception Tiles",
            "x-parent": "Timekeeping"
        },
        {
            "description": "This resource allows you to retrieve a list of Manual Time Entry workflows to execute.",
            "name": "Manual Time Entry Workflows",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to retrieve and manipulate Paycode Data Access Profiles and information associated with Paycode Data Access Profiles.</p><p>Paycode data access profiles specify the paycodes that users can access. Before you create a profile, you must define paycodes in Pay Policies Setup.</p><p>A paycode is a category of time or money that employees earn. For example, Regular Hours, Bonus, or Sick.</p>",
            "name": "Paycode Data Access Profiles",
            "x-parent": "Timekeeping"
        },
        {
            "description": "<p>This resource allows you to compute and save pending historical corrections asynchronously.</p>",
            "name": "Pending Historical Corrections",
            "x-parent": "Timekeeping"
        },
        {
            "description": "<p>The Signoffs resource allows you to retrieve employee timecard sign-off information, sign off an employee timecard, or remove an employee timecard sign-off. Timecard sign-off prevents further timecard and schedule edits and grants final approval to timecards before they are processed by payroll.</p>",
            "name": "Signoffs for Employee",
            "x-parent": "Timekeeping"
        },
        {
            "description": "<p>The Signoffs resource allows you to retrieve employee timecard sign-off information, sign off an employee timecard, or remove an employee timecard sign-off. Timecard sign-off prevents further timecard and schedule edits and grants final approval to timecards before they are processed by payroll.</p>",
            "name": "Signoffs for Manager",
            "x-parent": "Timekeeping"
        },
        {
            "description": "<p>This resource allows you to initiate an Attestation process which processes an Attestation request.</p>",
            "name": "Start Attestation Process",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>This resource allows you to initiate an offline Attestation process which processes an Attestation request.</p>",
            "name": "Start Offline Attestation Process",
            "x-parent": "Attestations"
        },
        {
            "description": "<p>Timekeeping automates the collection, management, and distribution of employee hours. It allows organizations to configure business rules for managing employee time, such as pay rules that determine what is overtime, who is eligible for overtime, who is working what job, and what is the schedule. This domain also allows organizations to schedule employees and manage accruals and vacation time. Time and labor data are collected from Series 4500 and InTouch terminals and delivered through Universal Device Manager to the suite, from which it can be used directly by Accruals, Activities, dataviews and reports, Insight Metrics, Scheduling, and other components.</p><p markdown=\"1\">Refer to the [Timekeeping overview](C:ad29a8be-acb9-4507-b489-3f67c4a2e4ae) topic in [Domain overviews](C:f2ccfb74-38e7-466a-a7c7-acddc3d2d00c) for more information.</p>",
            "name": "Timekeeping",
            "x-parent": "API"
        },
        {
            "description": "This resource allows you to retrieve information about Timekeeping alert profiles.",
            "name": "Timekeeping Alert Profiles",
            "x-parent": "Timekeeping"
        },
        {
            "description": "The Timestamps resource allows you to record in and out punches with a timestamp. Depending on your access rights, you may also be able to make job or work rule transfers and cancel meal or break deductions.",
            "name": "Timestamps",
            "x-parent": "Timekeeping"
        }
    ],
    "paths": {
        "/v1/commons/employee_transfers/apply_read": {
            "post": {
                "description": "<p>This operation returns Aggregated Transfer Data.</p><br /><p>The associated Access Control Points are EA_WORKRULE_TRANSFERS, EA_COSTCENTER_TRANSFERS, and EA_ACCOUNT_TRANSFERS.</p>",
                "operationId": "Return Aggregated Transfer Data",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Aggregated_Transfer_Request_Model"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully return Aggregated Transfer Data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Aggregated_Transfer_Model"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WCO-121201] - The value '{select-value}' specified in the select property is invalid. Valid values are: LABOR_ENTRIES, COST_CENTERS, or WORK_RULES. To return all entities, omit the select property.</li><li>[WCO-121202] - The where property is required.</li><li>[WCO-121203] - The date property within where is required.</li><li>[WCO-103015] - The organizational object reference is mandatory and cannot be missing or empty.</li><li>[laborcategory-common:47] - Location or Job not found. Location/Job: '{location}', Date: '{date}'</li></ul>"
                    }
                },
                "summary": "Return Aggregated Transfer Data",
                "tags": [
                    "Aggregated Transfer Data"
                ]
            }
        },
        "/v1/timekeeping/absence_spans/multi_read": {
            "post": {
                "description": "This operation returns absence spans by object references.",
                "operationId": "Retrieve Absence Spans",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Absence_Span_Request"
                            }
                        }
                    },
                    "description": "The request object used to retrieve absence spans.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully retrieved absence spans.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Absence_span_response_DTO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<p>Bad Request:</p> <ul> <li>[WTK-113011] - Employee data must be mutually exclusive. Please use either refs, or ids. </li> <li>[WTK-145300] - Some unknown error occurred. Please contact administrator. </li> <li>[WTK-145302] - Error occurred while processing all employees. See details for more information. </li> <li>[WTK-145305] - Multiple absence span service errors occurred. See details for more information. </li> <li>[WTK-145306] - Pay code is not found: {payCode}. </li> <li>[WTK-145307] - Pay code configuration error occurred. Stitchable combined pay code is empty: {name}. </li> <li>[WTK-145308] - Please provide stitchable combined pay code. </li> <li>[WTK-145309] - Provided pay period is not supported: {id}. </li> <li>[WTK-145311] - Pay Period Data for employee {id} does not exist. </li> <li>[WTK-145312] - Provided range type is not supported: {name}. </li> <li>[WTK-145313] - There is a cyclic dependence within combined pay code configuration. </li> <li>[WTK-145315] - Pay code configuration error occurred. Some pay codes belong to stitchable and ignorable groups. </li> <li>[WTK-145317] - The requested parameter {field} is missing. </li> <li>[WTK-145318] - Employee is not found: {id}. </li> <li>[WTK-145319] - ID and Qualifier for Symbolic Pay Period do not match. </li> <li>[WTK-145320] - Pay period is missing. </li> <li>[WTK-145321] - Invalid Absence Span Rollup Type. </li> <li> At least one required attribute is missing. </li> </ul>"
                    }
                },
                "summary": "Returns absence spans.",
                "tags": [
                    "Absence Spans"
                ]
            }
        },
        "/v1/timekeeping/accruals/moves": {
            "post": {
                "description": "This operation performs a <code>move</code> action on one or more accrual balances for multiple employees. This operation is used when transactions impacting accrual balances are performed outside of the system and accrual balances are not calculated by the system.",
                "operationId": "Move Accrual Balances for Multiple Employees",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkAccrualMoveContextAndDataForRest"
                            }
                        }
                    },
                    "description": "The Move Accrual Balances for Multiple Employees request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully applied updates to one or more accrual balances.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAccrualResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request."
                    }
                },
                "summary": "Applies a <code>move</code> action on one or more accrual balances.",
                "tags": [
                    "Accrual Move Balances"
                ]
            }
        },
        "/v1/timekeeping/accruals/payouts": {
            "post": {
                "description": "This operation performs a bulk accrual payout.",
                "operationId": "Bulk Accrual Payout",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccrualPayoutsImportRequestForRest"
                            }
                        }
                    },
                    "description": "The Bulk Accrual Payout request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully perform bulk accrual payout.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAccrualImportResponseForRest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "summary": "Performs a bulk accrual payout.",
                "tags": [
                    "Accruals Bulk Transactions"
                ]
            }
        },
        "/v1/timekeeping/accruals/resets": {
            "post": {
                "description": "This operation performs a bulk accrual reset.",
                "operationId": "Bulk Accrual Reset",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccrualResetsImportRequestForRest"
                            }
                        }
                    },
                    "description": "The Bulk Accrual Reset request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully perform bulk accrual reset.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAccrualImportResponseForRest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<p>Bad Request:</p> <ul> <li>[WTK-112001] - Missing qualifier for object ref lookup </li> <li>[WTK-112004] - ObjectRef with id: {id} could not be found </li> <li>[WTK-112005] - ObjectRef with qualifier: {qualifier} could not be found </li> <li>[WTK-113005] - You cannot do a bulk import during employee's signed-off timeframe. </li> <li>[WTK-135006] - Amount is too large. MaxValue : 9999. </li> <li>[WTK-135007] - Manual edits are not allowed on the provided accrual code. </li> <li>[WTK-135008] - Access right violation: reset is not allowed.</li> <li>[WTK-135010] - Cannot make changes prior to the hire date. </li> <li>[WTK-135013] - No accrual profile assigned or the accrual code is not part of the profile. </li> <li>[WTK-135030] - All accrual resets are failed to import. Accrual reset bulk import service was accessed with a bad data. </li> <li>[WTK-135031] - Some accrual resets are imported successfully, but some of them are failed to import. Accrual reset bulk import service was accessed with a bad data. </li> <li>[WTK-170000] - Invalid person number: {person number} </li> <li>[WTK-170001] - Invalid employee ID: {id} </li> </ul>"
                    }
                },
                "summary": "Performs a bulk accrual reset.",
                "tags": [
                    "Accruals Bulk Transactions"
                ]
            }
        },
        "/v1/timekeeping/accruals/suspensions": {
            "post": {
                "description": "This operation performs bulk accrual suspensions or reinstatements.",
                "operationId": "Bulk Accrual Suspensions or Reinstatements",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccrualSuspensionsImportRequestForRest"
                            }
                        }
                    },
                    "description": "The Bulk Accrual Suspensions or Reinstatements request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully performed bulk accrual suspension or reinstate.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkAccrualImportResponseForRest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "summary": "Performs bulk accrual suspensions or reinstatements.",
                "tags": [
                    "Accruals Bulk Transactions"
                ]
            }
        },
        "/v1/timekeeping/accruals/updates": {
            "post": {
                "description": "This operation updates accrual balances in bulk.",
                "operationId": "Apply Updates to Accrual Balances for Multiple Employees",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AccrualUpdateRestRequest"
                            }
                        }
                    },
                    "description": "The Apply Updates to Accrual Balances for Multiple Employees request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the accrual balances for the specified.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bulk_Accrual_Update_Response_Context"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: an error has occurred."
                    }
                },
                "summary": "Bulk updates accrual balances.",
                "tags": [
                    "Accruals Bulk Update"
                ]
            }
        },
        "/v1/timekeeping/attestation/displayed_forms": {
            "post": {
                "description": "This operation creates an Attestation Display Form.",
                "operationId": "Create Attestation Display Form",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Display_Form_DTO_object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully created an Attestation Display Form.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Display_Form_DTO_object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WTK-180870] - The '{paramName}' property is required.</li><li>[WTK-180871] - An attestation process with the ID '{id}' does not exist.</li><li>[WTK-180872] - The question property within attestationData is required.</li><li>[WTK-180873] - The id and text properties within question are required.</li><li>[WTK-180874] - The value '{id}' specified in the '{paramName}' property is not valid for the attestation process.</li></ul>"
                    }
                },
                "summary": "Creates an Attestation Display Form.",
                "tags": [
                    "Attestation Display and Submit Forms"
                ]
            }
        },
        "/v1/timekeeping/attestation/multi_read": {
            "post": {
                "description": "This operation returns Attestation data responses that contain Attestation daily details.",
                "operationId": "Retrieve Attestation Daily Details",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Data_Request"
                            }
                        }
                    },
                    "description": "An Attestation data request object that contains the name of required Attestation entity, a list of employees, and a date range or period."
                },
                "responses": {
                    "200": {
                        "description": "Successfully retrieved list of Attestation Daily Details.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Data_Response"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>WTK-180791 - Employees parameter: value of '{paramName}' property is missing or invalid.</li><li>WTK-180792 - Date Range parameter: value of '{paramName}' property is missing or invalid.</li><li>WTK-180793 - End Date less than Start Date.</li><li>WTK-180794 - Redundant parameter '{paramName}'.</li><li>WTK-180795 - Attestation entity name in 'select' is missing or invalid.</li><li>WTK-180796 - Missing '{paramName}' property in the request body.</li><li>WTK-180797 - Employee set is missing.</li></ul>"
                    }
                },
                "summary": "Returns Attestation data responses that contain Attestation daily details.",
                "tags": [
                    "Attestation Daily Details"
                ]
            }
        },
        "/v1/timekeeping/attestation/submitted_forms": {
            "post": {
                "description": "This operation creates an Attestation Submit Form.",
                "operationId": "Create Attestation Submit Form",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Submit_Form_DTO_object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully created an Attestation Submit Form.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Display_Form_DTO_object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WTK-180870] - The '{paramName}' property is required.</li><li>[WTK-180871] - An attestation process with the ID '{id}' does not exist.</li><li>[WTK-180872] - The question property within attestationData is required.</li><li>[WTK-180873] - The id and text properties within question are required.</li><li>[WTK-180874] - The value '{id}' specified in the '{paramName}' property is not valid for the attestation process.</li><li>[WTK-180875] - The value '{processInstanceId}' specified in the processInstanceId property and the value '{questionId}' specified in the id property for question are not valid for the attestation process</li></ul>"
                    }
                },
                "summary": "Creates an Attestation Submit Form.",
                "tags": [
                    "Attestation Display and Submit Forms"
                ]
            }
        },
        "/v1/timekeeping/attestation_answers": {
            "get": {
                "description": "<p>This operation returns a list of all Attestation answers.</p><br /><p>The associated Access Control Point is ATTESTATION_SETUP.</p>",
                "operationId": "Retrieve All Attestation Answers or by Name",
                "parameters": [
                    {
                        "description": "The name of an Attestation answer.",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Answer_DTO_object_Public"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Failure"
                    }
                },
                "summary": "Returns a list of all Attestion answers.",
                "tags": [
                    "Attestation Answers"
                ]
            },
            "post": {
                "description": "This operation creates an Attestation answer.",
                "operationId": "Create Attestation Answer",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                            }
                        }
                    },
                    "description": "The Create Attestation Answer request payload."
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Answer_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Answer_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failure"
                    },
                    "403": {
                        "description": "Failure"
                    }
                },
                "summary": "Creates an Attestation answer.",
                "tags": [
                    "Attestation Answers"
                ]
            }
        },
        "/v1/timekeeping/attestation_answers/multi_create": {
            "post": {
                "description": "This operation creates one or more Attestation answers.",
                "operationId": "Create Attestation Answers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "The Create Attestation Answers request payload.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failure"
                    }
                },
                "summary": "Creates one or more Attestation answers.",
                "tags": [
                    "Attestation Answers"
                ]
            }
        },
        "/v1/timekeeping/attestation_answers/multi_delete": {
            "post": {
                "description": "This operation deletes one or more Attestation answers.",
                "operationId": "Delete Attestation Answers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnswersRequest"
                            }
                        }
                    },
                    "description": "The Delete Attestation Answers request payload."
                },
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Failure"
                    }
                },
                "summary": "Deletes one or more Attestation answers.",
                "tags": [
                    "Attestation Answers"
                ]
            }
        },
        "/v1/timekeeping/attestation_answers/multi_read": {
            "post": {
                "description": "This operation returns one or more Attestation answers by object references.",
                "operationId": "Retrieve Attestation Answers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AnswersRequest"
                            }
                        }
                    },
                    "description": "The Retrieve Attestation Answers request payload.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failure"
                    }
                },
                "summary": "Returns one or more Attestation answers.",
                "tags": [
                    "Attestation Answers"
                ]
            }
        },
        "/v1/timekeeping/attestation_answers/multi_update": {
            "post": {
                "description": "This operation updates one or more Attestation answers.",
                "operationId": "Update Attestation Answers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "The Update Attestation Answers request payload.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failure"
                    }
                },
                "summary": "Updates one or more Attestation answers.",
                "tags": [
                    "Attestation Answers"
                ]
            }
        },
        "/v1/timekeeping/attestation_answers/setup/action_types": {
            "get": {
                "description": "This operartion returns action types for Attestation answers.",
                "operationId": "Retrieve Action Types for Attestation Answers",
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "summary": "Returns action types for Attestation answers.",
                "tags": [
                    "Attestation Answers"
                ]
            }
        },
        "/v1/timekeeping/attestation_answers/{id}": {
            "delete": {
                "description": "This operation deletes an Attestation answer by ID.",
                "operationId": "Delete Attestation Answer by ID",
                "parameters": [
                    {
                        "description": "The ID of an Attestation answer.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Failure"
                    },
                    "404": {
                        "description": "Failure"
                    }
                },
                "summary": "Deletes an Attestation answer.",
                "tags": [
                    "Attestation Answers"
                ]
            },
            "get": {
                "description": "<p>This operation returns an Attestation answer by ID.</p><br /><p>The associated Access Control Point is ATTESTATION_SETUP.</p>",
                "operationId": "Retrieve Attestation Answer by ID",
                "parameters": [
                    {
                        "description": "The ID of an Attestation answer.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Answer_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Failure"
                    },
                    "404": {
                        "description": "Failure"
                    }
                },
                "summary": "Returns an Attestation answer.",
                "tags": [
                    "Attestation Answers"
                ]
            },
            "put": {
                "description": "This operation updates an Attestation answer by ID.",
                "operationId": "Update Attestation Answer by ID",
                "parameters": [
                    {
                        "description": "The ID of an Attestation answer.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                            }
                        }
                    },
                    "description": "The Update Attestation Answer by ID request payload."
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Answer_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failure"
                    },
                    "403": {
                        "description": "Failure"
                    },
                    "404": {
                        "description": "Failure"
                    }
                },
                "summary": "Updates an Attestation answer.",
                "tags": [
                    "Attestation Answers"
                ]
            }
        },
        "/v1/timekeeping/attestation_assignments": {
            "get": {
                "description": "This operation returns a list of all Attestation assignments.",
                "operationId": "Retrieve All Attestation Assignments",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of all Attestation assignments.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Assignment_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Returns a list of all Attestation assignments.",
                "tags": [
                    "Attestation Assignments"
                ]
            },
            "post": {
                "description": "This operation creates an Attestation assignment.",
                "operationId": "Create Attestation Assignment",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Attestation_Assignment_DTO_object"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Assignment_DTO_object"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully created an Attestation assignment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Assignment_DTO_object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<ul><li>[WTK-180741] - Missing Assignment name.</li><li>[WTK-180742] - Duplicate Assignment name.</li><li>[WTK-180632] - Only letters and space are allowed to enter.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li><li>[WTK-180743] - Attestation Condition, Attestation Button and Attestation Workflows must be specified.</li><li>[WTK-180892] - You cannot use a 'Manual Time Entry' workflow with the 'Timecard Action' button type.</li><li>[WTK-180894] - You cannot create or update an Attestation Assignment with the 'manualTimeEntryWorkflow' property specified when the Missed Attestation feature is disabled.</li></ul>"
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "<ul><li>[WTK-180680] - An Attestation Condition with the specified id does not exist.</li><li>[WTK-180626] - An Attestation Button with the specified id does not exist.</li></ul>"
                    }
                },
                "summary": "Creates an Attestation assignment.",
                "tags": [
                    "Attestation Assignments"
                ]
            }
        },
        "/v1/timekeeping/attestation_assignments/{id}": {
            "delete": {
                "description": "This operation deletes an Attestation assignment by ID.",
                "operationId": "Delete Attestation Assignment by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation assignment to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted an Attestation assignment by ID."
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An attestation assignment with the specified ID was not found."
                    }
                },
                "summary": "Deletes an Attestation assignment.",
                "tags": [
                    "Attestation Assignments"
                ]
            },
            "get": {
                "description": "This operation returns an Attestation assignment by ID.",
                "operationId": "Retrieve Attestation Assignment by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation assignment.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved an Attestation assignment by ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Assignment_DTO_object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An attestation assignment with the specified ID was not found."
                    }
                },
                "summary": "Returns an Attestation assignment.",
                "tags": [
                    "Attestation Assignments"
                ]
            },
            "put": {
                "description": "This operation updates an Attestation assignment by ID.",
                "operationId": "Update Attestation Assignment by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation assignment to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Attestation_Assignment_DTO_object"
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated attestation assignment.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Assignment_DTO_object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<ul><li>[WTK-180741] - Missing Assignment name.</li><li>[WTK-180742] - Duplicate Assignment name.</li><li>[WTK-180632] - Only letters and space are allowed to enter.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li><li>[WTK-180743] - Attestation Condition, Attestation Button and Attestation Workflows must be specified.</li><li>[WTK-180892] - You cannot use a 'Manual Time Entry' workflow with the 'Timecard Action' button type.</li><li>[WTK-180893] - You cannot retrieve, modify, or delete this Attestation Assignment when the Missed Attestation feature is disabled.</li><li>[WTK-180894] - You cannot create or update an Attestation Assignment with the 'manualTimeEntryWorkflow' property specified when the Missed Attestation feature is disabled.</li></ul>"
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "<ul><li>[WTK-180680] - An Attestation Condition with the specified id does not exist.</li><li>[WTK-180740] - An Attestation Button with the specified id does not exist.</li><li>[WTK-180730] - An Attestation Assignment with the specified id does not exist.</li></ul>"
                    }
                },
                "summary": "Updates Attestation assignment.",
                "tags": [
                    "Attestation Assignments"
                ]
            }
        },
        "/v1/timekeeping/attestation_buttons": {
            "get": {
                "description": "This operation returns a list of all Attestation buttons.",
                "operationId": "Retrieve All Attestation Buttons",
                "parameters": [
                    {
                        "description": "Name of the Attestation buttons to be retrieved.",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of all Attestation buttons.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Button_DTO_object_Public"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Returns a list of all Attestation buttons.",
                "tags": [
                    "Attestation Buttons"
                ]
            },
            "post": {
                "description": "This operation creates an Attestation button.",
                "operationId": "Create Attestation Button",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Button_DTO_object"
                            }
                        }
                    },
                    "description": "The Attestation button object."
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Button_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully created an Attestation button.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Button_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WTK-180629] - Missing button name.</li><li>[WTK-180634] - Missing button type.</li><li>[WTK-180635] - Invalid button type.</li><li>[WTK-180630] - Duplicate button name.</li><li>[WTK-180632] - Special characters are not allowed to be used in Name field.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li><li>[WTK-180633] - Description must not exceed 250 characters.</li></ul>"
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Creates an Attestation button.",
                "tags": [
                    "Attestation Buttons"
                ]
            }
        },
        "/v1/timekeeping/attestation_buttons/{id}": {
            "delete": {
                "description": "This operation deletes an Attestation button by ID.",
                "operationId": "Delete Attestation Button by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation button to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted an Attestation button by ID."
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An attestation button with the specified ID was not found."
                    }
                },
                "summary": "Deletes an Attestation button.",
                "tags": [
                    "Attestation Buttons"
                ]
            },
            "get": {
                "description": "This operation returns an Attestation button by ID.",
                "operationId": "Retrieve Attestation Button by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation button.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved an Attestation button by ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Button_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An attestation button with the specified ID was not found."
                    }
                },
                "summary": "Returns an Attestation button.",
                "tags": [
                    "Attestation Buttons"
                ]
            },
            "put": {
                "description": "This operation updates an Attestation button by ID.",
                "operationId": "Update Attestation Button by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation button to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Button_DTO_object"
                            }
                        }
                    },
                    "description": "Attestation button to update."
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated attestation button.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Button_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WTK-180635] - Invalid button type.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li><li>[WTK-180634] - Missing button type.</li><li>[WTK-180630] - Duplicate button name.</li><li>[WTK-180632] - Special characters are not allowed to be used in Name field.</li><li>[WTK-180633] - Description must not exceed 250 characters.</li></ul>"
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An attestation button with the specified ID was not found."
                    }
                },
                "summary": "Updates an Attestation button.",
                "tags": [
                    "Attestation Buttons"
                ]
            }
        },
        "/v1/timekeeping/attestation_conditions": {
            "get": {
                "description": "This operation returns a list of all Attestation conditions.",
                "operationId": "Retrieve All Attestation Conditions",
                "parameters": [
                    {
                        "description": "Name of the Attestation condition.",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of all Attestation conditions."
                    },
                    "403": {
                        "description": "WTK-180628 - User does not have access to ATTESTATION_SETUP with action ALLOWED."
                    }
                },
                "summary": "Returns a list of all Attestation conditions.",
                "tags": [
                    "Attestation Conditions"
                ]
            },
            "post": {
                "description": "This operation creates an Attestation condition.",
                "operationId": "Create Attestation Condition",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Condition_DTO_object"
                            }
                        }
                    },
                    "description": "The Attestation condition object."
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Condition_DTO_object"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully created an Attestation condition."
                    },
                    "400": {
                        "description": "Bad Request: <ul><li><li>WTK-180681 - Missing condition value.</li><li>WTK-180682 - Missing condition return value on no shift-start punch.</li><li>WTK-180685 - Duplicate condition name: {name}.</li><li>WTK-180686 - Missing condition type.</li><li>WTK-180687 - Invalid condition type.</li><li>WTK-180688 - Missing condition operator.</li><li>WTK-180689 - Invalid condition operator.</li><li>WTK-180690 - Condition value must be greater than or equal {minValue} and not exceed {maxLength} characters.</li><li>WTK-180691 - Missing condition id.</li><li>WTK-180692 - Missing condition name.</li></li></ul>"
                    },
                    "403": {
                        "description": "WTK-180628 - User does not have access to ATTESTATION_SETUP with action ALLOWED."
                    }
                },
                "summary": "Creates an Attestation condition.",
                "tags": [
                    "Attestation Conditions"
                ]
            }
        },
        "/v1/timekeeping/attestation_conditions/{id}": {
            "delete": {
                "description": "This operation deletes an Attestation condition by ID.",
                "operationId": "Delete Attestation Condition by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation condition to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted an Attestation condition by ID."
                    },
                    "403": {
                        "description": "WTK-180628 - User does not have access to ATTESTATION_SETUP with action ALLOWED."
                    },
                    "404": {
                        "description": "WTK-180680 - An Attestation Condition with the following id does not exist: {id}."
                    }
                },
                "summary": "Deletes Attestation condition.",
                "tags": [
                    "Attestation Conditions"
                ]
            },
            "get": {
                "description": "This operation returns an Attestation condition by ID.",
                "operationId": "Retrieve Attestation Condition by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation condition.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved an Attestation condition by ID."
                    },
                    "403": {
                        "description": "WTK-180628 - User does not have access to ATTESTATION_SETUP with action ALLOWED."
                    },
                    "404": {
                        "description": "WTK-180680 - An Attestation Condition with the following id does not exist: {id}."
                    }
                },
                "summary": "Returns an Attestation condition.",
                "tags": [
                    "Attestation Conditions"
                ]
            },
            "put": {
                "description": "This operation updates an Attestation condition by ID.",
                "operationId": "Update Attestation Condition by ID",
                "parameters": [
                    {
                        "description": "The ID of the Attestation condition to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Condition_DTO_object"
                            }
                        }
                    },
                    "description": "The Attestation condition to update."
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated an Attestation condition."
                    },
                    "400": {
                        "description": "Bad Request: <ul><li><li>WTK-180681 - Missing condition value.</li><li>WTK-180682 - Missing condition return value on no shift-start punch.</li><li>WTK-180685 - Duplicate condition name: {name}.</li><li>WTK-180686 - Missing condition type.</li><li>WTK-180687 - Invalid condition type.</li><li>WTK-180688 - Missing condition operator.</li><li>WTK-180689 - Invalid condition operator.</li><li>WTK-180690 - Condition value must be greater than or equal {minValue} and not exceed {maxLength} characters.</li><li>WTK-180691 - Missing condition id.</li><li>WTK-180692 - Missing condition name.</li></li></ul>"
                    },
                    "403": {
                        "description": "WTK-180628 - User does not have access to ATTESTATION_SETUP with action ALLOWED."
                    },
                    "404": {
                        "description": "WTK-180680 - An Attestation Condition with the following id does not exist: {id}."
                    }
                },
                "summary": "Updates an Attestation condition.",
                "tags": [
                    "Attestation Conditions"
                ]
            }
        },
        "/v1/timekeeping/attestation_manual_entry_process": {
            "post": {
                "description": "This operation returns a list of Manual Time Entry workflows to execute.",
                "operationId": "Retrieve Manual Time Entry Workflows",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Manual_Entry_Process_Request_DTO_object"
                            }
                        }
                    },
                    "description": "The Retrieve Manual Time Entry Workflows request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of Manual Time Entry workflows to execute.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Manual_Entry_Process_Response_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform this operation."
                    },
                    "404": {
                        "description": "There is no Manual Time Entry workflow found with the specified process ID."
                    }
                },
                "summary": "Returns a list of Manual Time Entry workflows to execute.",
                "tags": [
                    "Manual Time Entry Workflows"
                ]
            }
        },
        "/v1/timekeeping/attestation_manual_entry_process/complete": {
            "post": {
                "description": "This operation completes a Manual Time Entry Attestation request.",
                "operationId": "Complete Manual Time Entry Attestation Process",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Process_Complete_Request_DTO_object"
                            }
                        }
                    },
                    "description": "An Attestation process complete request object."
                },
                "responses": {
                    "200": {
                        "description": "Successfully completed Manual Time Entry Attestation request."
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>WTK-180870 - The 'attestationProcess' property is required.</li><li>WTK-180870 - The 'id' property is required.</li><li>WTK-180896 - TThe attestation process with ID {id} is already complete, does not exist, or is invalid for the specified employee.</li></ul>"
                    }
                },
                "summary": "Completes a Manual Time Entry Attestation request.",
                "tags": [
                    "Complete Manual Time Entry Attestation Process"
                ]
            }
        },
        "/v1/timekeeping/attestation_process": {
            "post": {
                "description": "This operation processes an Attestation request.",
                "operationId": "Start Attestation Process",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Process_Request_DTO_object"
                            }
                        }
                    },
                    "description": "An Attestation process request object."
                },
                "responses": {
                    "200": {
                        "description": "Successfully started Attestation request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Assignment_DTO_object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>WTK-180744 - Missing or invalid button.</li><li>WTK-180788 - Attestation button is not configured for employee's profile.</li><li>WTK-180746 - Missing or invalid attestation time.</li><li>Transfer '{paramName}' is invalid.</li><li>WTK-180803 - Workflow engine is not available.</li></ul>"
                    },
                    "403": {
                        "description": "The user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Processes an Attestation request.",
                "tags": [
                    "Start Attestation Process"
                ]
            }
        },
        "/v1/timekeeping/attestation_process/complete": {
            "post": {
                "description": "This operation completes an Attestation request.",
                "operationId": "Complete Attestation Process",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Process_Complete_Request_DTO_object"
                            }
                        }
                    },
                    "description": "An Attestation process request object."
                },
                "responses": {
                    "200": {
                        "description": "Successfully completed Attestation request.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>WTK-180753 - Invalid attestation id for completion of attestation.</li></ul>"
                    },
                    "403": {
                        "description": "The user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Completes an Attestation request.",
                "tags": [
                    "Complete Attestation Process"
                ]
            }
        },
        "/v1/timekeeping/attestation_process/offline": {
            "post": {
                "description": "This operation processes an Attestation request offline.",
                "operationId": "Start Offline Attestation Process",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Offline_Process_Request_DTO_object"
                            }
                        }
                    },
                    "description": "An Attestation process request object."
                },
                "responses": {
                    "200": {
                        "description": "Success."
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>WTK-180744 - Missing or invalid button.</li><li>WTK-180788 - Attestation button is not configured for employee's profile.</li><li>WTK-180746 - Missing or invalid attestation time.</li><li>WTK-180786 - Offline attestation data must be provided.</li><li>WTK-180753 - Invalid attestation id for completion of attestation.</li></ul>"
                    },
                    "403": {
                        "description": "The user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Processes an Attestation request offline.",
                "tags": [
                    "Start Offline Attestation Process"
                ]
            }
        },
        "/v1/timekeeping/attestation_profile_buttons": {
            "get": {
                "description": "The operation returns a list of Attestation buttons associated with the logged-in user's attestation profile.",
                "operationId": "Retrieve Attestation Profile Buttons",
                "parameters": [
                    {
                        "description": "A deprecated Boolean that has no effect.",
                        "in": "query",
                        "name": "manual_time_entry_configured",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of Attestation buttons associated with the logged-in user's attestation profile.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Button_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform this operation."
                    }
                },
                "summary": "Returns a list of Attestation buttons associated with the logged-in user's Attestation profile.",
                "tags": [
                    "Attestation Profile Buttons"
                ]
            }
        },
        "/v1/timekeeping/attestation_profiles": {
            "get": {
                "description": "This operation returns a list of all Attestation profiles.",
                "operationId": "Retrieve All Attestation Profiles",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of all Attestation profiles.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Profile_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Returns a list of all Attestation profiles.",
                "tags": [
                    "Attestation Profiles"
                ]
            },
            "post": {
                "description": "This operation creates an Attestation profile.",
                "operationId": "Create Attestation Profile",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Attestation_Profile_DTO_object"
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Profile_DTO_object"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully created an Attestation profile.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Profile_DTO_object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<ul><li>[WTK-180731] - Missing profile name.</li><li>[WTK-180732] - Duplicate profile name.</li><li>[WTK-180632] - Only letters and space are allowed to enter.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li></ul>"
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Creates an Attestation profile.",
                "tags": [
                    "Attestation Profiles"
                ]
            }
        },
        "/v1/timekeeping/attestation_profiles/{id}": {
            "delete": {
                "description": "This operation deletes an Attestation profile by ID.",
                "operationId": "Delete Attestation Profile by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation profile to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted an Attestation profile by ID."
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An attestation profile with the specified ID was not found."
                    }
                },
                "summary": "Deletes an Attestation profile.",
                "tags": [
                    "Attestation Profiles"
                ]
            },
            "get": {
                "description": "This operation returns an Attestation profile by ID.",
                "operationId": "Retrieve Attestation Profile by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation profile.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved an Attestation profile by ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Profile_DTO_object"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An attestation profile with the specified ID was not found."
                    }
                },
                "summary": "Returns an Attestation profile.",
                "tags": [
                    "Attestation Profiles"
                ]
            },
            "put": {
                "description": "This operation updates an Attestation profile by ID.",
                "operationId": "Update Attestation Profile by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation profile to update.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Attestation_Profile_DTO_object"
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated attestation profile.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Profile_DTO_object"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<ul><li>[WTK-180731] - Missing profile name.</li><li>[WTK-180732] - Duplicate profile name.</li><li>[WTK-180632] - Only letters and space are allowed to enter.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li></ul>"
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An attestation profile with the specified ID was not found."
                    }
                },
                "summary": "Updates an Attestation profile.",
                "tags": [
                    "Attestation Profiles"
                ]
            }
        },
        "/v1/timekeeping/attestation_questions": {
            "get": {
                "description": "This operation returns a list of all Attestation questions.",
                "operationId": "Retrieve All Attestation Questions or by Name",
                "parameters": [
                    {
                        "description": "The name of an Attestation question.",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of all Attestation questions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Question_DTO_object_Public"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Returns a list of all Attestation questions.",
                "tags": [
                    "Attestation Questions"
                ]
            },
            "post": {
                "description": "This operation creates an Attestation question.",
                "operationId": "Create Attestation Question",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Question_DTO_object"
                            }
                        }
                    },
                    "description": "The Create Attestation Question request payload."
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Question_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully created an Attestation question.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Question_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WTK-180829] - The attestation question name is missing.</li><li>[WTK-180833] - The attestation question label is missing.</li><li>[WTK-180852] - You cannot submit duplicate attestation question names.</li><li>[WTK-180632] - Special characters are not allowed to be used in Name field.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li><li>[WTK-180633] - Description must not exceed 250 characters.</li></ul>"
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Creates an Attestation question.",
                "tags": [
                    "Attestation Questions"
                ]
            }
        },
        "/v1/timekeeping/attestation_questions/multi_create": {
            "post": {
                "description": "This operation creates one or more Attestation questions.",
                "operationId": "Create Attestation Questions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/Attestation_Question_DTO_object"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "The Create Attestation Questions request payload.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Question_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "Successfully created Attestation questions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Question_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WTK-180829] - The attestation question name is missing.</li><li>[WTK-180833] - The attestation question label is missing.</li><li>[WTK-180852] - You cannot submit duplicate attestation question names.</li><li>[WTK-180632] - Special characters are not allowed to be used in Name field.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li><li>[WTK-180633] - Description must not exceed 250 characters.</li></ul>"
                    }
                },
                "summary": "Creates one or more Attestation questions.",
                "tags": [
                    "Attestation Questions"
                ]
            }
        },
        "/v1/timekeeping/attestation_questions/multi_delete": {
            "post": {
                "description": "This operation deletes one or more Attestation questions.",
                "operationId": "Delete Attestation Questions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuestionsRequest"
                            }
                        }
                    },
                    "description": "A list of Attestation question IDs."
                },
                "responses": {
                    "204": {
                        "description": "Successfully deleted Attestation questions."
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WTK-180860] - Request body must be specified.</li></ul>"
                    }
                },
                "summary": "Deletes one or more Attestation questions.",
                "tags": [
                    "Attestation Questions"
                ]
            }
        },
        "/v1/timekeeping/attestation_questions/multi_read": {
            "post": {
                "description": "This operation returns one or more Attestation questions.",
                "operationId": "Retrieve Attestation Questions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/QuestionsRequest"
                            }
                        }
                    },
                    "description": "The Retrieve Attestation Questions request payload.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of Attestation questions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Question_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WTK-180829] - The attestation question name is missing.</li><li>[WTK-180833] - The attestation question label is missing.</li><li>[WTK-180852] - You cannot submit duplicate attestation question names.</li><li>[WTK-180632] - Special characters are not allowed to be used in Name field.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li><li>[WTK-180633] - Description must not exceed 250 characters.</li></ul>"
                    }
                },
                "summary": "Returns one or more Attestation questions.",
                "tags": [
                    "Attestation Questions"
                ]
            }
        },
        "/v1/timekeeping/attestation_questions/multi_update": {
            "post": {
                "description": "This operation updates one or more Attestation questions.",
                "operationId": "Update Attestation Questions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/Attestation_Question_DTO_object"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "The Update Attestation Questions request payload.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated Attestation questions.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Question_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WTK-180829] - The attestation question name is missing.</li><li>[WTK-180833] - The attestation question label is missing.</li><li>[WTK-180852] - You cannot submit duplicate attestation question names.</li><li>[WTK-180632] - Special characters are not allowed to be used in Name field.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li><li>[WTK-180633] - Description must not exceed 250 characters.</li></ul>"
                    }
                },
                "summary": "Updates one or more Attestation questions.",
                "tags": [
                    "Attestation Questions"
                ]
            }
        },
        "/v1/timekeeping/attestation_questions/setup/question_display_types": {
            "get": {
                "description": "This operartion returns action types for Attestation answers.",
                "operationId": "Retrieve Attestation Question Display Types",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved Attestation question display types.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AttestationKey_Public"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    }
                },
                "summary": "Returns Attestation question display types.",
                "tags": [
                    "Attestation Questions"
                ]
            }
        },
        "/v1/timekeeping/attestation_questions/{id}": {
            "delete": {
                "description": "This operation deletes an Attestation question by ID.",
                "operationId": "Delete Attestation Question by ID",
                "parameters": [
                    {
                        "description": "ID of the Attestation question to delete.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted an Attestation question by ID."
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An Attestation question with the specified ID was not found."
                    }
                },
                "summary": "Deletes an Attestation question.",
                "tags": [
                    "Attestation Questions"
                ]
            },
            "get": {
                "description": "This operation returns an Attestation question by ID.",
                "operationId": "Retrieve Attestation Question by ID",
                "parameters": [
                    {
                        "description": "The ID of an Attestation question.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved an Attestation question by ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Question_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An Attestation question with the specified ID was not found."
                    }
                },
                "summary": "Returns an Attestation question.",
                "tags": [
                    "Attestation Questions"
                ]
            },
            "put": {
                "description": "This operation updates an Attestation question by ID.",
                "operationId": "Update Attestation Question by ID",
                "parameters": [
                    {
                        "description": "The ID of an Attestation question.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Question_DTO_object"
                            }
                        }
                    },
                    "description": "The Update Attestation Question by ID request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated Attestation question.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Question_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>[WTK-180829] - The attestation question name is missing.</li><li>[WTK-180833] - The attestation question label is missing.</li><li>[WTK-180852] - You cannot submit duplicate attestation question names.</li><li>[WTK-180632] - Special characters are not allowed to be used in Name field.</li><li>[WTK-180631] - Name must not exceed 50 characters.</li><li>[WTK-180633] - Description must not exceed 250 characters.</li></ul>"
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    },
                    "404": {
                        "description": "An Attestation question with the specified ID was not found."
                    }
                },
                "summary": "Updates an Attestation question.",
                "tags": [
                    "Attestation Questions"
                ]
            }
        },
        "/v1/timekeeping/attestation_unapproved_timecard_data": {
            "get": {
                "description": "This operation returns attestation timecard data in the form of a list punches, paycodes, and formatted data for punches and paycodes.",
                "operationId": "Retrieve Unapproved Timecard Data",
                "parameters": [
                    {
                        "description": "An ID that uniquely identifies an employee. This is not a person number.",
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "description": "An internal system identifier that represents a timeframe or span of time. This field must be ommitted when a date range is specified.",
                        "in": "query",
                        "name": "symbolic_period_id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "description": "A symbolic identifier that represents a timeframe or span of time. This field must be ommitted when a date range is specified.",
                        "in": "query",
                        "name": "symbolic_period",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Previous_Payperiod",
                                "Current_Payperiod",
                                "Next_Payperiod",
                                "Current_SchedPeriod",
                                "Previous_SchedPeriod",
                                "Next_SchedPeriod",
                                "Week_to_Date",
                                "Last_Week",
                                "Yesterday",
                                "Range_Of_Dates",
                                "Range_of_Relative_Dates",
                                "Specific_Date",
                                "Relative_Specific_Date",
                                "Today"
                            ]
                        }
                    },
                    {
                        "description": "A unique identifier for a person. This is not an employee ID.",
                        "in": "query",
                        "name": "person_number",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The start date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD). This field must be ommitted when a symbolic period is specified.",
                        "in": "query",
                        "name": "start_date",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD). This field must be ommitted when a symbolic period is specified.",
                        "in": "query",
                        "name": "end_date",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved attestation timecard data.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Attestation_Timecard_Response_DTO_object_Public"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions necessary to perform that operation."
                    }
                },
                "summary": "Returns attestation timecard data.",
                "tags": [
                    "Attestation Unapproved Timecard Data"
                ]
            }
        },
        "/v1/timekeeping/attestation_workflow": {
            "get": {
                "description": "This operation returns an Attestation workflow by name.",
                "operationId": "Retrieve Attestation Workflow by Name",
                "parameters": [
                    {
                        "description": "The name of an Attestation workflow.",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved Attestation Workflow.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Workflows_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions to perform that operation."
                    }
                },
                "summary": "Returns an Attestation workflow.",
                "tags": [
                    "Attestation Workflows"
                ]
            }
        },
        "/v1/timekeeping/attestation_workflow/like": {
            "get": {
                "description": "This operation returns a list of Attestation workflows by name.",
                "operationId": "Retrieve Attestation Workflows by Name",
                "parameters": [
                    {
                        "description": "The name of an Attestation workflow.",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved Attestation Workflow.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Attestation_Workflows_DTO_object"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "The current user does not have the permissions to perform that operation."
                    }
                },
                "summary": "Returns a list of Attestation workflows.",
                "tags": [
                    "Attestation Workflows"
                ]
            }
        },
        "/v1/timekeeping/attestation_workflow_attributes/{id}": {
            "post": {
                "description": "This operation sets Attestation workflow attributes by ID.",
                "operationId": "Set Attestation Workflow Attributes by ID",
                "parameters": [
                    {
                        "description": "The ID of an Attestation process.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Attestation_Workflow_Attribute_DTO_object"
                            }
                        }
                    },
                    "description": "An Attestation Workflow Attributes object."
                },
                "responses": {
                    "201": {
                        "description": "Successfully set Attestation workflow attributes."
                    },
                    "400": {
                        "description": "<ul><li>WTK-180798 - Workflow attributes are missing.</li><li>WTK-180799 - Workflow attribute name is missing.</li><li>WTK-180800 - Workflow attribute value is missing.</li></ul>"
                    },
                    "403": {
                        "description": "The current user does not have the permissions to perform that operation."
                    },
                    "404": {
                        "description": "WTK-180801 - An Attestation process with this ID does not exist."
                    }
                },
                "summary": "Sets Attestation workflow attributes.",
                "tags": [
                    "Attestation Workflow Attributes"
                ]
            }
        },
        "/v1/timekeeping/employee_timecard_signoffs": {
            "delete": {
                "description": "This operation deletes (removes) an employee timecard sign-off.",
                "operationId": "Delete Employee Timecard Signoff as Employee",
                "requestBody": {
                    "$ref": "#/components/requestBodies/ObjectRef_Entity"
                },
                "responses": {
                    "204": {
                        "description": "Successfully deleted (removed) a timecard signoff."
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>Employee Reference is required.</li></ul>"
                    }
                },
                "summary": "Deletes (removes) an employee timecard sign-off.",
                "tags": [
                    "Signoffs for Employee"
                ]
            },
            "get": {
                "description": "This operation returns a list of all timecard sign-off information for the specified date range.",
                "operationId": "Retrieve Signoffs as Employee",
                "parameters": [
                    {
                        "description": "A unique identifier for a person. This is not an employee ID.",
                        "in": "query",
                        "name": "person_num",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A unique identifier for an employee.",
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of all timecard sign-off information for the specified date range.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SignoffEntity"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>A list of employees with at least one employee in the list is required.</li><li>A timeframe ID must be provided.</li></ul>"
                    }
                },
                "summary": "Returns employee timecard sign-off information.",
                "tags": [
                    "Signoffs for Employee"
                ]
            },
            "post": {
                "description": "This operation signs off an employee timecard for a specified timeframe.",
                "operationId": "Sign Off Employee Timecard as Employee",
                "parameters": [
                    {
                        "description": "A symbolic identifier that represents a timeframe or a span of time.",
                        "in": "query",
                        "name": "timeframe_id",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Previous_Payperiod",
                                "Current_Payperiod",
                                "Next_Payperiod",
                                "Range_Of_Dates"
                            ],
                            "default": "Range_Of_Dates"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ObjectRef_Entity"
                            }
                        }
                    },
                    "description": "A unique identifier for an employee reference (id, qualifier).",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successfully signed off an employee timecard for the specified timeframe."
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>Employee Reference is required.</li><li>A timeframe ID must be provided.</li></ul>"
                    }
                },
                "summary": "Signs off an employee timecard for a specified timeframe.",
                "tags": [
                    "Signoffs for Employee"
                ]
            }
        },
        "/v1/timekeeping/exception_categories": {
            "get": {
                "description": "<p>This operation returns all exception categories.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Retrieve All Exception Categories",
                "parameters": [
                    {
                        "description": "The name of an exception category.",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieve all exception categories.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionCategoryForRest"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bad Request: cannot retrieve exception categories."
                    }
                },
                "summary": "Returns all exception categories.",
                "tags": [
                    "Exception Categories"
                ]
            },
            "post": {
                "description": "<p>This operation creates an exception category.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Create Exception Category",
                "requestBody": {
                    "$ref": "#/components/requestBodies/ExceptionCategoryForRest"
                },
                "responses": {
                    "200": {
                        "description": "Successfully created an exception category.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionCategoryForRest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: cannot convert to exception category."
                    }
                },
                "summary": "Creates an exception category.",
                "tags": [
                    "Exception Categories"
                ]
            }
        },
        "/v1/timekeeping/exception_categories/multi_create": {
            "post": {
                "description": "<p>This operation creates one or more exception categories.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Create Exception Categories",
                "requestBody": {
                    "$ref": "#/components/requestBodies/ExceptionCategoryForRestArray"
                },
                "responses": {
                    "200": {
                        "description": "Successful insertion of given exception categories, All records are inserted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ExceptionCategoryForRest"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Incorrect Request Parameter/Invalid Request Body."
                    }
                },
                "summary": "Creates one or more exception categories.",
                "tags": [
                    "Exception Categories"
                ]
            }
        },
        "/v1/timekeeping/exception_categories/multi_delete": {
            "post": {
                "description": "<p>This operation deletes one or more exception categories.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Delete Exception Categories",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Multi_Read_Request_for_exception_categories"
                },
                "responses": {
                    "200": {
                        "description": "Successfully deleted all exception categories.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionCategoryForRest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Incorrect Request Parameter/Invalid Request Body."
                    }
                },
                "summary": "Deletes one or more exception categories.",
                "tags": [
                    "Exception Categories"
                ]
            }
        },
        "/v1/timekeeping/exception_categories/multi_read": {
            "post": {
                "description": "<p>This operation returns one or more exception categories by object references.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Retrieve Exception Categories",
                "requestBody": {
                    "$ref": "#/components/requestBodies/Multi_Read_Request_for_exception_categories"
                },
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of exception categories.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ExceptionCategoryForRest"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bad Request."
                    }
                },
                "summary": "Returns one or more exception categories.",
                "tags": [
                    "Exception Categories"
                ]
            }
        },
        "/v1/timekeeping/exception_categories/multi_update": {
            "post": {
                "description": "<p>This operation updates one or more exception categories.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Update Exception Categories",
                "requestBody": {
                    "$ref": "#/components/requestBodies/ExceptionCategoryForRestArray"
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated a list of exception categories.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ExceptionCategoryForRest"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Incorrect Request Parameter/Invalid Request Body."
                    }
                },
                "summary": "Updates one or more exception categories.",
                "tags": [
                    "Exception Categories"
                ]
            }
        },
        "/v1/timekeeping/exception_categories/{id}": {
            "delete": {
                "description": "<p>This operation deletes an category tile by ID.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Delete Exception Category by ID",
                "parameters": [
                    {
                        "description": "The ID of an exception category.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted an exception category by ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionCategoryForRest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>The specified ID must already exist.</li></ul>"
                    }
                },
                "summary": "Deletes an exception category.",
                "tags": [
                    "Exception Categories"
                ]
            },
            "get": {
                "description": "<p>This operation returns an exception category by ID.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Retrieve Exception Category by ID",
                "parameters": [
                    {
                        "description": "The ID of an exception category.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieve an exception category.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionCategoryForRest"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bad Request: cannot convert to exception category."
                    }
                },
                "summary": "Returns an exception category.",
                "tags": [
                    "Exception Categories"
                ]
            },
            "put": {
                "description": "<p>This operation updates an exception category by ID.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Update Exception Category by ID",
                "parameters": [
                    {
                        "description": "The ID of an exception category.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ExceptionCategoryForRest"
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the exception category by ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionCategoryForRest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>The specified ID must already exist.</li></ul>"
                    }
                },
                "summary": "Updates an exception category.",
                "tags": [
                    "Exception Categories"
                ]
            }
        },
        "/v1/timekeeping/exception_tiles": {
            "get": {
                "description": "This operation returns all exception tiles.",
                "operationId": "Retrieve All Exception Tiles",
                "parameters": [
                    {
                        "description": "The name of an exception tile.",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieve all exception tiles.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionTileForRest"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bad Request: cannot retrieve exception tiles."
                    }
                },
                "summary": "Returns all exception tiles.",
                "tags": [
                    "Exception Tiles"
                ]
            },
            "post": {
                "description": "<p>This operation creates an exception tile.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Create Exception Tile",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExceptionTileForRest"
                            }
                        }
                    },
                    "description": "The Create Exception Tile request payload.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "The exception tile was successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionTileForRest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "<p>The exception tile was not created.</p><ul><li>[WTK-181544] - The following parameter must be null: {id}.</li><li>[WTK-181545] - An Exception Tile with the same name already exists: {name}</li><li>[WTK-000000] - The maximum length for the '{paramName}' parameter is 250 characters.</li><li>[WTK-000000] - The value for '{paramName}' contains one or more of the following reserved characters: /|*():;#%^?[]</li></ul>"
                    }
                },
                "summary": "Creates an exception tile.",
                "tags": [
                    "Exception Tiles"
                ]
            }
        },
        "/v1/timekeeping/exception_tiles/multi_create": {
            "post": {
                "description": "<p>This operation creates one or more exception tiles.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Create Exception Tiles",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/ExceptionTileForRest"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "The Create Exception Tiles request payload.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Exception Tiles were successfully created.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ExceptionTileForRest"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Partially created list of Exception Tiles. Some of the specified Exception Tiles could not be created."
                    },
                    "400": {
                        "description": "<p>The specified exception tiles could not be created.</p><ul><li>[WTK-181544] - The following parameter must be null: {id}.</li><li>[WTK-181545] - An Exception Tile with the same name already exists: {name}</li><li>[WTK-000000] - The maximum length for the '{paramName}' parameter is 250 characters.</li><li>[WTK-000000] - The value for '{paramName}' contains one or more of the following reserved characters: /|*():;#%^?[]</li></ul>"
                    }
                },
                "summary": "Creates one or more exception tiles.",
                "tags": [
                    "Exception Tiles"
                ]
            }
        },
        "/v1/timekeeping/exception_tiles/multi_delete": {
            "post": {
                "description": "<p>This operation deletes one or more exception tiles.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Delete Exception Tiles",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Multi_Delete_Request_for_exception_tiles"
                            }
                        }
                    },
                    "description": "The Delete Exception Tiles request payload.",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Exception Tiles were successfully deleted."
                    },
                    "207": {
                        "description": "Partially deleted list of the Exception Tiles. Some of the specified Exception Tiles could not be deleted."
                    },
                    "400": {
                        "description": "<p>The specified exception tiles could not be deleted.</p><ul><li>[WTK-000000] - Some exception tiles were not deleted because of errors in the source data. Correct those errors and try again.</li><li>[WTK-000000] - The Exception Tile is already in use or is Gold Data, and could not be deleted.</li></ul>"
                    }
                },
                "summary": "Deletes one or more exception tiles.",
                "tags": [
                    "Exception Tiles"
                ]
            }
        },
        "/v1/timekeeping/exception_tiles/multi_update": {
            "post": {
                "description": "<p>This operation updates one or more exception tiles.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Update Exception Tiles",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/ExceptionTileForRest"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "The Update Exception Tiles request payload.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Exception Tiles were successfully updated.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ExceptionTileForRest"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Partially updated list of Exception Tiles. Some of the specified Exception Tiles could not be updated."
                    },
                    "400": {
                        "description": "<p>The specified Exception Tiles could not be updated.</p><ul><li>[WTK-181545] - An Exception Tile with the same name already exists: {name}</li><li>[WTK-000000] - You must specify an exception tile ID in the request payload.</li><li>[WTK-000000] - The maximum length for the '{paramName}' parameter is 250 characters.</li><li>[WTK-000000] - The value for '{paramName}' contains one or more of the following reserved characters: /|*():;#%^?[]</li></ul>"
                    }
                },
                "summary": "Updates one or more exception tiles.",
                "tags": [
                    "Exception Tiles"
                ]
            }
        },
        "/v1/timekeeping/exception_tiles/{id}": {
            "delete": {
                "description": "<p>This operation deletes an exception tile by ID.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Delete Exception Tile by ID",
                "parameters": [
                    {
                        "description": "The ID of an exception tile.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Exception Tile was successfully deleted."
                    },
                    "400": {
                        "description": "<p>The specified exception tiles could not be deleted.</p><ul><li>[WTK-000000] - Some exception tiles were not deleted because of errors in the source data. Correct those errors and try again.</li><li>[WTK-000000] - The Exception Tile is already in use or is Gold Data, and could not be deleted.</li></ul>"
                    },
                    "403": {
                        "description": "User does not have necessary permissions."
                    },
                    "404": {
                        "description": "The specified exception tile does not exist."
                    }
                },
                "summary": "Delete an Exception Tile.",
                "tags": [
                    "Exception Tiles"
                ]
            },
            "get": {
                "description": "This operation returns an exception tile by ID.",
                "operationId": "Retrieve Exception Tile by ID",
                "parameters": [
                    {
                        "description": "The ID of an exception tile.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieve an exception tile.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionTileForRest"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bad Request: cannot convert to exception tile."
                    }
                },
                "summary": "Returns an exception tile.",
                "tags": [
                    "Exception Tiles"
                ]
            },
            "put": {
                "description": "This operation updates an exception tile by ID.",
                "operationId": "Update Exception Tile by ID",
                "parameters": [
                    {
                        "description": "The ID of an exception tile.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ExceptionTileForRest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated the exception tile by ID.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExceptionTileForRest"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>The specified ID must already exist.</li></ul>"
                    }
                },
                "summary": "Updates an exception tile.",
                "tags": [
                    "Exception Tiles"
                ]
            }
        },
        "/v1/timekeeping/exception_types": {
            "get": {
                "description": "<p>This operation returns all exception types.</p><br /><p>The associated Access Control Point is EXCEPTION_CATEGORY_AND_TILE.</p>",
                "operationId": "Retrieve All Exception Types",
                "responses": {
                    "200": {
                        "description": "Successfully retrieve all exception types.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "enum": [
                                        "CANCELLED_DEDUCTION",
                                        "CORE_HOURS_VIOLATION",
                                        "VERY_EARLY_IN",
                                        "EARLY_IN",
                                        "LATE_IN",
                                        "EARLY_OUT",
                                        "LATE_OUT",
                                        "VERY_LATE_OUT",
                                        "EXCUSED_ABSENCE",
                                        "UNEXCUSED_ABSENCE",
                                        "SHORT_BREAK",
                                        "LONG_BREAK",
                                        "SHORT_SHIFT",
                                        "LONG_SHIFT",
                                        "MISSED_IN_PUNCH",
                                        "MISSED_OUT_PUNCH",
                                        "UNSCHEDULED",
                                        "LONG_TOTAL_BREAK",
                                        "SHORT_TOTAL_BREAK",
                                        "BONUS_APPLIED",
                                        "BREAK_OUT_OF_SEQUENCE",
                                        "HOLIDAY_SCHEDULE_VIOLATION",
                                        "MINIMUM_DAYS_ACTIVE_VIOLATION",
                                        "MINIMUM_DAYS_EMPLOYED_VIOLATION",
                                        "INVALID_NAMED_DURATION",
                                        "WORK_HISTORY_VIOLATION"
                                    ],
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Bad Request: cannot retrieve exception types."
                    }
                },
                "summary": "Returns all exception types.",
                "tags": [
                    "Exception Categories"
                ]
            }
        },
        "/v1/timekeeping/most_recently_used_transfers": {
            "get": {
                "description": "This operation returns a list of the most recently used (MRU) transfers for the current user.",
                "operationId": "Retrieve MRU Transfers",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of the most recently used (MRU) transfers for the current user.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/TransferEntity"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>A general error occurred while attempting to retrieve a list of transfers.</li></ul>"
                    }
                },
                "summary": "Returns a list of the most recently used (MRU) transfers for the current user.",
                "tags": [
                    "Timestamps"
                ]
            }
        },
        "/v1/timekeeping/paycodes_to_accrual_codes/multi_read": {
            "post": {
                "description": "This operation returns a list of matching accrual codes from a list of pay codes for an employee. Each matching accrual code is grouped by pay code. The list of accrual codes is derived from the employee's cascading profile or accrual profile(s).",
                "operationId": "Retrieve Accrual Codes from Paycodes",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pay_Code_To_Accrual_Codes_Request"
                            }
                        }
                    },
                    "description": "The Retrieve Accrual Codes from Paycodes request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of matching accrual codes from a list of pay codes.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pay_Codes_To_Accrual_Codes_Response"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "summary": "Returns a list of matching accrual codes from a list of pay codes.",
                "tags": [
                    "Accruals from Paycodes"
                ]
            }
        },
        "/v1/timekeeping/pending_historical_corrections/compute/async": {
            "get": {
                "description": "<p>This operation returns a summary of asynchronous Pending Historical Compute Corrections jobs.</p><br /><p>The associated Access Control Point is PENDING_CORRECTIONS.</p>",
                "operationId": "Retrieve Summary of Asynchronous Pending Historical Compute Corrections Jobs",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of batch jobs.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPHCAllStatusesSimpleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request."
                    }
                },
                "summary": "Returns a summary of asynchronous Pending Historical Compute Corrections jobs.",
                "tags": [
                    "Pending Historical Corrections"
                ]
            },
            "post": {
                "description": "<p>This operation computes historical corrections asynchronously.</p><br /><p>The associated Access Control Point is PENDING_CORRECTIONS.</p><p>The request payload contains the following properties:</p><ul><li>Employees (Required) - You must specify either a list of employees or a symbolic value that represents all employees.</li><li>Reference Date (Required) - The date from which pending corrections are generated.</li><li>Person Dates (Optional) - A set of business dates. The optional fields are:<ul><li>HC Run Date - The date Compute Pending Historical Corrections is executed.</li><li>HC Historic Date - The earliest date in the past specified for the discovery of corrections.</li><li>HC Processing Date - The starting day of the pay period containing the Historic Date.</li><li>HC Earliest Date - The earliest date of all computed pending corrections.</li><li>HC Latest Date - The latest date of all computed pending corrections.</li></ul></li></ul>",
                "operationId": "Compute Pending Historical Corrections",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkPHCBaseRequestBulkPHCRequestWhereBulkPHCComputeAsyncRequestDo"
                            }
                        }
                    },
                    "description": "The Compute Pending Historical Corrections request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully accepted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPHCBaseResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request."
                    }
                },
                "summary": "Computes historical corrections asynchronously.",
                "tags": [
                    "Pending Historical Corrections"
                ]
            }
        },
        "/v1/timekeeping/pending_historical_corrections/compute/{id}/results": {
            "get": {
                "description": "<p>This operation returns the results of an asynchronous compute operation by execution key.</p><br /><p>The associated Access Control Point is PENDING_CORRECTIONS.</p>",
                "operationId": "Retrieve Asynchronous Computed Pending Historical Corrections by Key",
                "parameters": [
                    {
                        "description": "The execution key of a Compute Pending Historical Corrections operation.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "description": "The index associated with the results of a Compute Pending Historical Corrections operation.",
                        "in": "query",
                        "name": "resultIndex",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of Pending Historical corrections for employees passed in.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPHCGetResultSuccessResponse"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Partial failure.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPHCGetResultPartialFailureResponse"
                                }
                            }
                        }
                    }
                },
                "summary": "Returns the results of an asynchronous compute operation.",
                "tags": [
                    "Pending Historical Corrections"
                ]
            }
        },
        "/v1/timekeeping/pending_historical_corrections/compute/{id}/status": {
            "get": {
                "description": "<p>This operation returns the status of an asynchronous Compute Pending Historical Corrections request by execution key.</p><br /><p>The associated Access Control Point is PENDING_CORRECTIONS.</p>",
                "operationId": "Retrieve Compute Pending Historical Corrections Asynchronous Request Status by Key",
                "parameters": [
                    {
                        "description": "The execution key of a Compute Pending Historical Corrections operation.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the status of batch job.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPHCStatusResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request."
                    }
                },
                "summary": "Returns the status of an asynchronous Compute Pending Historical Corrections request.",
                "tags": [
                    "Pending Historical Corrections"
                ]
            }
        },
        "/v1/timekeeping/pending_historical_corrections/save/async": {
            "get": {
                "description": "<p>This operation returns a summary of asynchronous Save Pending Historical Corrections jobs.</p><br /><p>The associated Access Control Point is PENDING_CORRECTIONS.</p>",
                "operationId": "Retrieve Summary of Asynchronous Save Pending Historical Corrections Jobs",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of batch jobs.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPHCAllStatusesSimpleResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request."
                    }
                },
                "summary": "Returns a summary of asynchronous Save Pending Historical Corrections jobs.",
                "tags": [
                    "Pending Historical Corrections"
                ]
            },
            "post": {
                "description": "<p>This operation saves pending historical corrections asynchronously.</p><br /><p>The associated Access Control Point is PENDING_CORRECTIONS.</p><p>The request payload contains the following properties:</p><ul><li>Employees (Required) - You must specify either a list of employees or a symbolic value that represents all employees.</li><li>Reference Date (Required) - The date from which pending corrections are generated.</li><li>Effective Date (Optional) - The effective date of the saved historical corrections.</li><li>Comments (Required) - Only one comment is allowed per request.</li><li>Notes (Optional) - One note is always generated per save operation.</li><li>Include In Totals (Optional) - A Boolean indicator of whether or not actual totals resulting from the saved corrections set the 'already paid' Boolean to false.</li></ul>",
                "operationId": "Save Pending Historical Corrections",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BulkPHCBaseRequestBulkPHCRequestWhereBulkPHCSaveAsyncRequestDo"
                            }
                        }
                    },
                    "description": "The Save Pending Historical Corrections request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully accepted.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPHCBaseResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request."
                    }
                },
                "summary": "Saves pending historical corrections asynchronously.",
                "tags": [
                    "Pending Historical Corrections"
                ]
            }
        },
        "/v1/timekeeping/pending_historical_corrections/save/{id}/results": {
            "get": {
                "description": "<p>This operation returns the results of an asynchronous save operation by execution key.</p><br /><p>The associated Access Control Point is PENDING_CORRECTIONS.</p>",
                "operationId": "Retrieve Asynchronous Saved Pending Historical Corrections by Key",
                "parameters": [
                    {
                        "description": "The execution key of a Save Pending Historical Corrections operation.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "description": "The index associated with the results of a Save Pending Historical Corrections operation.",
                        "in": "query",
                        "name": "resultIndex",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved save results for employees passed in.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPHCGetResultSuccessResponse"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Partial failure.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPHCGetResultPartialFailureResponse"
                                }
                            }
                        }
                    }
                },
                "summary": "Returns the results of an asynchronous save operation.",
                "tags": [
                    "Pending Historical Corrections"
                ]
            }
        },
        "/v1/timekeeping/pending_historical_corrections/save/{id}/status": {
            "get": {
                "description": "<p>This operation returns the status of an asynchronous Save Pending Historical Corrections request by execution key.</p><br /><p>The associated Access Control Point is PENDING_CORRECTIONS.</p>",
                "operationId": "Retrieve Save Pending Historical Corrections Asynchronous Request Status by Key",
                "parameters": [
                    {
                        "description": "The execution key of a Save Pending Historical Corrections operation.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the status of batch job.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BulkPHCStatusResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request."
                    }
                },
                "summary": "Returns the status of an asynchronous Save Pending Historical Corrections request.",
                "tags": [
                    "Pending Historical Corrections"
                ]
            }
        },
        "/v1/timekeeping/setup/pay_codes/data_access_profiles": {
            "get": {
                "description": "This operation returns a list of all Paycode Data Access Profiles.",
                "operationId": "Retrieve All Paycode Data Access Profiles",
                "parameters": [
                    {
                        "description": "The name of a Paycode Data Access Profile.",
                        "in": "query",
                        "name": "name",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "all_details",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of Paycode Data Access Profiles.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Pay_Code_DAP"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "[WTK-186034]-The current User is not authorized to access Paycode Data Access Profile."
                    },
                    "404": {
                        "description": "[WTK-186014]A Paycode Data Access Profile does not exist with specified Qualifier."
                    }
                },
                "summary": "Returns all Paycode Data Access Profiles.",
                "tags": [
                    "Paycode Data Access Profiles"
                ]
            },
            "post": {
                "description": "Creates one or more Paycode Data Access Profiles.",
                "operationId": "Create Paycode Data Access Profiles",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pay_Code_DAP"
                            }
                        }
                    },
                    "description": "The Create Paycode Data Access Profile request payload.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully created a Paycode Data Access Profile.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pay_Code_DAP"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "A Paycode Data Access Profile already exists with the name."
                    },
                    "403": {
                        "description": "[WTK-186034]-The current User is not authorized to access Paycode Data Access Profiles."
                    }
                },
                "summary": "Creates a Paycode Data Access Profiles.",
                "tags": [
                    "Paycode Data Access Profiles"
                ]
            }
        },
        "/v1/timekeeping/setup/pay_codes/data_access_profiles/multi_delete": {
            "post": {
                "description": "This operation deletes a list of Timekeeping Setup Paycode Data Access Profiles by object references.",
                "operationId": "Delete Paycode Data Access Profiles",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PayCodeDAPRequest"
                            }
                        }
                    },
                    "description": "A list of references to the Timekeeping Setup Paycode Data Access Profile objects to delete.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ObjectRef"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Successfully deleted Timekeeping Setup Paycode Data Access Profiles.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ObjectRef"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Partially deleted a list of Paycode Data Access Profiles. Some of the specified object references do not exist."
                    },
                    "400": {
                        "description": "Invalid request."
                    },
                    "403": {
                        "description": "[WTK-186034]-You are not authorized to access Paycode Data Access Profiles setup."
                    },
                    "404": {
                        "description": "Specified Paycode Data Access Profile object references do not exist."
                    },
                    "413": {
                        "description": "Service limit exceeded."
                    }
                },
                "summary": "Deletes a list of Timekeeping Setup Paycode Data Access Profiles.",
                "tags": [
                    "Paycode Data Access Profiles"
                ]
            }
        },
        "/v1/timekeeping/setup/pay_codes/data_access_profiles/multi_read": {
            "post": {
                "description": "This operation returns a list of Paycode Data Access Profiles by object references.",
                "operationId": "Retrieve Paycode Data Access Profiles",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PayCodeDAPRequest"
                            }
                        }
                    },
                    "description": "The request of a Paycode Data Access Profile.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of Paycode Data Access Profiles.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Pay_Code_DAP"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "[WTK-186012] - Partially retrieved a list of the Paycode Data Access Profiles. Some of the specified object references do not exist."
                    },
                    "403": {
                        "description": "[WTK-186034]-The current User is not authorized to access Paycode Data Access Profile."
                    },
                    "404": {
                        "description": "The specified Paycode Data Access Profile object references do not exist."
                    }
                },
                "summary": "Returns a list of Paycode Data Access Profiles.",
                "tags": [
                    "Paycode Data Access Profiles"
                ]
            }
        },
        "/v1/timekeeping/setup/pay_codes/data_access_profiles/multi_upsert": {
            "post": {
                "description": "This operation creates or updates a list of Timekeeping Setup Paycode Data Access Profiles by object references.",
                "operationId": "Create or Update Paycode Data Access Profiles",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/Pay_Code_DAP"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "description": "A list of references to the Timekeeping Setup Paycode Data Access Profile objects to created or updated.",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful multi-upsert of one or more Paycode Data Access Profiles.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Pay_Code_DAP"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "Partially succeeded in creating and or updating a list of the Paycode Data Access Profiles. Some of the specified object references could not be created or updated."
                    },
                    "400": {
                        "description": "Invalid request."
                    },
                    "403": {
                        "description": "[WTK-186034]-You are not authorized to access Paycode Data Access Profiles setup."
                    },
                    "413": {
                        "description": "Service limit exceeded."
                    }
                },
                "summary": "Creates or updates a list of Timekeeping Setup Paycode Data Access Profiles.",
                "tags": [
                    "Paycode Data Access Profiles"
                ]
            }
        },
        "/v1/timekeeping/setup/pay_codes/data_access_profiles/{id}": {
            "delete": {
                "description": "This operation deletes a Timekeeping Setup Paycode Data Access Profile by ID.",
                "operationId": "Delete Paycode Data Access Profile by ID",
                "parameters": [
                    {
                        "description": "The ID of a Timekeeping Setup Paycode Data Access Profile.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted Timekeeping Setup Paycode Data Access Profile."
                    },
                    "400": {
                        "description": "No Operation allowed on gold data: {id}."
                    },
                    "403": {
                        "description": "[WTK-186034]-The current User is not authorized to access this operation."
                    },
                    "404": {
                        "description": "A Paycode Data Access Profile does not exist with the specified ID."
                    }
                },
                "summary": "Deletes a Timekeeping Setup Paycode Data Access Profile.",
                "tags": [
                    "Paycode Data Access Profiles"
                ]
            },
            "get": {
                "description": "This operation returns a Paycode Data Access Profile by ID.",
                "operationId": "Retrieve Paycode Data Access Profile by ID",
                "parameters": [
                    {
                        "description": "The ID of a Paycode Data Access Profile.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a Paycode Data Access Profile.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pay_Code_DAP"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "[WTK-186034]-The current User is not authorized to access Paycode Data Access Profile."
                    },
                    "404": {
                        "description": "[WTK-186013]-A Paycode Data Access Profile does not exist with specified ID."
                    }
                },
                "summary": "Returns a Paycode Data Access Profile.",
                "tags": [
                    "Paycode Data Access Profiles"
                ]
            },
            "put": {
                "description": "This operation updates a Paycode Data Access Profile by ID.",
                "operationId": "Update Paycode Data Access Profile by ID",
                "parameters": [
                    {
                        "description": "The ID of a Timekeeping Setup Paycode Data Access Profile.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Pay_Code_DAP"
                            }
                        }
                    },
                    "description": "Paycode Data Access Profile values for update",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully updated Timekeeping Setup Paycode Data Access Profile.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Pay_Code_DAP"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request."
                    },
                    "403": {
                        "description": "[WTK-186034]-You are not authorized to access Paycode Data Access Profiles setup."
                    },
                    "404": {
                        "description": "A Paycode Data Access Profile does not exist with the specified ID."
                    }
                },
                "summary": "Updates a Timekeeping Setup Paycode Data Access Profile by ID.",
                "tags": [
                    "Paycode Data Access Profiles"
                ]
            }
        },
        "/v1/timekeeping/setup/timekeeping_alert_profiles": {
            "get": {
                "description": "<p>This operation returns a list of all Timekeeping alert profiles. The <code>all_details</code> query parameter allows you to specify whether this operation returns full objects or only the ID, name, and description of each Timekeeping alert profile.</p><p><strong>Notes and Recommendations:</strong></p><ul><li><strong>Note:</strong> Even when the <code>all_details</code> query parameter is set to true, some Timekeeping alert configurations with Overtime Rules are not returned in the response when the corresponding Overtime Rule is hidden by the employee's GDAP.</li><li><strong>Recommendation:</strong> Use the Retrieve Timekeeping Alert Profile by ID (GET /v1/timekeeping/setup/timekeeping_alert_profiles/{id}) or Retrieve Timekeeping Alert Profiles (POST /v1/timekeeping/setup/timekeeping_alert_profiles/multi_read) operations to retrieve the whole Timekeeping alert profile object.</li></ul>",
                "operationId": "Retrieve All Timekeeping Alert Profiles",
                "parameters": [
                    {
                        "description": "A Boolean indicator of whether or not the response returns all details of each Timekeeping alert profile. When false, the response returns only the ID, name, and description. Defaults to true to maintain backward compatibility, but we recommend setting this Boolean to false if you are incorporating this operation into a new application. Refer to the main description of the Retrieve All Timekeeping Alert Profiles operation for more details and recommendations.",
                        "in": "query",
                        "name": "all_details",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of Timekeeping alert profiles.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AlertProfile"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "[WTK-104414] - The current user is not authorized to access Timekeeping alert profiles."
                    }
                },
                "summary": "Returns a list of all Timekeeping alert profiles.",
                "tags": [
                    "Timekeeping Alert Profiles"
                ]
            }
        },
        "/v1/timekeeping/setup/timekeeping_alert_profiles/multi_read": {
            "post": {
                "description": "This operation returns a list of Timekeeping alert profiles by object references.",
                "operationId": "Retrieve Timekeeping Alert Profiles",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MultiReadRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of Timekeeping alert profiles.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AlertProfile"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "207": {
                        "description": "[WTK-104416] - Partially retrieved a list of the Timekeeping alert profiles. Some of the specified object references do not exist."
                    },
                    "400": {
                        "description": "[WCO-133102] -Please provide only 1 of these parameters :- ids/qualifiers/refs."
                    },
                    "403": {
                        "description": "[WTK-104414] - The current user is not authorized to access Timekeeping alert profiles."
                    },
                    "404": {
                        "description": "[WTK-104415] - The specified Timekeeping alert profiles object references do not exist."
                    }
                },
                "summary": "Returns a list of Timekeeping alert profiles.",
                "tags": [
                    "Timekeeping Alert Profiles"
                ]
            }
        },
        "/v1/timekeeping/setup/timekeeping_alert_profiles/{id}": {
            "get": {
                "description": "This operation returns a Timekeeping alert profile by ID.",
                "operationId": "Retrieve Timekeeping alert profile by ID",
                "parameters": [
                    {
                        "description": "The ID of the Timekeeping alert profile to retrieve.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a Timekeeping alert profile.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlertProfile"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "[WTK-104414] - The current user is not authorized to access Timekeeping alert profile."
                    },
                    "404": {
                        "description": "[WTK-104417] - A Timekeeping alert profile does not exist with specified ID."
                    }
                },
                "summary": "Returns a Timekeeping alert profile by ID.",
                "tags": [
                    "Timekeeping Alert Profiles"
                ]
            }
        },
        "/v1/timekeeping/timecard_signoffs": {
            "delete": {
                "description": "This operation deletes (removes) an employee timecard sign-off.",
                "operationId": "Delete Employee Timecard Signoff as Manager",
                "requestBody": {
                    "$ref": "#/components/requestBodies/ObjectRef_Entity"
                },
                "responses": {
                    "204": {
                        "description": "Successfully deleted (removed) a timecard signoff."
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>A person number is required.</li></ul>"
                    }
                },
                "summary": "Deletes (removes) an employee timecard sign-off.",
                "tags": [
                    "Signoffs for Manager"
                ]
            },
            "get": {
                "description": "<p>This operation returns a boolean indicating whether or not automatic signoff is enabled.</p><br /><p>The associated Access Control Point is AUTOMATIC_SIGNOFF_FAP.</p>",
                "operationId": "Retrieve Automatic Signoff Status",
                "parameters": [
                    {
                        "description": "A unique identifier for a person. This is not an employee ID.",
                        "in": "query",
                        "name": "person_num",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A unique identifier for an employee.",
                        "in": "query",
                        "name": "employee_id",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved a list of all timecard sign-off information for the specified date range.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SignoffEntity"
                                    },
                                    "type": "array"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>A list of employees with at least one employee in the list is required.</li><li>A timeframe ID must be provided.</li></ul>"
                    }
                },
                "summary": "Returns automatic signoff status.",
                "tags": [
                    "Signoffs for Manager"
                ]
            },
            "post": {
                "description": "This operation signs off an employee timecard for a specified timeframe.",
                "operationId": "Sign Off Employee Timecard as Manager",
                "parameters": [
                    {
                        "description": "A symbolic identifier that represents a timeframe or a span of time.",
                        "in": "query",
                        "name": "timeframe_id",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "Previous_Payperiod",
                                "Current_Payperiod",
                                "Next_Payperiod",
                                "Range_Of_Dates"
                            ],
                            "default": "Range_Of_Dates"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ObjectRef_Entity"
                },
                "responses": {
                    "204": {
                        "description": "Successfully signed off an employee timecard for the specified timeframe."
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>A person number is required.</li><li>A timeframe ID must be provided.</li></ul>"
                    }
                },
                "summary": "Signs off an employee timecard for a specified timeframe.",
                "tags": [
                    "Signoffs for Manager"
                ]
            }
        },
        "/v1/timekeeping/timestamps": {
            "get": {
                "description": "This operation returns the last recorded timestamp.",
                "operationId": "Retrieve Timestamp",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the last recorded timestamp.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Timestamp_Context_Transaction_request"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>A general error occurred while attempting to retrieve the last recorded timestamp.</li></ul>"
                    }
                },
                "summary": "Returns the last recorded timestamp.",
                "tags": [
                    "Timestamps"
                ]
            },
            "post": {
                "description": "This operation adds (or records) a timestamp for a punch transaction.",
                "operationId": "Add Timestamp",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Timestamp_Context_Transaction_request"
                            }
                        }
                    },
                    "description": "The Add Timestamp request payload."
                },
                "responses": {
                    "200": {
                        "description": "Successfully added a timestamp to a punch.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Timestamp_Context_Transaction_request"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: <ul><li>All fields are optional.</li></ul>"
                    }
                },
                "summary": "Adds a timestamp for a punch.",
                "tags": [
                    "Timestamps"
                ]
            }
        }
    },
    "servers": [
        {
            "url": "/"
        }
    ],
    "components": {
        "requestBodies": {
            "ObjectRef_Entity": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ObjectRef_Entity"
                        }
                    }
                },
                "description": "A unique identifier for a person. This is not an employee ID.",
                "required": true
            },
            "Attestation_Profile_DTO_object": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Attestation_Profile_DTO_object"
                        }
                    }
                },
                "description": "The Attestation profile object."
            },
            "Attestation_Assignment_DTO_object": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Attestation_Assignment_DTO_object"
                        }
                    }
                },
                "description": "The Attestation assignment object."
            },
            "ExceptionCategoryForRest": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ExceptionCategoryForRest"
                        }
                    }
                }
            },
            "ExceptionCategoryForRestArray": {
                "content": {
                    "application/json": {
                        "schema": {
                            "items": {
                                "$ref": "#/components/schemas/ExceptionCategoryForRest"
                            },
                            "type": "array"
                        }
                    }
                }
            },
            "Multi_Read_Request_for_exception_categories": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/Multi_Read_Request_for_exception_categories"
                        }
                    }
                }
            }
        },
        "schemas": {
            "BulkAccrualMoveContextAndDataForRest": {
                "properties": {
                    "accrualMoves": {
                        "items": {
                            "$ref": "#/components/schemas/AcrrualMoveRestEntityTransactionRequest"
                        },
                        "type": "array"
                    },
                    "managerRole": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "BulkAccrualResponse": {
                "properties": {
                    "accrualMoveForRest": {
                        "items": {
                            "$ref": "#/components/schemas/Bulk_Acrrual_Move_Context_Transaction_request"
                        },
                        "type": "array"
                    },
                    "tkError": {
                        "$ref": "#/components/schemas/TKErrorEntity"
                    }
                },
                "type": "object"
            },
            "AccrualPayoutsImportRequestForRest": {
                "description": "Accrual Payout import request REST entity.",
                "properties": {
                    "accrualPayouts": {
                        "description": "A list of bulk accrual payout objects.",
                        "items": {
                            "$ref": "#/components/schemas/BulkAccrualPayoutForRest"
                        },
                        "type": "array"
                    },
                    "managerRole": {
                        "description": "A Boolean indicator that overrides whether or not the currently logged in user has the manager role.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "BulkAccrualImportResponseForRest": {
                "description": "Bulk Accrual Import response REST entity.",
                "properties": {
                    "accrualPayouts": {
                        "description": "A list of bulk accrual payout objects.",
                        "items": {
                            "$ref": "#/components/schemas/BulkAccrualPayoutForRest"
                        },
                        "type": "array"
                    },
                    "accrualResets": {
                        "description": "A list of bulk accrual reset objects.",
                        "items": {
                            "$ref": "#/components/schemas/Bulk_Acrrual_Reset_Context_Transaction_request"
                        },
                        "type": "array"
                    },
                    "accrualSuspensions": {
                        "description": "A list of bulk accrual suspension objects.",
                        "items": {
                            "$ref": "#/components/schemas/BulkAccrualSuspensionForRest"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "AccrualResetsImportRequestForRest": {
                "description": "Accrual Reset import request REST entity.",
                "properties": {
                    "accrualResets": {
                        "description": "A list of bulk accrual reset objects.",
                        "items": {
                            "$ref": "#/components/schemas/Bulk_Acrrual_Reset_Context_Transaction_request"
                        },
                        "type": "array"
                    },
                    "managerRole": {
                        "description": "A Boolean indicator that overrides whether or not the currently logged in user has the manager role.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "AccrualSuspensionsImportRequestForRest": {
                "description": "Accrual Suspension import request REST entity .",
                "properties": {
                    "accrualSuspensions": {
                        "description": "A list of bulk accrual suspension objects.",
                        "items": {
                            "$ref": "#/components/schemas/BulkAccrualSuspensionForRest"
                        },
                        "type": "array"
                    },
                    "managerRole": {
                        "description": "A Boolean indicator that overrides whether or not the currently logged in user has the manager role.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "AccrualUpdateRestRequest": {
                "description": "Bulk Accrual Update REST request.",
                "properties": {
                    "accrualUpdates": {
                        "description": "A list of accrual updates to perform.",
                        "items": {
                            "$ref": "#/components/schemas/Accrual_Bulk_Update_Transaction_request"
                        },
                        "type": "array"
                    },
                    "formatForTransactionAssistant": {
                        "description": "A Boolean indicator of whether or not the response is formatted such that the Transaction Assistant can resubmit the request.",
                        "type": "boolean"
                    },
                    "managerRole": {
                        "description": "A Boolean indicator of whether or not the user making the request has the manager role.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "AnswersRequest": {
                "description": "The Attestation Answer request model.",
                "properties": {
                    "where": {
                        "$ref": "#/components/schemas/QuestionWhere"
                    }
                },
                "type": "object"
            },
            "QuestionsRequest": {
                "description": "The Attestation Question request model.",
                "properties": {
                    "where": {
                        "$ref": "#/components/schemas/QuestionWhere"
                    }
                },
                "type": "object"
            },
            "AttestationKey_Public": {
                "description": "Key with ID and name for the Metadata Driven User Interface (MDUI).",
                "properties": {
                    "id": {
                        "description": "Internal ID of the entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "key": {
                        "description": "The name of the key entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Displayed name of the entity.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SignoffEntity": {
                "description": "Entity that contains information needed to perform employee timecard sign-offs.",
                "properties": {
                    "carryForwardDates": {
                        "description": "Dates on which Carry Forward information is collected.",
                        "items": {
                            "format": "date",
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "hireDate": {
                        "description": "An employee's hire date.",
                        "format": "date",
                        "type": "string"
                    },
                    "managerSignOffThroughDate": {
                        "description": "The employee timecard is locked by a manager through this date and time due to sign-off.",
                        "format": "date",
                        "type": "string"
                    },
                    "payRollLockThroughDateTime": {
                        "description": "Payroll is locked through this date and time.",
                        "type": "string"
                    },
                    "signOffLockThroughDateTime": {
                        "description": "The employee timecard is locked through this date and time due to sign-off.",
                        "type": "string"
                    },
                    "signOffPending": {
                        "description": "A Boolean indicator of whether or not the sign-off process is pending.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ExceptionCategoryForRest": {
                "description": "Exception category model.",
                "properties": {
                    "callToActions": {
                        "description": "An array of calls to action.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef"
                        },
                        "type": "array"
                    },
                    "color": {
                        "description": "The color of an exception category.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of an exception category.",
                        "type": "string"
                    },
                    "exceptionTypes": {
                        "description": "An array of exception types.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of an exception category.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of an exception category.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ExceptionTileForRest": {
                "description": "Exception tile model. The following properties are required: \"allTimecardsWithExceptions\", \"cleanTimecardColor\", \"cleanTimecardLabel\", \"cleanTimecardsCurrentPayPeriodActions\", \"cleanTimecardsPreviousPayPeriodActions\", \"exceptionCategories\", \"hyperfind\", \"id\", \"name\", \"pendingChangesColor\", \"pendingChangesEntityTypes\", \"pendingChangesLabel\", \"period\".",
                "properties": {
                    "allTimecardsWithExceptions": {
                        "description": "A Boolean indicator of whether or not to include all Timecards with exceptions.",
                        "type": "boolean"
                    },
                    "cleanTimecardColor": {
                        "description": "The color of a clean Timecard.",
                        "type": "string"
                    },
                    "cleanTimecardLabel": {
                        "description": "The clean Timecards label.",
                        "type": "string"
                    },
                    "cleanTimecardVisible": {
                        "description": "A Boolean indicator of whether or not a clean Timecard is visible.",
                        "type": "boolean"
                    },
                    "cleanTimecardsCurrentPayPeriodActions": {
                        "$ref": "#/components/schemas/ObjectRef"
                    },
                    "cleanTimecardsPreviousPayPeriodActions": {
                        "$ref": "#/components/schemas/ObjectRef"
                    },
                    "description": {
                        "description": "The description of an exception tile.",
                        "type": "string"
                    },
                    "exceptionCategories": {
                        "description": "An array of exception categories.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef"
                        },
                        "type": "array"
                    },
                    "hyperfind": {
                        "$ref": "#/components/schemas/ObjectRef"
                    },
                    "id": {
                        "description": "The ID of an exception tile.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of an exception tile.",
                        "type": "string"
                    },
                    "pendingChangesColor": {
                        "description": "The color of pending changes.",
                        "type": "string"
                    },
                    "pendingChangesEntityTypes": {
                        "description": "<p>The value must be either or both of Punch and Paycode Edit.</p><p>This cannot be empty.</p>",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef"
                        },
                        "type": "array"
                    },
                    "pendingChangesLabel": {
                        "description": "The pending changes label.",
                        "type": "string"
                    },
                    "pendingChangesVisible": {
                        "description": "A Boolean indicator of whether or not pending changes are visible.",
                        "type": "boolean"
                    },
                    "period": {
                        "$ref": "#/components/schemas/ObjectRef"
                    }
                },
                "required": [
                    "allTimecardsWithExceptions",
                    "cleanTimecardColor",
                    "cleanTimecardLabel",
                    "cleanTimecardsCurrentPayPeriodActions",
                    "cleanTimecardsPreviousPayPeriodActions",
                    "description",
                    "exceptionCategories",
                    "hyperfind",
                    "id",
                    "name",
                    "pendingChangesColor",
                    "pendingChangesEntityTypes",
                    "pendingChangesLabel",
                    "period"
                ],
                "type": "object"
            },
            "TransferEntity": {
                "description": "Entity containing information regarding a transfer.",
                "properties": {
                    "editable": {
                        "type": "boolean"
                    },
                    "laborAccountId": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "orgJobId": {
                        "description": "Job Id",
                        "format": "int64",
                        "type": "integer"
                    },
                    "systemGenerated": {
                        "type": "boolean"
                    },
                    "transferString": {
                        "description": "Transfer String",
                        "type": "string"
                    },
                    "workRuleId": {
                        "description": "Work Rule Id",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "BulkPHCAllStatusesSimpleResponse": {
                "description": "Entity for bulk PHC status.",
                "properties": {
                    "completed": {
                        "description": "The date and time a batch job was completed in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "details": {
                        "$ref": "#/components/schemas/DetailsBaseDTO"
                    },
                    "expiresAt": {
                        "description": "The expiration time of Redis.",
                        "type": "string"
                    },
                    "name": {
                        "description": "API name, Compute Correction or Save Correction.",
                        "type": "string"
                    },
                    "nextPing": {
                        "description": "Fixed value 60 seconds.",
                        "type": "string"
                    },
                    "requestKey": {
                        "description": "Unique key identifying the submitted batch.",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status string. Values: PENDING (batch is in progress), SUCCESSFUL, FAILED (TBD), EXPIRED (key was found in batch job framework but was not found in redis).",
                        "type": "string"
                    },
                    "submitted": {
                        "description": "The date and time a batch job was submitted in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkPHCBaseRequestBulkPHCRequestWhereBulkPHCComputeAsyncRequestDo": {
                "description": "The Pending Historical Corrections base request model.",
                "properties": {
                    "do": {
                        "$ref": "#/components/schemas/BulkPHCComputeAsyncRequestDo"
                    },
                    "where": {
                        "$ref": "#/components/schemas/BulkPHCRequestWhere"
                    }
                },
                "required": [
                    "where"
                ],
                "type": "object"
            },
            "BulkPHCBaseResponse": {
                "description": "Entity for Base Response.",
                "properties": {
                    "details": {
                        "$ref": "#/components/schemas/DetailsBaseDTO"
                    },
                    "name": {
                        "description": "API name, Compute Correction or Save Correction.",
                        "type": "string"
                    },
                    "nextPing": {
                        "description": "Fixed value 60 seconds.",
                        "type": "string"
                    },
                    "requestKey": {
                        "description": "Unique key identifying the submitted batch.",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status string. Values: PENDING (batch is in progress), SUCCESSFUL, FAILED (TBD), EXPIRED (key was found in batch job framework but was not found in redis).",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkPHCGetResultSuccessResponse": {
                "description": "Entity that contains response information.",
                "properties": {
                    "employees": {
                        "description": "Employee number and name.",
                        "items": {
                            "$ref": "#/components/schemas/SingleBulkHCGetResultBaseResponse"
                        },
                        "type": "array"
                    },
                    "nextResultIndex": {
                        "description": "This is zero if the response contains the last chunk of employees. If non-zero, there are more employees and this value should be passed as ResultIndex in next call.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "totalPendingCorrectionEmployees": {
                        "description": "Total number of employees found with pending corrections.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "totalProcessedEmployees": {
                        "description": "Total number of employees in request.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "BulkPHCGetResultPartialFailureResponse": {
                "description": "Entity for bulk PHC partial success response.",
                "properties": {
                    "details": {
                        "$ref": "#/components/schemas/BulkPHCPartialFailureDetails"
                    },
                    "errorCode": {
                        "description": "The error code associated with an error result.",
                        "type": "string"
                    },
                    "message": {
                        "description": "The message associated with an error result.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkPHCStatusResponse": {
                "description": "Status API model.",
                "properties": {
                    "details": {
                        "$ref": "#/components/schemas/DetailsBaseDTO"
                    },
                    "expiresAt": {
                        "description": "The expiration time of Redis.",
                        "type": "string"
                    },
                    "name": {
                        "description": "API name, Compute Correction or Save Correction.",
                        "type": "string"
                    },
                    "nextPing": {
                        "description": "Fixed value 60 seconds.",
                        "type": "string"
                    },
                    "requestKey": {
                        "description": "Unique key identifying the submitted batch.",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status string. Values: PENDING (batch is in progress), SUCCESSFUL, FAILED (TBD), EXPIRED (key was found in batch job framework but was not found in redis).",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkPHCBaseRequestBulkPHCRequestWhereBulkPHCSaveAsyncRequestDo": {
                "description": "The Pending Historical Corrections base request model.",
                "properties": {
                    "do": {
                        "$ref": "#/components/schemas/BulkPHCSaveAsyncRequestDo"
                    },
                    "where": {
                        "$ref": "#/components/schemas/BulkPHCRequestWhere"
                    }
                },
                "required": [
                    "where"
                ],
                "type": "object"
            },
            "PayCodeDAPRequest": {
                "description": "The pay code data access profile request for bulk operations.",
                "properties": {
                    "where": {
                        "$ref": "#/components/schemas/PayCodeDAPWhere"
                    }
                },
                "required": [
                    "where"
                ],
                "type": "object"
            },
            "ObjectRef": {
                "description": "The HCA object reference object model.",
                "properties": {
                    "id": {
                        "description": "The ID associated with an object reference.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer"
                    },
                    "qualifier": {
                        "description": "The qualifier associated with an object reference.",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AlertProfile": {
                "description": "Timekeeping alert profile",
                "properties": {
                    "alertProfileConfigurations": {
                        "description": "Configuration related to timekeeping alert profile",
                        "items": {
                            "$ref": "#/components/schemas/AlertProfileConfig"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "Description of the timekeeping alert profile",
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "id": {
                        "description": "The ID of the timekeeping alert profile",
                        "format": "int64",
                        "type": "integer",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "key": {
                        "description": "Name of hte alert profile in case of sdm",
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    },
                    "name": {
                        "description": "Name of the timekeeping alert profile",
                        "type": "string",
                        "xml": {
                            "attribute": true
                        }
                    }
                },
                "type": "object",
                "xml": {
                    "name": "profile"
                }
            },
            "MultiReadRequest": {
                "description": "Model for Locale Policy multi-read requests.",
                "properties": {
                    "exclusiveObjectRefList": {
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "where": {
                        "$ref": "#/components/schemas/ObjectRefList"
                    }
                },
                "type": "object"
            },
            "CostCenter": {
                "description": "Model for an org map location for widgets.",
                "properties": {
                    "costCenter": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "referenceId": {
                        "description": "The labor account ID associated with a cost center.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "WorkRule": {
                "properties": {
                    "callInRuleId": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "id": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AcrrualMoveRestEntityTransactionRequest": {
                "description": "Accrual Move REST entity.",
                "properties": {
                    "amount": {
                        "description": "The amount of the accrual.",
                        "format": "double",
                        "type": "number"
                    },
                    "effectiveDate": {
                        "description": "The effective date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "format": "date",
                        "type": "string"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "fromAccrualCode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "toAccrualCode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    }
                },
                "type": "object"
            },
            "TKErrorEntity": {
                "description": "Entity that contains Error information",
                "properties": {
                    "errorCode": {
                        "description": "Error code",
                        "type": "string"
                    },
                    "errorParams": {
                        "additionalProperties": {
                            "type": "object"
                        },
                        "description": "Parameters used for error code and error message",
                        "type": "object"
                    },
                    "message": {
                        "description": "Error message",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkAccrualPayoutForRest": {
                "description": "Bulk Accrual Payout REST entity.",
                "properties": {
                    "accrualPayout": {
                        "$ref": "#/components/schemas/AccrualPayoutForRest"
                    }
                },
                "type": "object"
            },
            "BulkAccrualSuspensionForRest": {
                "description": "Bulk Accrual Suspension REST entity.",
                "properties": {
                    "accrualSuspension": {
                        "$ref": "#/components/schemas/AccrualSuspensionForRest"
                    }
                },
                "type": "object"
            },
            "QuestionWhere": {
                "description": "The Attestation Question where model.",
                "properties": {
                    "questions": {
                        "$ref": "#/components/schemas/ObjectRefList"
                    }
                },
                "type": "object"
            },
            "CommonDateRange_Public": {
                "description": "Model for date range.",
                "properties": {
                    "endDate": {
                        "description": "The end date associated with date range.",
                        "format": "date",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "The start date associated with date range.",
                        "format": "date",
                        "type": "string"
                    },
                    "symbolicPeriod": {
                        "$ref": "#/components/schemas/ObjectRef_Public"
                    }
                },
                "type": "object"
            },
            "AttestationKey": {
                "description": "Key with ID and name for the Metadata Driven User Interface (MDUI).",
                "properties": {
                    "id": {
                        "description": "Internal ID of the entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "key": {
                        "description": "The name of the key entity.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Displayed name of the entity.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CommonDateRange": {
                "description": "Model for date range.",
                "properties": {
                    "endDate": {
                        "description": "The end date associated with date range.",
                        "format": "date",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "The start date associated with date range.",
                        "format": "date",
                        "type": "string"
                    },
                    "symbolicPeriod": {
                        "$ref": "#/components/schemas/ObjectRef"
                    }
                },
                "type": "object"
            },
            "DetailsBaseDTO": {
                "description": "Entity for Details.",
                "properties": {
                    "employees": {
                        "description": "List of selected employees or 'All employees selected'.",
                        "type": "string"
                    },
                    "requestedDate": {
                        "description": "The date of the execution of this API.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkPHCComputeAsyncRequestDo": {
                "description": "The Compute Pending Historical Corrections request 'do' model.",
                "properties": {
                    "personDates": {
                        "$ref": "#/components/schemas/BulkHCPersonDates"
                    }
                },
                "type": "object"
            },
            "BulkPHCRequestWhere": {
                "description": "Entity that contains information needed to perform pending historical corrections compute.",
                "properties": {
                    "allEmployees": {
                        "description": "A Boolean indicator of whether or not to compute historical corrections for all employees. This option does not filter employees based on the employee access of the user making the call; however, this operation is secured by an Access Control Point (ACP). This property is mutually exclusive with employees.",
                        "type": "boolean"
                    },
                    "employees": {
                        "$ref": "#/components/schemas/TimekeepingObjectRefList"
                    },
                    "referenceDate": {
                        "description": "The date from which pending corrections are generated in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "type": "string"
                    }
                },
                "required": [
                    "referenceDate"
                ],
                "type": "object"
            },
            "SingleBulkHCGetResultBaseResponse": {
                "description": "Entity for Signle Response.",
                "properties": {
                    "correctionCount": {
                        "description": "Number of corrections discovered.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "earliestCorrectionDate": {
                        "description": "The earliest date out of all Pending correction discovered by the API.",
                        "type": "string"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "exception": {
                        "$ref": "#/components/schemas/ErrorInfo"
                    },
                    "latestCorrectionDate": {
                        "description": "The latest date out of all Pending corrections discovered by the API.",
                        "type": "string"
                    },
                    "processedHistoricDate": {
                        "description": "System finds the start of the pay period containing historical Date and that day is HC Processing Date. In case of Previous Pay Period, it will be same as Historic Date.",
                        "type": "string"
                    },
                    "requestedHistoricDate": {
                        "description": "Earliest date in the past requested for discovery of corrections.",
                        "type": "string"
                    },
                    "runDateTime": {
                        "description": "The date of the execution of this API.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkPHCPartialFailureDetails": {
                "description": "Entity for bulk PHC partial success details.",
                "properties": {
                    "error-offsets": {
                        "description": "The error offsets associated with a partial success response.",
                        "items": {
                            "format": "int32",
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "extraDetails": {
                        "$ref": "#/components/schemas/BulkPHCPartialFailureExtraDetails"
                    },
                    "results": {
                        "description": "The results of a partial success response, including successes and failures.",
                        "items": {
                            "$ref": "#/components/schemas/BulkPHCErrorOrSuccess"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "BulkPHCSaveAsyncRequestDo": {
                "description": "Save Async API Request Model.",
                "properties": {
                    "commentsNotes": {
                        "$ref": "#/components/schemas/BulkPHCCommentNote"
                    },
                    "effectiveDate": {
                        "description": "Historical_correction table will be updated with the effective date specified in the request. If Save Corrections is false, this field should be ignored.",
                        "type": "string"
                    },
                    "includeInTotals": {
                        "description": "Boolean. If true, actual_totals resulting from corrections will have 'already paid switch' is false. If false, 'already paid switch' is true.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "PayCodeDAPWhere": {
                "description": "The where clause associated with a payCodeDataAccessProfiles where object.",
                "properties": {
                    "payCodeDataAccessProfiles": {
                        "$ref": "#/components/schemas/ObjectRefList"
                    }
                },
                "required": [
                    "payCodeDataAccessProfiles"
                ],
                "type": "object"
            },
            "AlertProfileConfig": {
                "description": "Alert profile configuration json",
                "properties": {
                    "alertType": {
                        "$ref": "#/components/schemas/AlertType"
                    },
                    "conditionType": {
                        "$ref": "#/components/schemas/NamedEntityBean"
                    },
                    "hoursBeforeOvertimeInSeconds": {
                        "description": "Alert profile configuration hours before overtime in seconds value",
                        "type": "string"
                    },
                    "id": {
                        "description": "Alert profile configuration id",
                        "format": "int64",
                        "type": "integer"
                    },
                    "notification": {
                        "$ref": "#/components/schemas/NamedEntityBean"
                    },
                    "overtimeRule": {
                        "$ref": "#/components/schemas/NamedEntityBean"
                    },
                    "parameter": {
                        "$ref": "#/components/schemas/NamedEntityBean"
                    },
                    "parameterType": {
                        "$ref": "#/components/schemas/NamedEntityBean"
                    },
                    "ruleExpression": {
                        "description": "Alert profile configuration rule expression",
                        "type": "string"
                    },
                    "threshold": {
                        "description": "Alert profile configuration threshold value",
                        "format": "double",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "ObjectRefList": {
                "description": "Model describing a collection of object references.",
                "properties": {
                    "ids": {
                        "description": "The list of references by ID.",
                        "items": {
                            "format": "int64",
                            "type": "integer"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "qualifiers": {
                        "description": "The qualifier of the object reference, such as name.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "refs": {
                        "description": "The object references.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "TimekeepingOrgJob": {
                "description": "Entity that contains org job information",
                "properties": {
                    "applyDate": {
                        "description": "Org Job apply date",
                        "format": "date",
                        "type": "string"
                    },
                    "id": {
                        "description": "Object Ref Id",
                        "format": "int64",
                        "type": "integer"
                    },
                    "qualifier": {
                        "description": "Object Ref Unique qualifier",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LaborCategories": {
                "description": "Model for labor categories transfer.",
                "properties": {
                    "entries": {
                        "description": "Labor category entries.",
                        "items": {
                            "$ref": "#/components/schemas/Labor_Category_Entry"
                        },
                        "type": "array"
                    },
                    "laborString": {
                        "description": "Labor account string.",
                        "type": "string"
                    },
                    "referenceId": {
                        "description": "The ID of the labor account.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "OrgObjectRef": {
                "description": "Model for org object references.",
                "properties": {
                    "id": {
                        "description": "The ID of an org object.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer"
                    },
                    "qualifier": {
                        "description": "The qualifer of an org object.",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LaborLevelDefinitionEntry": {
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "id": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AccrualPayoutForRest": {
                "description": "Accrual Payout REST entity.",
                "properties": {
                    "accrualCode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "effectiveDate": {
                        "description": "The effective date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "type": "string"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    }
                },
                "type": "object"
            },
            "AccrualSuspensionForRest": {
                "description": "Accrual Suspension REST entity.",
                "properties": {
                    "accrualCode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "isCarryoverLimitsSuspended": {
                        "description": "A Boolean indicator of whether or not carry over limits are suspended.",
                        "type": "boolean"
                    },
                    "isEarningLimitsSuspended": {
                        "description": "A Boolean indicator of whether or not earning limites are suspended.",
                        "type": "boolean"
                    },
                    "isGrantsSuspended": {
                        "description": "A Boolean indicator of whether or not grants are suspended.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "ObjectRef_Public": {
                "description": "The HCA object reference object model.",
                "properties": {
                    "id": {
                        "description": "The ID associated with an object reference.",
                        "format": "int64",
                        "readOnly": true,
                        "type": "integer"
                    },
                    "qualifier": {
                        "description": "The qualifier associated with an object reference.",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CostCenter_Public": {
                "description": "Model for an org map location for widgets.",
                "properties": {
                    "costCenter": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "referenceId": {
                        "description": "The labor account ID associated with a cost center.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "LaborCategories_Public": {
                "description": "Model for labor categories transfer.",
                "properties": {
                    "entries": {
                        "description": "Labor category entries.",
                        "items": {
                            "$ref": "#/components/schemas/Labor_Category_Entry_Public"
                        },
                        "type": "array"
                    },
                    "laborString": {
                        "description": "Labor account string.",
                        "type": "string"
                    },
                    "referenceId": {
                        "description": "The ID of the labor account.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "PunchGeoLocation_Public": {
                "properties": {
                    "accuracy": {
                        "format": "double",
                        "type": "number"
                    },
                    "deviceId": {
                        "type": "string"
                    },
                    "geoLocationData": {
                        "$ref": "#/components/schemas/GeoLocationData_Public"
                    },
                    "geoLocationInfo": {
                        "readOnly": true,
                        "type": "string"
                    },
                    "geofenceMethodId": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "latitude": {
                        "format": "double",
                        "type": "number"
                    },
                    "locationId": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "locationType": {
                        "enum": [
                            "COARSE",
                            "FINE"
                        ],
                        "type": "string"
                    },
                    "longitude": {
                        "format": "double",
                        "type": "number"
                    },
                    "outsideOfGeofence": {
                        "type": "boolean"
                    },
                    "unverified": {
                        "type": "boolean"
                    },
                    "updateTime": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkHCPersonDates": {
                "description": "The Pending Historical Corrections person dates model.",
                "properties": {
                    "earliestCorrectionDateName": {
                        "description": "The name of a earliestCorrectionDateName object.",
                        "type": "string"
                    },
                    "latestCorrectionDateName": {
                        "description": "The name of a latestCorrectionDateName object.",
                        "type": "string"
                    },
                    "processedHistoricDateName": {
                        "description": "The name of a processedHistoricDateName object.",
                        "type": "string"
                    },
                    "requestedHistoricDateName": {
                        "description": "The name of a requestedHistoricDateName object.",
                        "type": "string"
                    },
                    "runDateTimeName": {
                        "description": "The name of a runDateTime object.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TimekeepingObjectRefList": {
                "description": "Model describing a collection of object references.",
                "properties": {
                    "ids": {
                        "description": "The list of references by ID.",
                        "items": {
                            "format": "int64",
                            "type": "integer"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "qualifiers": {
                        "description": "The qualifier of the object reference, such as name.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "refs": {
                        "description": "The object references.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef_Entity"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ErrorInfo": {
                "description": "Model context for an error result.",
                "properties": {
                    "errorCode": {
                        "description": "The error code associated with an error result.",
                        "type": "string"
                    },
                    "message": {
                        "description": "The message associated with an error result.",
                        "type": "string"
                    },
                    "paramValues": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "BulkPHCPartialFailureExtraDetails": {
                "description": "Entity for Partial Failure Extra Detatils.",
                "properties": {
                    "nextResultIndex": {
                        "description": "This is zero if the response contains the last chunk of employees. If non-zero, there are more employees and this value should be passed as ResultIndex in next call.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "totalErrorEmployees": {
                        "description": "Total number of failure employees.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "totalErrorEmployeesThisPage": {
                        "description": "Total number of failure employees.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "totalPendingCorrectionEmployees": {
                        "description": "Total number of employees found with pending corrections.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "totalProcessedEmployees": {
                        "description": "Total number of employees in request.",
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "BulkPHCErrorOrSuccess": {
                "description": "Entity for bulk PHC error and success response.",
                "properties": {
                    "error": {
                        "$ref": "#/components/schemas/BulkPHCError"
                    },
                    "success": {
                        "$ref": "#/components/schemas/SingleBulkHCGetResultBaseResponse"
                    }
                },
                "type": "object"
            },
            "BulkPHCCommentNote": {
                "description": "Pending Historical Corrections Comments and Notes model.",
                "properties": {
                    "comment": {
                        "$ref": "#/components/schemas/BulkPHCComment"
                    },
                    "notes": {
                        "description": "The Notes associated with a Comment.",
                        "items": {
                            "$ref": "#/components/schemas/BulkPHCNote"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "AlertType": {
                "description": "Alert type json",
                "properties": {
                    "conditional": {
                        "description": "Alert type conditional boolean value",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "Alert type id",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Alert type name",
                        "type": "string"
                    },
                    "normalizedName": {
                        "description": "Alert type normalized name which will not be localized",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NamedEntityBean": {
                "description": "Timekeeping alert profile named entity",
                "properties": {
                    "id": {
                        "description": "Timekeeping alert ptrofile name",
                        "type": "string"
                    },
                    "name": {
                        "description": "Timekeeping alert profile name",
                        "type": "string"
                    },
                    "normalizedName": {
                        "description": "Timekeeping alert profile normalized name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TKJustification_Public": {
                "description": "Entity describing justification for a missing time exception.",
                "properties": {
                    "durationInHours": {
                        "description": "The duration in hours of a justification.",
                        "format": "double",
                        "readOnly": true,
                        "type": "number"
                    },
                    "endDateTime": {
                        "description": "The end date and time of a justification in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "fromManager": {
                        "description": "A Boolean indicator of whether or not a justification is from a manager.",
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of a justification.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "paycode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "requireManagerApproval": {
                        "description": "A Boolean indicator of whether or not the paycode used for a justification requires a manager's approval.",
                        "type": "boolean"
                    },
                    "startDateTime": {
                        "description": "The start date and time of a justification in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MissingTimeStatusModel_Public": {
                "description": "Object describing the missing time status of an exception.",
                "properties": {
                    "displayName": {
                        "description": "The localized missing time status display name.",
                        "enum": [
                            "1=Not Applicable,2=Pending,3=Employee Justified,4=Manager Justified"
                        ],
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the missing time status ranging from 1 to 4.",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ],
                        "format": "int32",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "GeoLocationData_Public": {
                "properties": {
                    "accessPoint": {
                        "type": "string"
                    },
                    "knownPlace": {
                        "type": "string"
                    },
                    "wifiNetwork": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkPHCError": {
                "description": "Entity for bulk PHC errors.",
                "properties": {
                    "details": {
                        "additionalProperties": {
                            "$ref": "#/components/schemas/ObjectRef_Entity"
                        },
                        "description": "The details associated with an error message.",
                        "type": "object"
                    },
                    "errorCode": {
                        "description": "The error code associated with an error result.",
                        "type": "string"
                    },
                    "message": {
                        "description": "The message associated with an error result.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkPHCComment": {
                "description": "Entity for Comments.",
                "properties": {
                    "id": {
                        "description": "Comment ID.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Comment Name.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BulkPHCNote": {
                "description": "Pending Historical Corrections Note model.",
                "properties": {
                    "text": {
                        "description": "The text associated with a Note.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Aggregated_Transfer_Request_Model": {
                "description": "Aggregated Transfer Data Request model",
                "properties": {
                    "select": {
                        "description": "Select parameter defines all possible objects (Labor Entries, Cost Centers, Work Rules) that can be selected to be returned in the Aggregated Transfer Data request",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "where": {
                        "$ref": "#/components/schemas/Aggregation_Transfer_Data_Where"
                    }
                },
                "type": "object"
            },
            "Aggregated_Transfer_Model": {
                "description": "Aggregated Transfer Data model",
                "properties": {
                    "cost_centers": {
                        "description": "Collection of all active Cost Centers",
                        "items": {
                            "$ref": "#/components/schemas/CostCenter"
                        },
                        "type": "array"
                    },
                    "labor_entries": {
                        "description": "Collection of AggregatedTransferLaborEntry",
                        "items": {
                            "$ref": "#/components/schemas/Aggregation_Transfer_Labor_Entry_Model"
                        },
                        "type": "array"
                    },
                    "work_rules": {
                        "description": "Collection of Work Rules assigned to logged user",
                        "items": {
                            "$ref": "#/components/schemas/WorkRule"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Absence_Span_Request": {
                "description": "Request object with where clause.",
                "properties": {
                    "where": {
                        "$ref": "#/components/schemas/Absence_Span_Where"
                    }
                },
                "required": [
                    "where"
                ],
                "type": "object"
            },
            "Absence_span_response_DTO": {
                "description": "Absence Spans response object.",
                "properties": {
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "spans": {
                        "description": "A list of absence spans.",
                        "items": {
                            "$ref": "#/components/schemas/Absence_span_object"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Bulk_Accrual_Update_Response_Context": {
                "description": "Accrual Update REST response entity.",
                "properties": {
                    "accrualUpdates": {
                        "description": "A reference to the accrual updates list.",
                        "items": {
                            "$ref": "#/components/schemas/Accrual_Bulk_Update_Transaction_request"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Attestation_Display_Form_DTO_object": {
                "description": "The Attestation Display Form model.",
                "properties": {
                    "attestationData": {
                        "description": "The list of Attestation display data.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Display_Data_DTO_object"
                        },
                        "type": "array"
                    },
                    "attestationProcessId": {
                        "description": "The ID of an Attestation Process.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "displayDateTime": {
                        "description": "The date and time of the Attestation Display Form in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss).",
                        "type": "string"
                    },
                    "processDefinition": {
                        "description": "The definition of a Process.",
                        "type": "string"
                    },
                    "processInstanceId": {
                        "description": "The ID of a Process Instance.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Data_Request": {
                "description": "The Attestation daily detail list request model.",
                "properties": {
                    "select": {
                        "description": "A list of Attestation details to select. Valid values include attestationDailyDetail.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "where": {
                        "$ref": "#/components/schemas/Attestation_Data_Where"
                    }
                },
                "type": "object"
            },
            "Attestation_Data_Response": {
                "description": "The Attestation daily detail list model.",
                "properties": {
                    "attestationDailyDetail": {
                        "description": "The Attestation daily detail object of Attestation Data Response.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Daily_Detail"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Attestation_Submit_Form_DTO_object": {
                "description": "The Attestation Submit Form model.",
                "properties": {
                    "attestationData": {
                        "description": "The list of Attestation Submit Data.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Submit_Data_DTO_object"
                        },
                        "type": "array"
                    },
                    "attestationProcessId": {
                        "description": "The ID of an Attestation Process.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "processDefinition": {
                        "description": "The definition of a Process.",
                        "type": "string"
                    },
                    "processInstanceId": {
                        "description": "The ID of a Process Instance.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "responseDateTime": {
                        "description": "The date and time of the Attestation Submit Form in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss).",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Attestation_Answer_DTO_object_Public": {
                "description": "The Attestation answer model.",
                "properties": {
                    "actions": {
                        "description": "A list of actions associated with an Attestation answer.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Answer_DTO_object_Public"
                        },
                        "type": "array"
                    },
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "label": {
                        "description": "The label of an Attestation answer.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "orderNumber": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Answer_DTO_object": {
                "description": "The Attestation answer model.",
                "properties": {
                    "actions": {
                        "description": "A list of actions associated with an Attestation answer.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                        },
                        "type": "array"
                    },
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "label": {
                        "description": "The label of an Attestation answer.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "orderNumber": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Assignment_DTO_object": {
                "description": "The Attestation assignment model.",
                "properties": {
                    "attestationButton": {
                        "$ref": "#/components/schemas/Attestation_Button_DTO_object"
                    },
                    "attestationCondition": {
                        "$ref": "#/components/schemas/Attestation_Condition_DTO_object"
                    },
                    "attestationWorkflow": {
                        "$ref": "#/components/schemas/Attestation_Workflows_DTO_object"
                    },
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "manualTimeEntryWorkflow": {
                        "$ref": "#/components/schemas/Attestation_Workflows_DTO_object"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "orderNumber": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Button_DTO_object_Public": {
                "description": "The Attestation button model.",
                "properties": {
                    "buttonType": {
                        "$ref": "#/components/schemas/AttestationKey_Public"
                    },
                    "collectBeforeAttestation": {
                        "description": "A Boolean indicator of whether or not to collect before Attestation for an Attestation button.",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "The description of an Attestation button.",
                        "type": "string"
                    },
                    "devicePositionSelectionAllowed": {
                        "description": "A Boolean indicator of whether or not Assignments selection is allowed at a device.",
                        "type": "boolean"
                    },
                    "deviceTransferAllowed": {
                        "description": "A Boolean indicator of whether or not a transfer is allowed at a device.",
                        "type": "boolean"
                    },
                    "displayType": {
                        "$ref": "#/components/schemas/AttestationKey_Public"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "offlineQuestion": {
                        "$ref": "#/components/schemas/Attestation_Question_DTO_object_Public"
                    },
                    "offlineWorkflow": {
                        "$ref": "#/components/schemas/Attestation_Workflows_DTO_object_Public"
                    },
                    "subType": {
                        "$ref": "#/components/schemas/AttestationKey_Public"
                    },
                    "timecardApprovalTimeframe": {
                        "$ref": "#/components/schemas/CommonDateRange_Public"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Button_DTO_object": {
                "description": "The Attestation button model.",
                "properties": {
                    "buttonType": {
                        "$ref": "#/components/schemas/AttestationKey"
                    },
                    "collectBeforeAttestation": {
                        "description": "A Boolean indicator of whether or not to collect before Attestation for an Attestation button.",
                        "type": "boolean"
                    },
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "The description of an Attestation button.",
                        "type": "string"
                    },
                    "devicePositionSelectionAllowed": {
                        "description": "A Boolean indicator of whether or not Assignments selection is allowed at a device.",
                        "type": "boolean"
                    },
                    "deviceTransferAllowed": {
                        "description": "A Boolean indicator of whether or not a transfer is allowed at a device.",
                        "type": "boolean"
                    },
                    "displayType": {
                        "$ref": "#/components/schemas/AttestationKey"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "offlineQuestion": {
                        "$ref": "#/components/schemas/Attestation_Question_DTO_object"
                    },
                    "offlineWorkflow": {
                        "$ref": "#/components/schemas/Attestation_Workflows_DTO_object"
                    },
                    "subType": {
                        "$ref": "#/components/schemas/AttestationKey"
                    },
                    "timecardApprovalTimeframe": {
                        "$ref": "#/components/schemas/CommonDateRange"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Condition_DTO_object": {
                "description": "The Attestation condition model.",
                "properties": {
                    "comment": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "completedTransaction": {
                        "description": "A Boolean indicator of whether or not to ignore incomplete or timed-out transactions.",
                        "type": "boolean"
                    },
                    "conditionNotEvaluated": {
                        "description": "A Boolean value that used for attestation evaluation when geolocation data not transferred in request or Known Place is no longer exist.",
                        "type": "boolean"
                    },
                    "conditions": {
                        "description": "The list of Attestation combined conditions of an Attestation condition.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Complex_Condition_DTO_object"
                        },
                        "type": "array"
                    },
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "endOfRange": {
                        "description": "The minutes after shift start to define the end of time-frame from shift start to look for punches.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "excludeBreaksFromMinutesWorked": {
                        "description": "A Boolean indicator of whether or not to exclude breaks from minutes worked.",
                        "type": "boolean"
                    },
                    "extendedRadius": {
                        "description": "The additional radius value to check that passed geolocation coordinated are within Known Place associated with attestation condition.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "knownPlace": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "maxShiftLength": {
                        "description": "The maximum shift length in minutes for attestation condition of type Scheduled Shift.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "minShiftLength": {
                        "description": "The minimum shift length in minutes for attestation condition of type Scheduled Shift.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "minutesAfterPunch": {
                        "description": "The margin after punch in minutes.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "minutesAfterScheduledShiftEnd": {
                        "description": "The number of minutes to look for a punch after scheduled shift end.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "minutesAfterScheduledShiftStart": {
                        "description": "The number of minutes to look for a punch after scheduled shift start.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "minutesBeforePunch": {
                        "description": "The margin before punch in minutes.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "minutesBeforeScheduledShiftEnd": {
                        "description": "The number of minutes to look for a punch before scheduled shift end.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "minutesBeforeScheduledShiftStart": {
                        "description": "The number of minutes to look for a punch before scheduled shift start.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "noScheduledShiftFound": {
                        "description": "A Boolean value to evaluate attestation when attestation condition of type Scheduled Shift and Shift Length operator and no scheduled shift found for work shift.",
                        "type": "boolean"
                    },
                    "noShiftInProgress": {
                        "description": "A Boolean indicator of whether or not to evaluate both not in progress and in progress shifts or only in progress shifts for attestation condition of Scheduled Shift type and Punches against scheduled shift.",
                        "type": "boolean"
                    },
                    "operator": {
                        "$ref": "#/components/schemas/AttestationKey"
                    },
                    "periodicConditionMinuteType": {
                        "description": "A Boolean indicator of whether or not to display the periodic condition day type in minutes. If false, the day type is displayed in days.",
                        "type": "boolean"
                    },
                    "periodicConditionResponseValue": {
                        "type": "string"
                    },
                    "periodicConditionValue": {
                        "description": "The value of an Attestation periodic condition.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "periodicPositiveValue": {
                        "description": "The positive answer of the question posed. This value should represent the full name of the question exactly as it appears on the form.",
                        "type": "string"
                    },
                    "periodicQuestion": {
                        "description": "The question text that is displayed on the associated form.",
                        "type": "string"
                    },
                    "rangeValueEnd": {
                        "description": "The range end value of an Attestation condition.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "rangeValueStart": {
                        "description": "The range start value of an Attestation condition.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "singleValue": {
                        "description": "The value of an Attestation condition.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "startOfRange": {
                        "description": "The minutes after shift start to define the start of time-frame from shift start to look for punches.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "trueOnNoStartPunch": {
                        "description": "A Boolean indicator of whether or not no shift start punch is found. When false, a start punch was found.",
                        "type": "boolean"
                    },
                    "type": {
                        "$ref": "#/components/schemas/AttestationKey"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Manual_Entry_Process_Request_DTO_object": {
                "description": "The Retrieve Manual Time Entry Workflows request payload.",
                "properties": {
                    "attestationProcessId": {
                        "description": "The ID of an Attestation process.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "dateRange": {
                        "$ref": "#/components/schemas/CommonDateRange"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "punchSelections": {
                        "description": "A list of Attestation Punch Selection objects.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Punch_Selection_DTO_object"
                        },
                        "type": "array"
                    },
                    "token": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Attestation_Manual_Entry_Process_Response_DTO_object": {
                "description": "The Retrieve Manual Time Entry Workflows response model.",
                "properties": {
                    "attestationWorkflows": {
                        "description": "A list of Attestation workflows.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef_Entity"
                        },
                        "type": "array"
                    },
                    "params": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The map of parameters to execute Manual Time Entry workflows.",
                        "type": "object"
                    },
                    "punchDtm": {
                        "description": "The date and time of a punch in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "timezone": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    }
                },
                "type": "object"
            },
            "Attestation_Process_Complete_Request_DTO_object": {
                "description": "The Attestation process complete request model.",
                "properties": {
                    "attestationProcess": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    }
                },
                "type": "object"
            },
            "Attestation_Process_Request_DTO_object": {
                "description": "The Attestation process request model.",
                "properties": {
                    "additionalParams": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The additional parameters associated with an Attestation process.",
                        "type": "object"
                    },
                    "attestationDateTime": {
                        "description": "The start time of the Attestation process in ISO_LOCAL_TIME format (HH:mm:ss.SSS).",
                        "type": "string"
                    },
                    "button": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "device": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "deviceTimezone": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "geolocation": {
                        "$ref": "#/components/schemas/Punch_Context_Transaction_Geo_Request"
                    },
                    "localAttestationDateTime": {
                        "type": "string"
                    },
                    "mode": {
                        "description": "The mode of an Attestation process.",
                        "type": "string"
                    },
                    "position": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "source": {
                        "description": "Source of the attestation request.",
                        "enum": [
                            "UDM",
                            "WFD"
                        ],
                        "type": "string"
                    },
                    "transfer": {
                        "description": "An ordered, semi-colon separated list of Labor Category Entries and Cost Center.",
                        "type": "string"
                    },
                    "userEnteredPosition": {
                        "description": "A Boolean indicator of whether or not a position was set by a user. When false, the position was set by the system.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Attestation_Offline_Process_Request_DTO_object": {
                "description": "The offline Attestation process request model.",
                "properties": {
                    "attestationDateTime": {
                        "description": "The start time of an offline Attestation process in ISO_LOCAL_TIME format (HH:mm:ss.SSS).",
                        "type": "string"
                    },
                    "button": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "device": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "deviceTimezone": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "formValueString": {
                        "description": "The request form of an offline Attestation process.",
                        "type": "string"
                    },
                    "localAttestationDateTime": {
                        "type": "string"
                    },
                    "source": {
                        "description": "The source of an offline Attestation process.",
                        "enum": [
                            "UDM",
                            "WFD"
                        ],
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Attestation_Profile_DTO_object": {
                "description": "Entity containing necessary data to describe an Attestation profile",
                "properties": {
                    "attestationAssignmentComponents": {
                        "description": "The list of Attestation assignment components of an Attestation profile.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Assignment_DTO_object"
                        },
                        "type": "array"
                    },
                    "attestationAssignments": {
                        "description": "The list of Attestation assignments of an Attestation profile.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Assignment_DTO_object"
                        },
                        "type": "array"
                    },
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "The description of an Attestation profile.",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Question_DTO_object_Public": {
                "description": "The Attestation question model.",
                "properties": {
                    "answerComponents": {
                        "description": "An array of answers associated with an Attestation question.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Answer_DTO_object_Public"
                        },
                        "type": "array"
                    },
                    "answers": {
                        "description": "An array of answers associated with an Attestation question.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Answer_DTO_object_Public"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "displayType": {
                        "description": "The display type of an Attestation question.",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "label": {
                        "description": "The label of an Attestation question.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Question_DTO_object": {
                "description": "The Attestation question model.",
                "properties": {
                    "answerComponents": {
                        "description": "An array of answers associated with an Attestation question.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                        },
                        "type": "array"
                    },
                    "answers": {
                        "description": "An array of answers associated with an Attestation question.",
                        "items": {
                            "$ref": "#/components/schemas/Attestation_Answer_DTO_object"
                        },
                        "type": "array",
                        "uniqueItems": true
                    },
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "displayType": {
                        "description": "The display type of an Attestation question.",
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "label": {
                        "description": "The label of an Attestation question.",
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Timecard_Response_DTO_object_Public": {
                "description": "The Attestation Timecard response model.",
                "properties": {
                    "estimatedPunchOut": {
                        "description": "The Attestation timecard response estimated punch date and time.",
                        "type": "string"
                    },
                    "formattedData": {
                        "description": "The Attestation timecard response formatted data.",
                        "type": "string"
                    },
                    "hoursWorkedList": {
                        "description": "The Attestation timecard response hours worked.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_Hours_Worked_Public"
                        },
                        "type": "array"
                    },
                    "payCodeEdits": {
                        "description": "The Attestation timecard response paycodes.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_Pay_Code_Edit_Public"
                        },
                        "type": "array"
                    },
                    "punches": {
                        "description": "The Attestation timecard response punches.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_Punch_Public"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Attestation_Workflows_DTO_object": {
                "description": "The Attestation condition model.",
                "properties": {
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "deploymentId": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Workflow_Attribute_DTO_object": {
                "description": "The Attestation Workflow Attribute model.",
                "properties": {
                    "name": {
                        "description": "The name of the Attestation Workflow Attribute.",
                        "type": "string"
                    },
                    "value": {
                        "description": "The value of the Attestation Workflow Attribute.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ObjectRef_Entity": {
                "description": "ObjectRef contains an id and qualifier and either field should be able to uniquely identify an Object",
                "properties": {
                    "id": {
                        "description": "Object Ref Id",
                        "format": "int64",
                        "type": "integer"
                    },
                    "qualifier": {
                        "description": "Object Ref Unique qualifier",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Multi_Read_Request_for_exception_categories": {
                "description": "The Retrieve Employee Groups request payload's where model.",
                "properties": {
                    "where": {
                        "$ref": "#/components/schemas/Multi_Read_Criteria_for_exception_categories_fetching"
                    }
                },
                "type": "object"
            },
            "Multi_Delete_Request_for_exception_tiles": {
                "description": "The Delete Exception Tiles request model.",
                "properties": {
                    "where": {
                        "$ref": "#/components/schemas/Multi_Delete_Criteria_for_exception_tiles"
                    }
                },
                "type": "object"
            },
            "Pay_Code_To_Accrual_Codes_Request": {
                "description": "Pay codes To Accrual Codes request.",
                "properties": {
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "endDate": {
                        "description": "The end date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "type": "string"
                    },
                    "paycodes": {
                        "description": "A list of references to pay code objects.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef_Entity"
                        },
                        "type": "array"
                    },
                    "startDate": {
                        "description": "The start date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "type": "string"
                    },
                    "timeFrameName": {
                        "type": "string"
                    },
                    "timeframe_id": {
                        "description": "A symbolic identifier that represents a timeframe or a span of time.",
                        "enum": [
                            "Previous_Payperiod",
                            "Current_Payperiod",
                            "Next_Payperiod",
                            "Range_Of_Dates",
                            "Today",
                            "0",
                            "1",
                            "2",
                            "3",
                            "4",
                            "5",
                            "6",
                            "7",
                            "8",
                            "9",
                            "13"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "employee"
                ],
                "type": "object"
            },
            "Pay_Codes_To_Accrual_Codes_Response": {
                "description": "Pay codes To Accrual Codes response.",
                "properties": {
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "endDate": {
                        "description": "The end date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "type": "string"
                    },
                    "payCodeToAccrualCodeMappings": {
                        "description": "A list of pay code to accrual code mappings.",
                        "items": {
                            "$ref": "#/components/schemas/Pay_Code_to_Accrual_Code_Mapping"
                        },
                        "type": "array"
                    },
                    "startDate": {
                        "description": "The start date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Pay_Code_DAP": {
                "description": "The pay code data access profile allows you to define and manage pay codes that control how time and attendance information is processed for each employee.",
                "properties": {
                    "allowAll": {
                        "description": "A Boolean indicator of whether or not a pay code data access profile includes all pay codes in the system. Note that this property is true only for gold data and false for all other pay code data access profiles.",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "The description of a pay code data access profile.",
                        "type": "string"
                    },
                    "id": {
                        "description": "The Id of a pay code data access profile.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of a pay code data access profile. The name can be up to 31 characters long, is case insensitive, and must be unique.",
                        "type": "string"
                    },
                    "payCodes": {
                        "description": "A list of references to payCodes.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Timestamp_Context_Transaction_request": {
                "description": "Entity containing necessary data to fetch and update timestamp context transactions.",
                "properties": {
                    "cancelDeduct": {
                        "type": "boolean"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "id": {
                        "description": "The ID of the punch transaction.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "orgJob": {
                        "$ref": "#/components/schemas/TimekeepingOrgJob"
                    },
                    "position": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "punchDtm": {
                        "description": "The date and time stamp of the punch in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "timeZone": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "transferString": {
                        "description": "An ordered, semi-colon separated list of Labor Category Entries and Cost Center.",
                        "type": "string"
                    },
                    "userEnteredCostCenter": {
                        "$ref": "#/components/schemas/CostCenter"
                    },
                    "userEnteredLaborCategories": {
                        "$ref": "#/components/schemas/LaborCategories"
                    },
                    "userEnteredPosition": {
                        "description": "A Boolean indicator of whether or not a position was set by a user. When false, the position was set by the system.",
                        "type": "boolean"
                    },
                    "workRule": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    }
                },
                "type": "object"
            },
            "Aggregation_Transfer_Data_Where": {
                "description": "Aggregated Transfer Data Where Request model",
                "properties": {
                    "date": {
                        "description": "Date property on where part of the request",
                        "format": "date",
                        "type": "string"
                    },
                    "orgJob": {
                        "$ref": "#/components/schemas/OrgObjectRef"
                    }
                },
                "type": "object"
            },
            "Aggregation_Transfer_Labor_Entry_Model": {
                "description": "Aggregated Transfer Labor Entry model",
                "properties": {
                    "entryList": {
                        "description": "Collection of Labor Category Entries associated with Labor Entry",
                        "items": {
                            "$ref": "#/components/schemas/LaborLevelDefinitionEntry"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Id of Labor Category",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of Labor Category",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Absence_Span_Where": {
                "description": "Where request object.",
                "properties": {
                    "absenceSpans": {
                        "$ref": "#/components/schemas/Absence_span_request_DTO"
                    }
                },
                "required": [
                    "absenceSpans"
                ],
                "type": "object"
            },
            "Absence_span_object": {
                "description": "Absence Spans response object.",
                "properties": {
                    "absences": {
                        "description": "A list of daily absences.",
                        "items": {
                            "$ref": "#/components/schemas/Daily_transaction_for_absence_span"
                        },
                        "type": "array"
                    },
                    "days": {
                        "description": "The number of days of absence spans.",
                        "type": "number"
                    },
                    "endDate": {
                        "description": "The end date in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "format": "date",
                        "type": "string"
                    },
                    "firstTransaction": {
                        "type": "boolean"
                    },
                    "hours": {
                        "description": "The number of hours of absence spans.",
                        "type": "number"
                    },
                    "lastTransaction": {
                        "type": "boolean"
                    },
                    "partialEnd": {
                        "description": "A Boolean indicator of whether or not the first occurrence of the span is a partial day.",
                        "type": "boolean"
                    },
                    "partialStart": {
                        "description": "A Boolean indicator of whether or not the last occurrence of the span is a partial day.",
                        "type": "boolean"
                    },
                    "paycode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "startDate": {
                        "description": "The start date in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "format": "date",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Bulk_Acrrual_Move_Context_Transaction_request": {
                "description": "Accrual Move context.",
                "properties": {
                    "accrualMove": {
                        "$ref": "#/components/schemas/AcrrualMoveRestEntityTransactionRequest"
                    },
                    "validationError": {
                        "$ref": "#/components/schemas/TKErrorEntity"
                    }
                },
                "type": "object"
            },
            "Bulk_Acrrual_Reset_Context_Transaction_request": {
                "description": "Accrual Reset context.",
                "properties": {
                    "accrualReset": {
                        "$ref": "#/components/schemas/Acrrual_Reset_Rest_Entity_Transaction_request"
                    },
                    "validationError": {
                        "$ref": "#/components/schemas/TKErrorEntity"
                    }
                },
                "type": "object"
            },
            "Accrual_Bulk_Update_Transaction_request": {
                "description": "Accrual Update REST entity.",
                "properties": {
                    "accrualCode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "amount": {
                        "description": "Provides the amount of the accrual update transaction request. This number updates the duration of time of an accrual balance for a given accrual code. Typically this number represent hours or days. This property is logically associated with the AccrualUpdateforRest amountType. Normally, the amount is 0 or a positive number, but can be a negative number.",
                        "type": "number"
                    },
                    "amountType": {
                        "description": "An enumeration of the type of the amount.",
                        "enum": [
                            "HOUR",
                            "DAY",
                            "MONEY"
                        ],
                        "type": "string"
                    },
                    "effectiveDate": {
                        "description": "The effective date of an update.",
                        "format": "date",
                        "type": "string"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    }
                },
                "type": "object"
            },
            "Attestation_Display_Data_DTO_object": {
                "description": "The Attestation Display Data model.",
                "properties": {
                    "question": {
                        "$ref": "#/components/schemas/Attestation_Form_Text_DTO_object"
                    }
                },
                "type": "object"
            },
            "Attestation_Data_Where": {
                "description": "The where criteria for the requested Attestation data.",
                "properties": {
                    "dateRange": {
                        "$ref": "#/components/schemas/Attestation_Date_Range"
                    },
                    "employees": {
                        "description": "A list of references to employees.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef"
                        },
                        "type": "array",
                        "uniqueItems": true
                    }
                },
                "type": "object"
            },
            "Attestation_Daily_Detail": {
                "description": "The Attestation question and answer model.",
                "properties": {
                    "answer": {
                        "description": "The answer submitted by the employee for the presented question.",
                        "type": "string"
                    },
                    "deviceId": {
                        "description": "The device an employee used to punch within the Attestation process.",
                        "type": "string"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef"
                    },
                    "id": {
                        "description": "The ID of an Attestation daily detail.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "isPunchSubmitted": {
                        "description": "A Boolean indicator of whether or not the punch is submitted.",
                        "type": "boolean"
                    },
                    "job": {
                        "$ref": "#/components/schemas/ObjectRef"
                    },
                    "laborCategory": {
                        "$ref": "#/components/schemas/ObjectRef"
                    },
                    "manualTimeEntryStatus": {
                        "description": "The punch status of Manual Time Entry Workflow.",
                        "type": "string"
                    },
                    "manualTimeEntryWorkflow": {
                        "description": "A Boolean indicator of whether or not a Manual Time Entry Workflow (MTE) is executed and returned. When false, a Punch Button Time Entry (PBTE) workflow is executed and returned.",
                        "type": "boolean"
                    },
                    "position": {
                        "$ref": "#/components/schemas/ObjectRef"
                    },
                    "punchButton": {
                        "$ref": "#/components/schemas/ObjectRef"
                    },
                    "punchDtm": {
                        "description": "The date and time of the submitted punch in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "punchDuration": {
                        "description": "The time employee spent accomplishing Attestation process.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "punchOverride": {
                        "$ref": "#/components/schemas/ObjectRef"
                    },
                    "punchTransactionEndDtm": {
                        "description": "The end date and time of the Attestation process in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "punchTransactionStartDtm": {
                        "description": "The start date and time of the Attestation process in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "question": {
                        "description": "The question presented to the employee.",
                        "type": "string"
                    },
                    "questionAnsweredDtm": {
                        "description": "The date and time when the employee submitted an answer for a question in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "questionDuration": {
                        "description": "The time employee spent answering the question.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "shortQuestion": {
                        "description": "The short Attestation question.",
                        "type": "string"
                    },
                    "uniqueId": {
                        "description": "The unique ID of an Attestation daily detail.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "userEnteredPosition": {
                        "description": "A Boolean indicator of whether or not a position is a user-entered position. This property is from the workflow attributes of an attestation process or from the attestation_manual_time_entry_process table in Manual Time Entry Attestation case.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Attestation_Submit_Data_DTO_object": {
                "description": "The Attestation Submit Data model.",
                "properties": {
                    "question": {
                        "$ref": "#/components/schemas/Attestation_Form_Text_DTO_object"
                    },
                    "response": {
                        "$ref": "#/components/schemas/Attestation_Form_Text_DTO_object"
                    }
                },
                "type": "object"
            },
            "Attestation_Workflows_DTO_object_Public": {
                "description": "The Attestation condition model.",
                "properties": {
                    "deleted": {
                        "description": "A Boolean indicator of whether or not this Attestation entity has been deleted.",
                        "type": "boolean"
                    },
                    "deploymentId": {
                        "format": "int64",
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of an Attestation entity.",
                        "type": "string"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Complex_Condition_DTO_object": {
                "description": "The Attestation combined condition model.",
                "properties": {
                    "attestationCondition": {
                        "$ref": "#/components/schemas/ObjectRef"
                    },
                    "id": {
                        "description": "The ID of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "isNegativeOperator": {
                        "type": "boolean"
                    },
                    "logicalOperator": {
                        "description": "The logical operator of an Attestation combined condition.",
                        "type": "string"
                    },
                    "orderNumber": {
                        "description": "The order number of an Attestation combined condition.",
                        "format": "int32",
                        "type": "integer"
                    },
                    "versionCount": {
                        "description": "The version count of an Abstract Attestation entity.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Attestation_Punch_Selection_DTO_object": {
                "description": "The Attestation Punch model.",
                "properties": {
                    "attestationButton": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "position": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "punchDtm": {
                        "description": "The date and time of a punch in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "timezone": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "typeOverride": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "userEnteredPosition": {
                        "description": "A Boolean indicator of whether or not a position was set by a user. When false, the position was set by the system.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Punch_Context_Transaction_Geo_Request": {
                "description": "Entity containing geolocation data for punch transactions.",
                "properties": {
                    "accuracy": {
                        "description": "The accuracy of the geolocation data.",
                        "format": "double",
                        "type": "number"
                    },
                    "deviceId": {
                        "description": "The ID of the GPS device.",
                        "type": "string"
                    },
                    "geofenceMethod": {
                        "enum": [
                            "GPS",
                            "Wifi"
                        ],
                        "type": "string"
                    },
                    "knownPlaceName": {
                        "type": "string"
                    },
                    "latitude": {
                        "description": "The latitude of the punch transaction. The angular distance of a place north or south of the earth's equator, or of a celestial object north or south of the celestial equator, usually expressed in degrees and minutes.",
                        "format": "double",
                        "type": "number"
                    },
                    "locationId": {
                        "description": "The ID of the geolocation object.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "locationType": {
                        "description": "The geolocation type.",
                        "enum": [
                            "COARSE",
                            "FINE"
                        ],
                        "type": "string"
                    },
                    "longitude": {
                        "description": "The longitude of the punch transaction. The angular distance of a place east or west of the meridian at Greenwich, England, or west of the standard meridian of a celestial object, usually expressed in degrees and minutes.",
                        "format": "double",
                        "type": "number"
                    },
                    "outsideOfGeofence": {
                        "description": "A Boolean indicator of whether or not the punch was made outside of the defined geofenced area.",
                        "type": "boolean"
                    },
                    "unverified": {
                        "description": "A Boolean indicator of whether or not the location is unverified.",
                        "type": "boolean"
                    },
                    "updateTime": {
                        "description": "The time when the geolocation was last updated.",
                        "type": "string"
                    },
                    "wifi": {
                        "$ref": "#/components/schemas/Punch_Wifi_information"
                    }
                },
                "type": "object"
            },
            "Timecard_Hours_Worked_Public": {
                "description": "Entity containing information regarding the number of hours worked per week in a given date range.",
                "properties": {
                    "approvableByManager": {
                        "type": "boolean"
                    },
                    "commentsAvailable": {
                        "description": "A Boolean indicator of whether or not a Comment is associated with the hours worked.",
                        "type": "boolean"
                    },
                    "commentsNotes": {
                        "description": "A reference to a list of Comments. This object can have multiple Comments with multiple Notes for each Comment.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_Comment_Note_Public"
                        },
                        "type": "array"
                    },
                    "costCenter": {
                        "$ref": "#/components/schemas/CostCenter_Public"
                    },
                    "dataSource": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "durationInHours": {
                        "description": "The duration (in hours) of the hours worked.",
                        "format": "double",
                        "type": "number"
                    },
                    "editByType": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "editable": {
                        "description": "A Boolean indicator of whether or not the hours worked is editable.",
                        "type": "boolean"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "endDateTime": {
                        "description": "The end date and time of a date range in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "exceptions": {
                        "description": "A list of exception objects associated with the hours worked.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_TK_Exception_Public"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of the hours worked.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "itemId": {
                        "description": "The ID of the time item.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "job": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "laborCategories": {
                        "$ref": "#/components/schemas/LaborCategories_Public"
                    },
                    "orgJob": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "position": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "startDateTime": {
                        "description": "The start date and time of a date range in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "systemGenerated": {
                        "description": "A Boolean indicator of whether or not the hours worked transaction was generated by the system.",
                        "type": "boolean"
                    },
                    "transfer": {
                        "$ref": "#/components/schemas/Timecard_Transfer_Public"
                    },
                    "userEnteredCostCenter": {
                        "$ref": "#/components/schemas/CostCenter_Public"
                    },
                    "userEnteredLaborCategories": {
                        "$ref": "#/components/schemas/LaborCategories_Public"
                    },
                    "userEnteredPosition": {
                        "description": "A Boolean indicator of whether or not a position was set by a user. When false, the position was set by the system.",
                        "type": "boolean"
                    },
                    "workRule": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    }
                },
                "type": "object"
            },
            "Timecard_Pay_Code_Edit_Public": {
                "description": "Contextual object describing a pay code edit.",
                "properties": {
                    "amountType": {
                        "description": "The name of the symbolic value used to create this pay code edit.",
                        "enum": [
                            "HOUR",
                            "DAY",
                            "MONEY"
                        ],
                        "type": "string"
                    },
                    "applyDate": {
                        "description": "The date to which a pay code edit applies.",
                        "format": "date",
                        "type": "string"
                    },
                    "approvableByManager": {
                        "type": "boolean"
                    },
                    "commentsAvailable": {
                        "description": "A Boolean indicator of whether or not a Comment is associated with a pay code edit.",
                        "type": "boolean"
                    },
                    "commentsNotes": {
                        "description": "A reference to a list of Comments. This object can have multiple Comments with multiple Notes for each Comment.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_Comment_Note_Public"
                        },
                        "type": "array"
                    },
                    "costCenter": {
                        "$ref": "#/components/schemas/CostCenter_Public"
                    },
                    "dataSource": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "durationInDays": {
                        "description": "The duration in days of a pay code edit.",
                        "format": "double",
                        "type": "number"
                    },
                    "durationInHours": {
                        "description": "The duration (in hours) of the pay code edit.",
                        "format": "double",
                        "type": "number"
                    },
                    "editByType": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "editable": {
                        "description": "A Boolean indicator of whether or not a pay code edit is editable.",
                        "type": "boolean"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "endDateTime": {
                        "description": "The end date and time of a date range in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "exceptions": {
                        "description": "A list of exception objects associated with a pay code edit.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_TK_Exception_Public"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of a pay code edit.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "itemId": {
                        "description": "The ID of the time item.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "laborCategories": {
                        "$ref": "#/components/schemas/LaborCategories_Public"
                    },
                    "moneyAmount": {
                        "description": "The amount of money associated with a pay code edit.",
                        "format": "double",
                        "type": "number"
                    },
                    "moneyAmountCurrency": {
                        "$ref": "#/components/schemas/Currency_data_object_reference_Public"
                    },
                    "orgJob": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "overrideAcrrualAmount": {
                        "description": "The amount of override accrual days. Must be a value between -1 to 1.",
                        "format": "double",
                        "type": "number"
                    },
                    "paycode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "phantomSpans": {
                        "description": "A list of two 2 PhantomSpans for a duration pay code in a day divide. When a duration pay code spans across two days, the shift is split into two phantom spans. The first goes from shift start time to the end of the day. The second goes from start of day to end of shift.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_Paycode_Phantom_Span_Public"
                        },
                        "type": "array"
                    },
                    "position": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "scheduleAmountType": {
                        "description": "An enumeration of the schedule amount.",
                        "enum": [
                            "AMOUNT_NOT_FROM_SCHEDULE",
                            "FULL_DAY_AMOUNT_FROM_SCHEDULE",
                            "HALF_DAY_AMOUNT_FROM_SCHEDULE",
                            "FULL_DAY_AMOUNT_FROM_CONTRACT",
                            "HALF_DAY_AMOUNT_FROM_CONTRACT",
                            "FIRST_HALF_DAY_AMOUNT_FROM_CONTRACT",
                            "SECOND_HALF_DAY_AMOUNT_FROM_CONTRACT",
                            "FULL_DAY_AMOUNT_FROM_PATTERN",
                            "FROM_EMPLOYMENT_TERM",
                            "FIRST_HALF_DAY_AMOUNT_FROM_SCHEDULE",
                            "SECOND_HALF_DAY_AMOUNT_FROM_SCHEDULE",
                            "HALF_DAY_AMOUNT_FROM_PATTERN",
                            "FIRST_HALF_DAY_AMOUNT_FROM_PATTERN",
                            "SECOND_HALF_DAY_AMOUNT_FROM_PATTERN"
                        ],
                        "type": "string"
                    },
                    "scheduledShiftIds": {
                        "description": "A list of scheduled shift IDs assiciated with pay code edits.",
                        "items": {
                            "format": "int64",
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "startDateTime": {
                        "description": "The start date and time of a date range in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "systemGenerated": {
                        "description": "A Boolean indicator of whether or not the pay code edit was generated by the system.",
                        "type": "boolean"
                    },
                    "transfer": {
                        "$ref": "#/components/schemas/Timecard_Transfer_Public"
                    },
                    "updateDate": {
                        "format": "date",
                        "type": "string"
                    },
                    "userEnteredCostCenter": {
                        "$ref": "#/components/schemas/CostCenter_Public"
                    },
                    "userEnteredLaborCategories": {
                        "$ref": "#/components/schemas/LaborCategories_Public"
                    },
                    "userEnteredPosition": {
                        "description": "A Boolean indicator of whether or not a position was set by a user. When false, the position was set by the system.",
                        "type": "boolean"
                    },
                    "workRule": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    }
                },
                "type": "object"
            },
            "Timecard_Punch_Public": {
                "description": "Entity describing a punch object for the timecard resource.",
                "properties": {
                    "attestationPunchEdit": {
                        "description": "A Boolean indicator of whether or not the punch is entered as an Attestation punch edit.",
                        "type": "boolean"
                    },
                    "breakRule": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "cancelDeduct": {
                        "type": "boolean"
                    },
                    "commentsNotes": {
                        "description": "A reference to a list of Comments. This object can have multiple Comments with multiple Notes for each Comment.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_Comment_Note_Public"
                        },
                        "type": "array"
                    },
                    "costCenter": {
                        "$ref": "#/components/schemas/CostCenter_Public"
                    },
                    "dataSource": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "deductRule": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "editByType": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "editable": {
                        "type": "boolean"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "enteredOnDtm": {
                        "description": "The date and time stamp for when this punch transaction was entered through the API.",
                        "type": "string"
                    },
                    "exceptionResolved": {
                        "type": "boolean"
                    },
                    "exceptions": {
                        "description": "A list of exception objects associated with a punch.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_TK_Exception_Public"
                        },
                        "type": "array"
                    },
                    "geoLocation": {
                        "$ref": "#/components/schemas/PunchGeoLocation_Public"
                    },
                    "hasComments": {
                        "description": "A Boolean indicator that shows whether or not a Comment is associated with a punch.",
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of the punch transaction.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "isPhantom": {
                        "description": "A Boolean indicator of whether or not the punch is a phantom punch.",
                        "type": "boolean"
                    },
                    "isScheduled": {
                        "description": "A Boolean indicator of whether or not the punch is generated from a scheduled worked span.",
                        "type": "boolean"
                    },
                    "laborCategories": {
                        "$ref": "#/components/schemas/LaborCategories_Public"
                    },
                    "location": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "orgJob": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "originalPunchDtm": {
                        "description": "The date and time stamp for the original punch in ISO_LOCAL_DATE_TIME.",
                        "type": "string"
                    },
                    "position": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "punchDtm": {
                        "description": "The date and time stamp for the punch in ISO_LOCAL_DATE_TIME.",
                        "type": "string"
                    },
                    "roundedPunchDtm": {
                        "description": "The rounded punch date and time.",
                        "type": "string"
                    },
                    "timeZone": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "transfer": {
                        "$ref": "#/components/schemas/Timecard_Transfer_Public"
                    },
                    "typeOverride": {
                        "$ref": "#/components/schemas/Timecard_Type_Override_Public"
                    },
                    "updatedOnDtm": {
                        "description": "The date and time stamp for when this punch transaction was last updated.",
                        "type": "string"
                    },
                    "userEnteredCostCenter": {
                        "$ref": "#/components/schemas/CostCenter_Public"
                    },
                    "userEnteredLaborCategories": {
                        "$ref": "#/components/schemas/LaborCategories_Public"
                    },
                    "userEnteredPosition": {
                        "description": "A Boolean indicator of whether or not a position was set by a user. When false, the position was set by the system.",
                        "type": "boolean"
                    },
                    "validateAsTimestamp": {
                        "description": "A Boolean indicator of whether or not the punch is entered as a timestamp.",
                        "type": "boolean"
                    },
                    "workRule": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    }
                },
                "type": "object"
            },
            "Multi_Read_Criteria_for_exception_categories_fetching": {
                "description": "The Retrieve Employee Groups request payload model.",
                "properties": {
                    "exceptionCategories": {
                        "$ref": "#/components/schemas/Multi_Read_References_which_contains_exception_categories"
                    }
                },
                "type": "object"
            },
            "Multi_Delete_Criteria_for_exception_tiles": {
                "description": "The Delete Exception Tiles where criteria model.",
                "properties": {
                    "exceptionTiles": {
                        "$ref": "#/components/schemas/ObjectRefList"
                    }
                },
                "type": "object"
            },
            "Pay_Code_to_Accrual_Code_Mapping": {
                "description": "Paycode To Accrual Code mapping.",
                "properties": {
                    "amountType": {
                        "description": "An enumeration of the pay code amount type.",
                        "type": "string"
                    },
                    "effectiveDatedAccrualCodes": {
                        "description": "A list of effective dated accrual codes.",
                        "items": {
                            "$ref": "#/components/schemas/Effective_Dated_Accrual_Code"
                        },
                        "type": "array"
                    },
                    "paycode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "paycodeType": {
                        "description": "An enumeration of the pay code type in the form of CASCADE or REGULAR.",
                        "type": "string"
                    },
                    "validationErrors": {
                        "description": "A list of any validation errors that may have occurred during processing.",
                        "items": {
                            "$ref": "#/components/schemas/TKErrorEntity"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Absence_span_request_DTO": {
                "description": "Request object with a set of parameters used to calculate absence spans.",
                "properties": {
                    "dateRange": {
                        "$ref": "#/components/schemas/Date_range_for_absence_span_request"
                    },
                    "employees": {
                        "$ref": "#/components/schemas/Employees_for_absence_span_request"
                    },
                    "ignorablePaycode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "ignorablePaycodes": {
                        "description": "A list of combined pay code with pay codes that the service ignores during absence span calculations.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef_Entity"
                        },
                        "type": "array"
                    },
                    "includeDailyAbsences": {
                        "description": "A Boolean indicator of whether or not the service includes daily absences.",
                        "type": "boolean"
                    },
                    "rangeType": {
                        "description": "The range type associated with an absence span. Valid values include: PERIOD_TO_PERIOD, SPAN_TO_PERIOD, SPAN_TO_SPAN.",
                        "enum": [
                            "SpanToSpan",
                            "SpanToPeriod",
                            "PeriodToPeriod"
                        ],
                        "type": "string"
                    },
                    "rollupType": {
                        "description": "The rollup type level to which the absence span should roll-up. Valid values include: Highest_Combined_PayCode, Nearest_Combined_PayCode, Individual_PayCode.",
                        "enum": [
                            "HighestCombinedPayCode",
                            "NearestCombinedPayCode",
                            "IndividualPayCode"
                        ],
                        "type": "string"
                    },
                    "stitchablePaycode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    }
                },
                "required": [
                    "rangeType",
                    "stitchablePaycode"
                ],
                "type": "object"
            },
            "Daily_transaction_for_absence_span": {
                "description": "Response object for daily transaction.",
                "properties": {
                    "applyDate": {
                        "description": "The apply date of transaction in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "type": "string"
                    },
                    "durationInDays": {
                        "description": "The transaction duration in days.",
                        "type": "number"
                    },
                    "durationInHours": {
                        "description": "The transaction duration in hours.",
                        "type": "number"
                    },
                    "paycode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    }
                },
                "type": "object"
            },
            "Acrrual_Reset_Rest_Entity_Transaction_request": {
                "description": "Accrual Reset REST entity.",
                "properties": {
                    "accrualCode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "amount": {
                        "description": "Provides the amount of the Accrual Reset transaction request. This number represents the duration of time that the accrual balance should be reset to for a given accrual code. This property is logically associated with the AccrualResetforRest amountType. Normally, the amount is 0 or a positive number, but can be a negative number.",
                        "type": "number"
                    },
                    "amountType": {
                        "description": "An enumeration of the type of the amount.",
                        "enum": [
                            "HOUR",
                            "DAY",
                            "MONEY"
                        ],
                        "type": "string"
                    },
                    "effectiveDate": {
                        "description": "The date on which the reset of a specific accrual code is effective in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "probationAmount": {
                        "description": "Provides the specific amount of a single accrual code balance that is considered under probation. The rules around probation are determined through the setup of accrual policies and accrual policy rules. For example, a balance within the Vacation accrual code may be in probation for the first 90 days of their employment.",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "Attestation_Form_Text_DTO_object": {
                "description": "The Attestation Form Text model.",
                "properties": {
                    "id": {
                        "description": "The ID of an Attestation Form Text.",
                        "type": "string"
                    },
                    "text": {
                        "description": "The text of an Attestation Form Text.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Attestation_Date_Range": {
                "description": "The Attestation date range object model.",
                "properties": {
                    "endDate": {
                        "description": "The end date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "format": "date",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "The start date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "format": "date",
                        "type": "string"
                    },
                    "symbolicPeriod": {
                        "$ref": "#/components/schemas/ObjectRef"
                    }
                },
                "type": "object"
            },
            "Punch_Wifi_information": {
                "description": "The punch WiFi information model.",
                "properties": {
                    "bssid": {
                        "description": "The BSSID associated with punch WiFi information.",
                        "type": "string"
                    },
                    "essid": {
                        "description": "The ESSID associated with punch WiFi information.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Timecard_Comment_Note_Public": {
                "description": "Entity describing a set of Comments and attached Notes.",
                "properties": {
                    "comment": {
                        "$ref": "#/components/schemas/Timecard_Comment_Public"
                    },
                    "id": {
                        "description": "The ID of this set of Comments and attached Notes.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "notes": {
                        "description": "The Notes associated with a Comment.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_Note_Public"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ObjectRef_Entity_Public": {
                "description": "ObjectRef contains an id and qualifier and either field should be able to uniquely identify an Object",
                "properties": {
                    "id": {
                        "description": "Object Ref Id",
                        "format": "int64",
                        "type": "integer"
                    },
                    "qualifier": {
                        "description": "Object Ref Unique qualifier",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Timecard_TK_Exception_Public": {
                "description": "Entity representing a Timekeeping exception (TKException) related to a timecard.",
                "properties": {
                    "applyDate": {
                        "description": "The date to which an exception applies in ISO_LOCAL_DATE format (YYYY-MM-DD). This property is read only.",
                        "format": "date",
                        "type": "string"
                    },
                    "commentsNotes": {
                        "description": "A reference to a list of Comments. This object can have multiple Comments with multiple Notes for each Comment. This property is read only.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_Comment_Note_Public"
                        },
                        "type": "array"
                    },
                    "employee": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "endDateTime": {
                        "description": "The end date and time of a date range in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss). This property is read only.",
                        "type": "string"
                    },
                    "endException": {
                        "type": "boolean"
                    },
                    "endTimeZone": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "eventDate": {
                        "format": "date",
                        "type": "string"
                    },
                    "exceptionType": {
                        "description": "An enumeration that represents all exception types. This property is read only.",
                        "enum": [
                            "CANCELLED_DEDUCTION",
                            "CORE_HOURS_VIOLATION",
                            "VERY_EARLY_IN",
                            "EARLY_IN",
                            "LATE_IN",
                            "EARLY_OUT",
                            "LATE_OUT",
                            "VERY_LATE_OUT",
                            "EXCUSED_ABSENCE",
                            "UNEXCUSED_ABSENCE",
                            "SHORT_BREAK",
                            "LONG_BREAK",
                            "SHORT_SHIFT",
                            "LONG_SHIFT",
                            "MISSED_IN_PUNCH",
                            "MISSED_OUT_PUNCH",
                            "UNSCHEDULED",
                            "LONG_TOTAL_BREAK",
                            "SHORT_TOTAL_BREAK",
                            "BONUS_APPLIED",
                            "BREAK_OUT_OF_SEQUENCE",
                            "HOLIDAY_SCHEDULE_VIOLATION",
                            "MINIMUM_DAYS_ACTIVE_VIOLATION",
                            "MINIMUM_DAYS_EMPLOYED_VIOLATION",
                            "INVALID_NAMED_DURATION",
                            "WORK_HISTORY_VIOLATION"
                        ],
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the exception. This property is read only.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "isExcusedAbsence": {
                        "description": "A Boolean indicator of whether or not the exception involves an excused absence. This property is read only.",
                        "type": "boolean"
                    },
                    "isUnExcusedAbsence": {
                        "description": "A Boolean indicator of whether or not the exception involves an unexcused absence. This property is read only.",
                        "type": "boolean"
                    },
                    "justifiableEndDateTime": {
                        "description": "The end date and time of a justifiable missing time span in ISO_LOCAL_DATE_TIME format (yyyy-MM-dd HH:mm:ss.SSS). This property is read only.",
                        "type": "string"
                    },
                    "justifiableStartDateTime": {
                        "description": "The start date and time of a justifiable missing time span in ISO_LOCAL_DATE_TIME format (yyyy-MM-dd HH:mm:ss.SSS). This property is read only.",
                        "type": "string"
                    },
                    "justifications": {
                        "description": "A list of missing time justifications for this exception. This property is read only.",
                        "items": {
                            "$ref": "#/components/schemas/TKJustification_Public"
                        },
                        "type": "array"
                    },
                    "justifiedTimes": {
                        "description": "A list of justified times for this exception. This property is read only.",
                        "items": {
                            "$ref": "#/components/schemas/Timecard_Pay_Code_Edit_Public"
                        },
                        "type": "array"
                    },
                    "missingTimeStatus": {
                        "$ref": "#/components/schemas/MissingTimeStatusModel_Public"
                    },
                    "orgJob": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "overLimitInHours": {
                        "description": "The amount (in hours) that exceeds the limit defined by the exception associated with the pay code edit. This property is read only.",
                        "type": "number"
                    },
                    "position": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "punchEvent": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "reviewed": {
                        "type": "boolean"
                    },
                    "scheduleItem": {
                        "$ref": "#/components/schemas/Schedule_Exception_Public"
                    },
                    "startDateTime": {
                        "description": "The start date and time of a date range in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss). This property is read only.",
                        "type": "string"
                    },
                    "startException": {
                        "type": "boolean"
                    },
                    "startTimeZone": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "transfer": {
                        "type": "boolean"
                    },
                    "undoJustificationEnabled": {
                        "description": "A Boolean indicator that shows whether or not the undo action is available for the justification. This property is read only.",
                        "type": "boolean"
                    },
                    "userEnteredPosition": {
                        "description": "A Boolean indicator of whether or not a position was set by a user. When false, the position was set by the system.",
                        "type": "boolean"
                    },
                    "violationInHours": {
                        "description": "The total number of hours violated which caused an exception. This property is read only.",
                        "type": "number"
                    },
                    "workRule": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "workedShift": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    }
                },
                "type": "object"
            },
            "Timecard_Transfer_Public": {
                "description": "Entity containing information regarding a transfer.",
                "properties": {
                    "laborAccountId": {
                        "description": "The ID of the labor account associated with a transfer.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "orgJobId": {
                        "description": "The ID of the organizational job associated with a transfer.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "systemGenerated": {
                        "description": "A Boolean indicator of whether or not a transfer is system-generated.",
                        "type": "boolean"
                    },
                    "transferString": {
                        "description": "An ordered, semi-colon separated list of Labor Category Entries and Cost Center.",
                        "type": "string"
                    },
                    "workRuleId": {
                        "description": "The violated work rule which caused an exception associated with a transfer.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Currency_data_object_reference_Public": {
                "description": "Currency data object contains an amount value and currency code and either field should be able to uniquely identify an Object",
                "properties": {
                    "amount": {
                        "description": "Monetary value",
                        "format": "double",
                        "type": "number"
                    },
                    "currencyCode": {
                        "description": "Associate currency ISO code",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Timecard_Paycode_Phantom_Span_Public": {
                "description": "Timekeeping phantom span information.",
                "properties": {
                    "endDateTime": {
                        "description": "The end date and time of a date range in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "startDateTime": {
                        "description": "The start date and time of a date range in ISO_LOCAL_DATE_TIME format (yyyy-mm-ddThh:mm:ss.sss).",
                        "type": "string"
                    },
                    "startTimePhantom": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Timecard_Type_Override_Public": {
                "description": "Entity describing a rule override for a timecard.",
                "properties": {
                    "associatedRuleId": {
                        "description": "The ID of the associated rule.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "associatedRuleName": {
                        "description": "The name of the associated rule.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the type override.",
                        "type": "string"
                    },
                    "id": {
                        "description": "Object Ref Id",
                        "format": "int64",
                        "type": "integer"
                    },
                    "qualifier": {
                        "description": "Object Ref Unique qualifier",
                        "type": "string"
                    },
                    "typeOverrideId": {
                        "description": "The ID of the type override.",
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Multi_Read_References_which_contains_exception_categories": {
                "description": "The multi_read references which contain the actual criteria for retrieving employee groups.",
                "properties": {
                    "ids": {
                        "description": "An array of employee group IDs. Employee groups are retrieved for valid identifiers specified in this array.",
                        "items": {
                            "format": "int64",
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "qualifiers": {
                        "description": "An array of employee group names. Employee groups are retrieved for valid names specified in this array.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "refs": {
                        "description": "An array of references to employee group objects. Employee groups are retrieved for valid IDs or names specified in this array of object references.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Effective_Dated_Accrual_Code": {
                "description": "Effective Dated Accrual Code context.",
                "properties": {
                    "accrualCode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "endDate": {
                        "description": "The end date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "type": "string"
                    },
                    "isEditable": {
                        "description": "A Boolean indicator of whether or not the accrual code is editable.",
                        "type": "boolean"
                    },
                    "shortName": {
                        "description": "The short name of the accrual code.",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "The start date of a date range in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "type": "string"
                    },
                    "type": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "visible": {
                        "description": "A Boolean indicator of whether or not this accrual code is visible as set by the accrual policy.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Labor_Category_Entry": {
                "description": "Entity containing necessary data to fetch and update a labor category entry.",
                "properties": {
                    "laborCategory": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "laborCategoryEntry": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    }
                },
                "type": "object"
            },
            "Date_range_for_absence_span_request": {
                "description": "The date range request object used to limit absence spans.",
                "properties": {
                    "endDate": {
                        "description": "The end date in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "format": "date",
                        "type": "string"
                    },
                    "startDate": {
                        "description": "The start date in ISO_LOCAL_DATE format (YYYY-MM-DD).",
                        "format": "date",
                        "type": "string"
                    },
                    "symbolicPeriod": {
                        "description": "A symbolic identifier that represents a timeframe or a span of time.",
                        "properties": {
                            "id": {
                                "description": "The ID of a symbolic period.",
                                "type": "integer"
                            },
                            "qualifier": {
                                "description": "The qualifier of a symbolic period. Valid qualifiers include: Previous_Payperiod, Current_Payperiod, Next_Payperiod, and Range_Of_Dates.",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "required": [
                    "symbolicPeriod"
                ],
                "type": "object"
            },
            "Employees_for_absence_span_request": {
                "description": "The employee request object used to find absence spans for specified employees.",
                "properties": {
                    "hyperfind": {
                        "$ref": "#/components/schemas/ObjectRef_Entity"
                    },
                    "ids": {
                        "description": "A list of employee IDs that uniquely identify employees.",
                        "items": {
                            "format": "int64",
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "qualifiers": {
                        "description": "A list of person numbers that uniquely identify employees.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "refs": {
                        "description": "A list of references to employee objects that uniquely identify employees.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef_Entity"
                        },
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Timecard_Comment_Public": {
                "description": "Information necessary for using Comments.",
                "properties": {
                    "categories": {
                        "description": "A list of the categories assigned to a Comment. At least one category is required when creating a new Comment.",
                        "items": {
                            "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of a Comment.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of a Comment.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Timecard_Note_Public": {
                "description": "Entity describing a Note.",
                "properties": {
                    "dataSourceDisplayName": {
                        "description": "A string identifier that describes the data source, if one exists. Normally, this indicates that the context object came from a different source, such as a clock or device or an external data source import or interface.",
                        "type": "string"
                    },
                    "dataSourceId": {
                        "description": "The ID of the data source, if one exists. Normally, this indicates that the context object came from a different source, such as a clock, device, or an external data source such as an import or interface.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "text": {
                        "description": "The plaintext entered for a Note.",
                        "type": "string"
                    },
                    "timestamp": {
                        "description": "The timestamp associated with a Note.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Schedule_Exception_Public": {
                "description": "Timekeeping Schedule Exception information.",
                "properties": {
                    "id": {
                        "description": "The ID of the schedule exception.",
                        "format": "int64",
                        "type": "integer"
                    },
                    "payCode": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "schedulePunchDtm": {
                        "description": "The date and time stamp for the punch associated with the schedule exception in ISO_LOCAL_DATE_TIME.",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Labor_Category_Entry_Public": {
                "description": "Entity containing necessary data to fetch and update a labor category entry.",
                "properties": {
                    "laborCategory": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    },
                    "laborCategoryEntry": {
                        "$ref": "#/components/schemas/ObjectRef_Entity_Public"
                    }
                },
                "type": "object"
            }
        }
    }
}
